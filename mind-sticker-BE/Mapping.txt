ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> ConfirmationToken =>=>=> RelationalSchema.Table>> confirmationtoken;
ClassDiagram.Class>> Note =>=>=> RelationalSchema.Table>> note;
ClassDiagram.Class>> Role =>=>=> RelationalSchema.Table>> role;
ClassDiagram.Attribut>> User.id:Long =>=>=> RelationalSchema.Column>> user.id PRIMARY KEY;
ClassDiagram.Attribut>> User.firstname:String =>=>=> RelationalSchema.Column>> user.firstname;
ClassDiagram.Attribut>> User.lastname:String =>=>=> RelationalSchema.Column>> user.lastname;
ClassDiagram.Attribut>> User.enabled:boolean =>=>=> RelationalSchema.Column>> user.enabled;
ClassDiagram.Attribut>> User.username:String =>=>=> RelationalSchema.Column>> user.username;
ClassDiagram.Attribut>> User.email:String =>=>=> RelationalSchema.Column>> user.email;
ClassDiagram.Attribut>> User.birthday:Date =>=>=> RelationalSchema.Column>> user.birthday;
ClassDiagram.Attribut>> User.address:String =>=>=> RelationalSchema.Column>> user.address;
ClassDiagram.Attribut>> User.phonenumber:String =>=>=> RelationalSchema.Column>> user.phonenumber;
ClassDiagram.Attribut>> User.password:String =>=>=> RelationalSchema.Column>> user.password;
ClassDiagram.Attribut>> User.avatarfilename:String =>=>=> RelationalSchema.Column>> user.avatarfilename;
ClassDiagram.Attribut>> ConfirmationToken.tokenid:long =>=>=> RelationalSchema.Column>> confirmationtoken.tokenid PRIMARY KEY;
ClassDiagram.Attribut>> ConfirmationToken.confirmationtoken:String =>=>=> RelationalSchema.Column>> confirmationtoken.confirmationtoken;
ClassDiagram.Attribut>> ConfirmationToken.created:Date =>=>=> RelationalSchema.Column>> confirmationtoken.created;
ClassDiagram.Attribut>> Note.id:Long =>=>=> RelationalSchema.Column>> note.id PRIMARY KEY;
ClassDiagram.Attribut>> Note.title:String =>=>=> RelationalSchema.Column>> note.title;
ClassDiagram.Attribut>> Note.content:String =>=>=> RelationalSchema.Column>> note.content;
ClassDiagram.Attribut>> Role.id:Long =>=>=> RelationalSchema.Column>> role.id PRIMARY KEY;
ClassDiagram.Attribut>> Role.name:RoleName =>=>=> RelationalSchema.Column>> role.name;
Many-To-Many relationship between ClassDiagram.Class>>User  and ClassDiagram.Class>>set<role>: user_roles(user_id:User [PK] #FK to User,role_id:set<role> [PK] #FK to set<role>);
One-To-One relationship between ClassDiagram.Class>>ConfirmationToken  to ClassDiagram.Class>>User represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Note  to ClassDiagram.Class>>User represented by ClassDiagram.Atrribute>>writer;
