ClassDiagram.Class>> Post =>=>=> RelationalSchema.Table>> post;
ClassDiagram.Class>> Endorsement =>=>=> RelationalSchema.Table>> endorsement;
ClassDiagram.Class>> Like =>=>=> RelationalSchema.Table>> like;
ClassDiagram.Class>> Comment =>=>=> RelationalSchema.Table>> comment;
ClassDiagram.Class>> Skill =>=>=> RelationalSchema.Table>> skill;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> Connection =>=>=> RelationalSchema.Table>> connection;
ClassDiagram.Attribut>> Post.content:String =>=>=> RelationalSchema.Column>> post.content;
ClassDiagram.Attribut>> Post.GeneratedName:Date =>=>=> RelationalSchema.Column>> post.GeneratedName;
ClassDiagram.Attribut>> Comment.content:String =>=>=> RelationalSchema.Column>> comment.content;
ClassDiagram.Attribut>> Comment.GeneratedName:Date =>=>=> RelationalSchema.Column>> comment.GeneratedName;
ClassDiagram.Attribut>> Skill.skill:String =>=>=> RelationalSchema.Column>> skill.skill;
ClassDiagram.Attribut>> User.username:String =>=>=> RelationalSchema.Column>> user.username;
ClassDiagram.Attribut>> User.password:String =>=>=> RelationalSchema.Column>> user.password;
ClassDiagram.Attribut>> User.fullname:String =>=>=> RelationalSchema.Column>> user.fullname;
ClassDiagram.Attribut>> User.profilename:String =>=>=> RelationalSchema.Column>> user.profilename;
ClassDiagram.Attribut>> User.photo:byte =>=>=> RelationalSchema.Column>> user.photo;
ClassDiagram.Attribut>> User.photocontenttype:String =>=>=> RelationalSchema.Column>> user.photocontenttype;
ClassDiagram.Attribut>> Connection.accepted:boolean =>=>=> RelationalSchema.Column>> connection.accepted;
Many-To-One relationship from ClassDiagram.Class>>Post  to ClassDiagram.Class>>user represented by ClassDiagram.Atrribute>>poster;
One-To-Many relationship from ClassDiagram.Class>>Post  to ClassDiagram.Class>>List<Like>;
One-To-Many relationship from ClassDiagram.Class>>Post  to ClassDiagram.Class>>List<Comment>;
Many-To-One relationship from ClassDiagram.Class>>Endorsement  to ClassDiagram.Class>>user represented by ClassDiagram.Atrribute>>endorser;
Many-To-One relationship from ClassDiagram.Class>>Endorsement  to ClassDiagram.Class>>skill represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Like  to ClassDiagram.Class>>user represented by ClassDiagram.Atrribute>>liker;
Many-To-One relationship from ClassDiagram.Class>>Like  to ClassDiagram.Class>>post represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Comment  to ClassDiagram.Class>>user represented by ClassDiagram.Atrribute>>creator;
Many-To-One relationship from ClassDiagram.Class>>Comment  to ClassDiagram.Class>>post represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Skill  to ClassDiagram.Class>>user represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Skill  to ClassDiagram.Class>>List<Endorsement>;
One-To-Many relationship from ClassDiagram.Class>>User  to ClassDiagram.Class>>List<Post>;
One-To-Many relationship from ClassDiagram.Class>>User  to ClassDiagram.Class>>List<Connection>;
One-To-Many relationship from ClassDiagram.Class>>User  to ClassDiagram.Class>>List<Connection>;
One-To-Many relationship from ClassDiagram.Class>>User  to ClassDiagram.Class>>List<Like>;
One-To-Many relationship from ClassDiagram.Class>>User  to ClassDiagram.Class>>List<Endorsement>;
One-To-Many relationship from ClassDiagram.Class>>User  to ClassDiagram.Class>>List<Skill>;
Many-To-One relationship from ClassDiagram.Class>>Connection  to ClassDiagram.Class>>user represented by ClassDiagram.Atrribute>>sender;
Many-To-One relationship from ClassDiagram.Class>>Connection  to ClassDiagram.Class>>user represented by ClassDiagram.Atrribute>>receiver;
