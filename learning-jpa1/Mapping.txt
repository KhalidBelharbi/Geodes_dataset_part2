ClassDiagram.Class>> Member =>=>=> RelationalSchema.Table>> member;
ClassDiagram.Class>> Category =>=>=> RelationalSchema.Table>> category;
ClassDiagram.Class>> Item =>=>=> RelationalSchema.Table>> item;
ClassDiagram.Class>> Book =>=>=> RelationalSchema.Table>> book;
ClassDiagram.Class>> Movie =>=>=> RelationalSchema.Table>> movie;
ClassDiagram.Class>> Album =>=>=> RelationalSchema.Table>> album;
ClassDiagram.Class>> OrderItem =>=>=> RelationalSchema.Table>> orderitem;
ClassDiagram.Class>> Delivery =>=>=> RelationalSchema.Table>> delivery;
ClassDiagram.Class>> Order =>=>=> RelationalSchema.Table>> order;
ClassDiagram.Attribut>> Member.id:Long =>=>=> RelationalSchema.Column>> member.id PRIMARY KEY;
ClassDiagram.Attribut>> Member.name:String =>=>=> RelationalSchema.Column>> member.name;
ClassDiagram.Attribut>> Member.city:String =>=>=> RelationalSchema.Column>> member.city;
ClassDiagram.Attribut>> Member.street:String =>=>=> RelationalSchema.Column>> member.street;
ClassDiagram.Attribut>> Member.zipcode:String =>=>=> RelationalSchema.Column>> member.zipcode;
ClassDiagram.Attribut>> Category.id:Long =>=>=> RelationalSchema.Column>> category.id PRIMARY KEY;
ClassDiagram.Attribut>> Category.name:String =>=>=> RelationalSchema.Column>> category.name;
ClassDiagram.Attribut>> Item.id:Long =>=>=> RelationalSchema.Column>> item.id PRIMARY KEY;
ClassDiagram.Attribut>> Item.//이름name:String =>=>=> RelationalSchema.Column>> item.//이름name;
ClassDiagram.Attribut>> Item.//가격price:int =>=>=> RelationalSchema.Column>> item.//가격price;
ClassDiagram.Attribut>> Item.//재고수량stockquantity:int =>=>=> RelationalSchema.Column>> item.//재고수량stockquantity;
ClassDiagram.Attribut>> Book.author:String =>=>=> RelationalSchema.Column>> book.author;
ClassDiagram.Attribut>> Book.isbn:String =>=>=> RelationalSchema.Column>> book.isbn;
ClassDiagram.Attribut>> Movie.director:String =>=>=> RelationalSchema.Column>> movie.director;
ClassDiagram.Attribut>> Movie.actor:String =>=>=> RelationalSchema.Column>> movie.actor;
ClassDiagram.Attribut>> Album.artist:String =>=>=> RelationalSchema.Column>> album.artist;
ClassDiagram.Attribut>> Album.etc:String =>=>=> RelationalSchema.Column>> album.etc;
ClassDiagram.Attribut>> OrderItem.id:Long =>=>=> RelationalSchema.Column>> orderitem.id PRIMARY KEY;
ClassDiagram.Attribut>> OrderItem.//주문가격orderprice:int =>=>=> RelationalSchema.Column>> orderitem.//주문가격orderprice;
ClassDiagram.Attribut>> OrderItem.//주문수량count:int =>=>=> RelationalSchema.Column>> orderitem.//주문수량count;
ClassDiagram.Attribut>> Delivery.id:Long =>=>=> RelationalSchema.Column>> delivery.id PRIMARY KEY;
ClassDiagram.Attribut>> Delivery.city:String =>=>=> RelationalSchema.Column>> delivery.city;
ClassDiagram.Attribut>> Delivery.street:String =>=>=> RelationalSchema.Column>> delivery.street;
ClassDiagram.Attribut>> Delivery.zipcode:String =>=>=> RelationalSchema.Column>> delivery.zipcode;
ClassDiagram.Attribut>> Delivery.status:DeliveryStatus =>=>=> RelationalSchema.Column>> delivery.status;
ClassDiagram.Attribut>> Order.id:Long =>=>=> RelationalSchema.Column>> order.id PRIMARY KEY;
ClassDiagram.Attribut>> Order.//주문시간order:Date =>=>=> RelationalSchema.Column>> order.//주문시간order;
ClassDiagram.Attribut>> Order.//주문상태status:OrderStatus =>=>=> RelationalSchema.Column>> order.//주문상태status;
One-To-Many relationship from ClassDiagram.Class>>Member  to ClassDiagram.Class>>List<Order>;
Many-To-Many relationship between ClassDiagram.Class>>Category  and ClassDiagram.Class>>Item: category_item(category_id:Category [PK] #FK to Category,item_id:Item [PK] #FK to Item);
Many-To-One relationship from ClassDiagram.Class>>Category  to ClassDiagram.Class>>Category represented by ClassDiagram.Atrribute>>//카테고리계층구조를위한필드들parent;
One-To-Many relationship from ClassDiagram.Class>>Category  to ClassDiagram.Class>>List<Category>;
Many-To-One relationship from ClassDiagram.Class>>OrderItem  to ClassDiagram.Class>>Item represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>OrderItem  to ClassDiagram.Class>>order represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Delivery  to ClassDiagram.Class>>order represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Order  to ClassDiagram.Class>>Member represented by ClassDiagram.Atrribute>>//주문회원;
One-To-Many relationship from ClassDiagram.Class>>Order  to ClassDiagram.Class>>List<OrderItem>;
One-To-One relationship between ClassDiagram.Class>>Order  to ClassDiagram.Class>>delivery represented by ClassDiagram.Atrribute>>//배송정보;
Inheritance based on SINGLE-TABLE strategy (PUSH-UP): ROOT>>Item   Descriminator>>DTYPE: String ;
