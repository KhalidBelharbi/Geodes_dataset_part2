ClassDiagram.Class>> Contact =>=>=> RelationalSchema.Table>> contact;
ClassDiagram.Class>> CardAcces =>=>=> RelationalSchema.Table>> cardacces;
ClassDiagram.Class>> Articol =>=>=> RelationalSchema.Table>> articol;
ClassDiagram.Class>> Persoana =>=>=> RelationalSchema.Table>> persoana;
ClassDiagram.Class>> Anagajat =>=>=> RelationalSchema.Table>> anagajat;
ClassDiagram.Class>> Curs =>=>=> RelationalSchema.Table>> curs;
ClassDiagram.Class>> Carte =>=>=> RelationalSchema.Table>> carte;
ClassDiagram.Class>> Librarie =>=>=> RelationalSchema.Table>> librarie;
ClassDiagram.Class>> Autor =>=>=> RelationalSchema.Table>> autor;
ClassDiagram.Class>> LocParcare =>=>=> RelationalSchema.Table>> locparcare;
ClassDiagram.Class>> Student =>=>=> RelationalSchema.Table>> student;
ClassDiagram.Attribut>> Contact.id:int =>=>=> RelationalSchema.Column>> contact.id PRIMARY KEY;
ClassDiagram.Attribut>> Contact.nume:String =>=>=> RelationalSchema.Column>> contact.nume;
ClassDiagram.Attribut>> Contact.numere:Collection<String> =>=>=> RelationalSchema.Column>> contact.numere;
ClassDiagram.Attribut>> CardAcces.id:int =>=>=> RelationalSchema.Column>> cardacces.id PRIMARY KEY;
ClassDiagram.Attribut>> CardAcces.serie:String =>=>=> RelationalSchema.Column>> cardacces.serie;
ClassDiagram.Attribut>> Articol.id:int =>=>=> RelationalSchema.Column>> articol.id PRIMARY KEY;
ClassDiagram.Attribut>> Articol.titlu:String =>=>=> RelationalSchema.Column>> articol.titlu;
ClassDiagram.Attribut>> Persoana.id:int =>=>=> RelationalSchema.Column>> persoana.id PRIMARY KEY;
ClassDiagram.Attribut>> Persoana.nume:String =>=>=> RelationalSchema.Column>> persoana.nume;
ClassDiagram.Attribut>> Anagajat.id:int =>=>=> RelationalSchema.Column>> anagajat.id PRIMARY KEY;
ClassDiagram.Attribut>> Anagajat.nume:String =>=>=> RelationalSchema.Column>> anagajat.nume;
ClassDiagram.Attribut>> Curs.ind:int =>=>=> RelationalSchema.Column>> curs.ind PRIMARY KEY;
ClassDiagram.Attribut>> Curs.nume:String =>=>=> RelationalSchema.Column>> curs.nume;
ClassDiagram.Attribut>> Carte.id:int =>=>=> RelationalSchema.Column>> carte.id PRIMARY KEY;
ClassDiagram.Attribut>> Carte.nume:String =>=>=> RelationalSchema.Column>> carte.nume;
ClassDiagram.Attribut>> Librarie.id:int =>=>=> RelationalSchema.Column>> librarie.id PRIMARY KEY;
ClassDiagram.Attribut>> Librarie.adresa:String =>=>=> RelationalSchema.Column>> librarie.adresa;
ClassDiagram.Attribut>> Autor.id:int =>=>=> RelationalSchema.Column>> autor.id PRIMARY KEY;
ClassDiagram.Attribut>> Autor.nume:String =>=>=> RelationalSchema.Column>> autor.nume;
ClassDiagram.Attribut>> LocParcare.id:int =>=>=> RelationalSchema.Column>> locparcare.id PRIMARY KEY;
ClassDiagram.Attribut>> LocParcare.numar:int =>=>=> RelationalSchema.Column>> locparcare.numar;
ClassDiagram.Attribut>> Student.id:int =>=>=> RelationalSchema.Column>> student.id PRIMARY KEY;
ClassDiagram.Attribut>> Student.nume:String =>=>=> RelationalSchema.Column>> student.nume;
One-To-One relationship between ClassDiagram.Class>>CardAcces  to ClassDiagram.Class>>persoana represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Persoana  to ClassDiagram.Class>>CardAcces represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Anagajat  to ClassDiagram.Class>>locparcare represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-Many relationship between ClassDiagram.Class>>Curs  and ClassDiagram.Class>>collection<student>: tabela_de_legatura(joincolumna:Curs [PK] #FK to Curs,inverse_joincolumnb:collection<student> [PK] #FK to collection<student>);
Many-To-One relationship from ClassDiagram.Class>>Carte  to ClassDiagram.Class>>librarie represented by ClassDiagram.Atrribute>>libratie;
One-To-Many relationship from ClassDiagram.Class>>Librarie  to ClassDiagram.Class>>Collection<Carte>;
Articol: autor_Articol(autorID:autor [PK] #FK to autor,ArticolID:Articol [PK] #FK to Articol);
