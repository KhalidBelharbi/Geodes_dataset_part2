ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> Posts =>=>=> RelationalSchema.Table>> posts;
ClassDiagram.Class>> BaseTimeEntity =>=>=> RelationalSchema.Table>> basetimeentity;
ClassDiagram.Attribut>> User.id:Long =>=>=> RelationalSchema.Column>> user.id PRIMARY KEY;
ClassDiagram.Attribut>> User.name:String =>=>=> RelationalSchema.Column>> user.name;
ClassDiagram.Attribut>> User.email:String =>=>=> RelationalSchema.Column>> user.email;
ClassDiagram.Attribut>> User.picture:String =>=>=> RelationalSchema.Column>> user.picture;
ClassDiagram.Attribut>> User.//기본적으로int로된숫자가저장된다//숫자로저장되면db확인때무슨코드를의미하는지알수가없어stringtype으로선언:Role =>=>=> RelationalSchema.Column>> user.//기본적으로int로된숫자가저장된다//숫자로저장되면db확인때무슨코드를의미하는지알수가없어stringtype으로선언;
ClassDiagram.Attribut>> Posts.id:Long =>=>=> RelationalSchema.Column>> posts.id PRIMARY KEY;
ClassDiagram.Attribut>> Posts.content:String =>=>=> RelationalSchema.Column>> posts.content;
ClassDiagram.Attribut>> Posts.author:String =>=>=> RelationalSchema.Column>> posts.author;
ClassDiagram.Attribut>> Posts.title:String =>=>=> RelationalSchema.Column>> posts.title;
ClassDiagram.Attribut>> BaseTimeEntity.//entity가생성되어저장될떄자동저장createdate:LocalDateTime =>=>=> RelationalSchema.Column>> basetimeentity.//entity가생성되어저장될떄자동저장createdate;
ClassDiagram.Attribut>> BaseTimeEntity.//조회한entity의값을변경할때시간이자동저장modifieddate:LocalDateTime =>=>=> RelationalSchema.Column>> basetimeentity.//조회한entity의값을변경할때시간이자동저장modifieddate;
