defaultenhancementcontext();

classpropertyholder(GeneratedName:PersistentClass, joins:Map<String,Join>, joinsperrealtablename:Map<String,Join>, GeneratedName:EntityBinder, inheritancestateperclass:Map<XClass,InheritanceState>, attributeconversioninfomap:Map<String,AttributeConversionInfo>);

entitybinder(log:CoreMessageLogger, natural_id_cache_suffix:String, context:MetadataBuildingContext, name:String, annotatedclass:XClass, GeneratedName:PersistentClass, discriminatorvalue:String, forcediscriminator:Boolean, insertablediscriminator:Boolean, dynamicinsert:boolean, dynamicupdate:boolean, explicithibernateentityannotation:boolean, GeneratedName:OptimisticLockType, GeneratedName:PolymorphismType, selectbeforeupdate:boolean, batchsize:int, lazy:boolean, proxyclass:XClass, where:String, secondarytables:java.util.Map<String,Join>, secondarytablejoins:java.util.Map<String,Object>, filters:List<Filter>, GeneratedName:InheritanceState, ignoreidannotations:boolean, property:AccessType, wrapidsinembeddedcomponents:boolean, subselect:String, iscached:boolean, cacheconcurrentstrategy:String, cacheregion:String, cachelazyproperty:boolean, naturalidcacheregion:String, sec_tbl_ns_helper:SecondaryTableNamingStrategyHelper);

collectionbinder(log:CoreMessageLogger, inferred_class_priority:List<Class<?>>, buildingcontext:MetadataBuildingContext, GeneratedName:Collection, propertyname:String, GeneratedName:PropertyHolder, batchsize:int, mappedby:String, collectiontype:XClass, targetentity:XClass, inversejoincolumns:Ejb3JoinColumn, cascadestrategy:String, cacheconcurrencystrategy:String, cacheregionname:String, onetomany:boolean, GeneratedName:IndexColumn, cascadedeleteenabled:boolean, mapkeypropertyname:String, insertable:boolean, updatable:boolean, fkjoincolumns:Ejb3JoinColumn, isexplicitassociationtable:boolean, elementcolumns:Ejb3Column, isembedded:boolean, property:XProperty, ignorenotfound:boolean, GeneratedName:TableBinder, mapkeycolumns:Ejb3Column, mapkeymanytomanycolumns:Ejb3JoinColumn, localgenerators:HashMap<String,IdentifierGeneratorDefinition>, inheritancestateperclass:Map<XClass,InheritanceState>, declaringclass:XClass, declaringclassset:boolean, GeneratedName:AccessType, hibernateextensionmapping:boolean, issortedcollection:boolean, jpaorderby:javax.persistence.OrderBy, sql:OrderBy, deprecated:Sort, naturalsort:SortNatural, comparatorsort:SortComparator, explicittype:String, explicittypeparameters:Properties, joincolumns:Ejb3JoinColumn);

resultsetmappingsecondpass(log:CoreMessageLogger, ann:SqlResultSetMapping, context:MetadataBuildingContext, isdefault:boolean);

annotationbinder(log:CoreMessageLogger);

in(id:long [PK], prop:String);

jaccintegratortest();

nativequerywithparenthesestest();

hhh14112test();

hhh13670test();

integerrepresentationliteralparsingexceptiontest();

hhh14116test();

annotationmappingjoinclasstest();

hhh14154test();

maxinexpressionparameterpaddingtest(max_count:int, GeneratedName:SQLStatementInterceptor);

hhh14156test();

joinordertest(GeneratedName:SQLStatementInterceptor);

groupbyaliastest(max_count:int, GeneratedName:SQLStatementInterceptor);

inclauseparameterpaddingcriteriatest(GeneratedName:SQLStatementInterceptor);

isemptyjqltest(personwithoutnicknameid:Long, personawithsinglenicknameid:Long, personwithmultiplenicknamesid:Long);

hhh13712test();

inclauseparameterpaddingtest(GeneratedName:SQLStatementInterceptor);

criteriastringinlineliteraltest();

task(id:Long [PK], GeneratedName:Patient #FK to(patient), description:String);

site(id:Long [PK]);

patient(id:Long [PK], GeneratedName:Site #FK to(site));

searchedcaseexpressiontest();



department(name:String);

subentity(subfield:SideEntity #FK to(sideentity));

sideentity(id:Long [PK], name:String);

superentity(id:Long [PK]);

aliaswithcriteriontest();

article(id:Integer [PK], GeneratedName:Author #FK to(author));

book(id:Long [PK], name:String);

sickness(begintime:Date, type:String [PK], classification:String [PK]);

author(id:Integer [PK]);

umbrella(id:PK, size:int);

modernentity(id:int [PK], foo:int);

nestedlegacyentity(primitivepk1:LegacyEntity [PK] #FK to(legacyentity), id:ModernEntity [PK] #FK to(modernentity));

legacyentity(primitivepk1:int [PK], primitivepk2:int [PK], foo:String);

deletesharedonetomanyorphanstest(1alongwiththeinitializationoftheitem#higheritemrelations	collectioncausestheissue	*/batch_fetch_size:String);

feature(id:Long [PK], GeneratedName:Product #FK to(product), name:String);



a(id:Integer [PK], GeneratedName:B);

x(id:Long [PK], GeneratedName:Tranchenmodell #FK to(tranchenmodell));

y(id:Long [PK], GeneratedName:Tranche #FK to(tranche));

tranche(id:Long [PK], GeneratedName:Tranchenmodell #FK to(tranchenmodell), GeneratedName:Y #FK to(y));

tranchenmodell(id:Long [PK], GeneratedName:Preisregelung #FK to(preisregelung), GeneratedName:X #FK to(x));

preisregelung(id:Long [PK], GeneratedName:Tranchenmodell #FK to(tranchenmodell));



entitymanagerclosedtest();



manytoonejointabletest();

address(id:Long [PK], street:String);

basiccditest(count:int);

event(id:Long [PK], name:String);

testlazypropertyonpreupdate(entity:EntityWithLazyProperty);



workload(id:Integer [PK], name:String, load:Integer);

removeorderingtest();

mammal(mamalnbr:int);

containstest();

reptile(temperature:float);

pet(id:int [PK], name:String, weight:double);

empire(id:Long [PK]);

colony(id:Long [PK]);

competitor(id:Integer [PK], name:String);

mail(id:Long [PK], from:String);

dog(numbones:int);

b4(id:int [PK], GeneratedName:A #FK to(a));

c1(id:int [PK], GeneratedName:B1 #FK to(b1));

b1(id:int [PK], GeneratedName:A #FK to(a));

b3(id:int [PK], GeneratedName:A #FK to(a));

a(id:int [PK], name:String);

b2(id:int [PK], GeneratedName:A #FK to(a));

c2(id:int [PK], GeneratedName:B2 #FK to(b2));

cat(lives:int);

hoarder(id:Long [PK], name:String, favorite:Item #FK to(item));

competition(id:Integer [PK]);

competition_competitor(Competition_ID:Competition [PK] #FK to Competition,list<competitor>_ID:list<competitor> [PK] #FK to list<competitor>);

race(id:Integer [PK], name:String);

category(id:Long [PK], name:String, example:Item #FK to(item), version:int);

item(id:Long [PK], version:int, name:String, GeneratedName:Category #FK to(category));

decorate(id:int [PK], name:String, GeneratedName:Pet);

music(id:Integer [PK], name:String, version:Integer);

dress(name:String [PK]);

fooditem(id:Long [PK], name:String, version:Long);

dog(name:String);

cat(nickname:String);

parent(id:Integer [PK], name:String, siblings:Relatives<Child>);

withgenericcollection(id:String [PK], d:double, parent:WithGenericCollection<? extends Object> #FK to(withgenericcollection<? extends object>));

deskwithrawtype(id:String [PK], name:String);

desk_empl(desk_fk:DeskWithRawType [PK] #FK to DeskWithRawType,empl_fk:collection [PK] #FK to collection);

house(GeneratedName:Key, GeneratedName:Address, rooms:Set<Room>, roomsbyname:Map<String,Room>, roomsbysize:List<Room>);

garden(id:Long [PK], name:String);

joinedmanytooneowner(id:Long [PK], GeneratedName:House);

feline(color:String);

simpleperson(ssn:String [PK]);

giant(height:long);

person(firstname:String [PK], lastname:String [PK], age:Short);

child(id:Integer [PK], name:String);

flower(id:Long [PK], name:String);

employeewithrawtype(id:String [PK], name:String);

simplemedicalhistory(lastup:Date, patient:SimplePerson [PK] #FK to(simpleperson));

fridge(id:Long [PK], brand:String, temperature:int);

twopersistenceunits2lcdisabledenabled();

datapoint(id:long [PK]);

unlisteddatapoint(id:long [PK]);

cupholder(id:Integer [PK], radius:BigDecimal, title:String);

pessimisticwritewithoptionalouterjoinbreaksrefreshtest(GeneratedName:Child);

person(id:Long [PK], parent:Person #FK to(person));

unversionedlock(id:Integer [PK], name:String);

lockable(id:Integer [PK], version:Integer, name:String);

lock(id:Integer [PK], version:Integer, name:String);

querylockingtest();

multilevelcascadecollectionidclasstest(log:Logger);

middle(id:Long [PK], GeneratedName:Top #FK to(top), GeneratedName:Bottom #FK to(bottom));

multilevelcascadecollectionembeddabletest(log:Logger);

multilevelcascaderegularidbasedparentchildassociationtest(log:Logger);

bottom(id:Long [PK], GeneratedName:Middle #FK to(middle));

top(id:Long [PK]);

mergewithtransientnoncascadedassociationtest();

student(id:Long [PK], name:String, primary:Teacher #FK to(teacher), favorite:Teacher #FK to(teacher));

soldier(id:Integer [PK], name:String, GeneratedName:Troop);

son(id:Integer [PK], GeneratedName:Parent #FK to(parent));

troop(id:Integer [PK], name:String);

grandson(id:Integer [PK], parent:Son #FK to(son));

extractiondocument(id:Long [PK], body:byte, documentinfo:ExtractionDocumentInfo #FK to(Action));

song(id:Long [PK], GeneratedName:Author #FK to(author));

troop2(/*fails:*/id:Integer [PK], name:String);

teacher(id:Long [PK], name:String, favorite:Student #FK to(student));

detachandcontainstest();

parent(id:Integer [PK]);

mergetest();

conference(id:Long [PK], GeneratedName:Date, extractiondocument:ExtractionDocumentInfo #FK to(Action));

extractiondocumentinfo(id:Long [PK], lastmodified:Date, GeneratedName:Conference);

soldier2(id:Integer [PK], name:String, troop:Troop2 #FK to(troop2));

author(id:Long [PK]);

product2();

product1(overridenname:String);

productattribute(owner:String [PK]);



company(id:Long [PK]);

product(id:Long [PK]);

employee(id:Long [PK], name:String, /*@embedded@attributeoverrides({@attributeoverride(name:Address, /*@embedded@attributeoverrides({@attributeoverride(name:Address);

article(id:Integer [PK], name:String, next:Article);

article(id:Integer [PK], name:String, next:Article);

employee(id:Long [PK], name:String, /*@embedded@attributeoverrides({@attributeoverride(name:Address, /*@embedded@attributeoverrides({@attributeoverride(name:Address);

storeprocedurerefcursoroutparameterbynametest(GeneratedName:EntityManagerFactory);

storeprocedureoutparameterbypositiontest(GeneratedName:EntityManagerFactory);

hsqlstoreproceduretest(GeneratedName:EntityManagerFactory);

user(id:int [PK], name:String);

storedprocedurenullparameterbynametest(GeneratedName:EntityManagerFactory);

h2storeproceduretest();

storedprocedureresultsetmappingtest();

storeprocedureoutparameterbynametest(GeneratedName:EntityManagerFactory);

storeprocedurerefcursoroutparameterbypositiontest(GeneratedName:EntityManagerFactory);

datetimeparametertest(entitymanagerfactory:HibernateEntityManagerFactory, nowcal:GregorianCalendar, now:Date);

musician(id:Integer [PK], name:String, favourite:Music);

instrument(id:int [PK], name:String, GeneratedName:Type);

music(id:Integer [PK], version:Integer, name:String);

abstractjtabatchtest(loginspection:LoggerInspectionRule, GeneratedName:Triggerable);

closeentitymanagerwithactivetransactiontest();

jtareusingentitytransactiontest();

book(id:Integer [PK], name:String, version:Integer);

transactionrollbacktest();

fruit(id:Long [PK]);

strawberry(size:Long);

explicitlynoncacheableentity(id:Long [PK], name:String);

explicitlycacheableentity(id:Long [PK], name:String);

nocacheableannotationentity(id:Long [PK], name:String);

simpleentity(id:Long [PK], name:String);

order(id:int [PK], total:int);

testentity(id:long [PK]);

carpet(id:Integer [PK], country:String);

caipirinha(id:Integer [PK], name:String);

money(id:Integer [PK]);

applicationserver(id:Integer [PK], name:String, GeneratedName:Version);

morito(id:Integer [PK], power:String);

bug(id:Long [PK], subject:String, comment:String);

washer();

bug(id:Long [PK], subject:String, comment:String);

applicationserver(id:Integer [PK], name:String, GeneratedName:Version);

money(id:Integer [PK]);

scooter(model:String [PK], speed:Long);

money1(id:Integer [PK]);

applicationserver1(id:Integer [PK], name:String, version:Version1);

typedvalueparameterstest(docid:int);

nativequeryordinalparameterstest(game_titles:String);

nullparameterquerytest();

querywithliteralsinselectexpressiontest();

oracleconstructorresultnativequerytest();

scalarresultnativequerytest();

namedquerycommenttest(GeneratedName:SQLStatementInterceptor, game_titles:String);

tuplequerytest();

limitexpressiontest();

queryparameterswithdisabledvalidationtest();

namedquerytest(game_titles:String);

constructorresultnativequerytest();

namedqueryflushmodetest();

querywithinparamlistandnamedentitygraphtest();

queryparametersvalidationtest();

datetimeparametertest(nowcal:GregorianCalendar, now:Date);

employee(id:Long [PK], name:String, salary:Double);

tuplenativequerytest();

contractor(company:String);

incidentstatus(id:String [PK], GeneratedName:Incident #FK to(incident));

oven(id:Long [PK], GeneratedName:Kitchen #FK to(kitchen));

incident(id:String [PK], GeneratedName:IncidentStatus #FK to(Status));

kitchen(id:Long [PK], GeneratedName:Oven #FK to(oven));

person(id:Long [PK], name:String, age:int);

schemacreatedroputf8withouthbm2ddlcharsetnametest(createschema:File, dropschema:File, GeneratedName:EntityManagerFactoryBuilder);

schemascriptfilegenerationfailuretest(GeneratedName:Writer, GeneratedName:EntityManagerFactoryBuilder);

document(id:Long [PK], name:String);

schemadatabasefilegenerationfailuretest(GeneratedName:Connection, GeneratedName:EntityManagerFactoryBuilder);

schemascriptfilegenerationtest(createschema:File, dropschema:File, GeneratedName:EntityManagerFactoryBuilder);

item(name:String [PK], descr:String);

defaultinitialvaluetablegeneratorconfiguredtest();

assignedinitialvaluetablegeneratorconfiguredtest();

singletablenullnonoptionalsecondarytabletest();

joinedtablenullnonoptionalsecondarytabletest();

wallet(serial:String [PK], model:String, marketentrance:Date, brand:String);

abstractsubqueryinselectclausetest();

criteriamultiselectaliastest();

limitexpressiontest();

treatlistjointest();

entitysuperclasscollectiontest();

user(id:Long [PK], roles:Set<Role>);

superclasscollectiontest();

store(id:Integer [PK], name:String, address:String);

animal(id:Long [PK], mother:Animal #FK to(animal), father:Animal #FK to(animal), name:String, born:Date);

lineitem(id:String [PK], quantity:int, GeneratedName:Order);

order(id:String [PK], totalprice:double, sample:LineItem);

criterialiteralinselectexpressiontest();

subject(id:long [PK], name:String);

person(id:long [PK], GeneratedName:Subject #FK to(subject));

criterialiteralstest(GeneratedName:SQLStatementInterceptor);

mapjointestwithembeddable();

customerorder(id:long [PK], item:String, qty:int);

customer(id:int [PK], name:String);

treatkeywordtest();

basicsimplecasetest();

elephant();

human();

criteriaquerytypequeryadaptertest();

criteriaselectsizecollectiontest();

abstractcriterialiteralhandlingmodetest(GeneratedName:SQLStatementInterceptor);

criterialiteralwithsinglequotetest();

tool(cost:Double);

widget(code:String [PK], division:String [PK], cost:Double);

item(id:Integer [PK], name:String, roles:List<Attribute>);

manytoonetype(id:Long [PK], value:String);

mappedsuperclasscomponentwithcollectiontest(GeneratedName:Projects);

client(id:int [PK], GeneratedName:Name);

entitysuperclasscomponentwithcollectiontest(GeneratedName:Projects);

alias(id:Long [PK], GeneratedName:Name, source:String);

componentinwhereclausetest(GeneratedName:Projects);

wall(id:Long [PK], width:long, height:long, color:String, left:Wall #FK to(wall), right:Wall #FK to(wall));

concattest();

payment(id:Long [PK], amount:BigDecimal, GeneratedName:Date);

inwithheterogeneouscollectiontest();

book(id:Integer [PK]);

multitypedbasicattributesentity(id:Long [PK], somes:int, somewrappeds:Integer);

orderline(id:OrderLineId, GeneratedName:Product, purchase_org_id:Order #FK to(order));

product(id:ProductId [PK], number:String, GeneratedName:Facility);

order(id:OrderId, GeneratedName:PurchaseOrg);

purchaseorg(serialversionuid:long, id:Long [PK], name:String, GeneratedName:Customer);

purchase_facility(purchase_org_id:PurchaseOrg [PK] #FK to PurchaseOrg,facility_id:list<facility> [PK] #FK to list<facility>);

site(serialversionuid:long, id:Long [PK], name:String, GeneratedName:Customer);

facility(serialversionuid:long, id:Long [PK], name:String, GeneratedName:Site, GeneratedName:Customer);

customer(id:Long [PK], name:String);

treatjointest();

groupbyselectcasetest();

selectcaseliteralhandlingbindtest();

entitywithcompositeid(id:CompositeId, description:String);

pasta(id:Integer [PK], type:String);

child(id:Integer [PK], daddy:Parent #FK to(parent));

parent(id:Integer [PK]);

unidirectionalonetomanyuniqueconstraintordercolumntest();

nestedembeddabletest();

phone(id:Integer [PK], brandname:String, price:float);

bidirectionalonetomanynotnullablecolumntest();

columnwithexplicitreferencetoprimarytabletest();

defaultcascadetest();

unidirectionalonetomanyordercolumntest();

unidirectionalonetomanyindexcolumntest();

imagereader(id:long [PK], image:Blob, text:Clob);

bell(id:Integer [PK]);

cable(id:Integer [PK], name:String);

thing(id:String [PK], name:String);

lineitem(id:String [PK], quantity:int, GeneratedName:Order, GeneratedName:Product);

entity3(id:long [PK], value:String);

mixedidandidclasshandling();

article(id:Integer [PK]);

person(firstname:String, lastname:String);

somemappedsuperclasssubclass(thedata:String);

address(id:String [PK], street:String, city:String, state:String, zip:String);

product(id:String [PK], name:String, price:double, rating:float, quantity:int, partnumber:long, some:BigInteger, some:BigDecimal, warehouse:String, GeneratedName:ShelfLife);

entity2(id:long [PK], GeneratedName:Entity3 #FK to(entity3), value:String);

phone(id:String [PK], area:String, number:String, GeneratedName:Address, types:Set<Type>);

order(id:String [PK], totalprice:double, GeneratedName:Customer, GeneratedName:CreditCard, sample:LineItem, domen:char, number:byte);

creditcard(id:String [PK], number:String, type:String, expires:String, approved:boolean, balance:double, GeneratedName:Order, GeneratedName:Customer);

thingwithquantity(quantity:int);

mapentity(key:String [PK], localized:Map<String,MapEntityLocal>);

translation(id:Integer [PK], title:String, text:String);

customer(id:String [PK], name:String, age:Integer, home:Address #FK to(address), work:Address #FK to(address), GeneratedName:Country, GeneratedName:Spouse);

versionedentity(id:String [PK], name:String, version:int);

entity1(id:long [PK], GeneratedName:Entity2 #FK to(entity2), value:String);

abstractjpametamodelpopulationtest();

info(id:String [PK], street:String, city:String, state:String, zip:String, GeneratedName:Spouse);

alias(id:String [PK], alias:String, noop:Customer);

fks_anoop_cnoop(fk2_for_alias_table:Alias [PK] #FK to Alias,fk8_for_customer_table:collection<customer> [PK] #FK to collection<customer>);fks_alias_customer(fk_for_alias_table:Alias [PK] #FK to Alias,fk_for_customer_table:collection<customer> [PK] #FK to collection<customer>);

spouse(id:String [PK], first:String, maiden:String, last:String, snumber:String, GeneratedName:Info, GeneratedName:Customer);

kitten(id:Integer [PK], name:String);

cat(log:Logger, //usedforassertionsids:List, //usedforassertionspostversion:int, id:Integer [PK], name:String, ofbirth:Date, length:long, lastup:Date, manualversion:int);

entitymanagerdeserializationtest();

testconnectionpool(connection_pool_size:int);

fetchwithrootgraphtest();

company(id:long [PK], GeneratedName:Location #FK to(location), markets:Set<Market>, phonenumbers:Set<String>);

entitygraphnativequerytest();

course(id:int [PK], name:String);

loadandfetchgraphtest();



student(id:int [PK], name:String);

student_courses(id:Student [PK] #FK to Student,id:set<course> [PK] #FK to set<course>);

basicentitygraphtests();

person(id:Long [PK]);

employee(id:Long [PK], name:String, salary:double);

person(id:Long [PK]);

entitygraphusingfetchgraphforlazytest();

entitygraphloadplanbuildertest();

employee(id:long [PK]);

employee_set<manager>(employeeID:employee [PK] #FK to employee,set<manager>ID:set<manager> [PK] #FK to set<manager>);employee_set<employee>(employeeID:employee [PK] #FK to employee,set<employee>ID:set<employee> [PK] #FK to set<employee>);

manager();

entitygraphwithfetchannotationtest(GeneratedName:SQLStatementInterceptor);

entitygraphusingfetchgraphtest();

loadgraphfindbyidtest();

foo2(id:long [PK], GeneratedName:Foo #FK to(foo));

bar(id:long [PK]);

foo();

fetchgraphtest();

location(id:long [PK], address:String, zip:int);

entitygraphtest();

distributor(id:Integer [PK], name:String);

item(name:String [PK], descr:String, intval:Integer);

person(id:long [PK], name:String, address:String, zip:String, country:String, sex:char);

preupdatebytecodeenhancementtest();

preupdatenewbidirectionalbagtest();

preupdatedirtycheckinginterceptortest();

protectedconstructortest();

rythm(id:Integer [PK]);

remotecontrol(id:Integer [PK], creation:Date);

plant(id:String [PK], name:String);

preupdatenewunidirectionalidbagtest();

translation(id:Integer [PK], into:String);

preupdatecustomentitydirtinessstrategytest();

television(id:Integer [PK], control:RemoteControl #FK to(remotecontrol), name:String);

employee(title:String, salary:BigDecimal, manager:Employee #FK to(employee));

preupdatenewunidirectionalbagtest();

privateconstructorenhancertest(GeneratedName:Country, GeneratedName:Person);

videosystem(transientcounter:int);

privateconstructortest(loginspection:LoggerInspectionRule);

communicationsystem(communication:int, isfirst:boolean, islast:boolean);

customer(salesperson:Employee #FK to(employee), comments:String);

countrychecker();

jpaproxycompliancewithdebug();

accountgroup(id:Long [PK]);

account(id:Long [PK], name:String, regioncode:String);

temporaltypetest();

customer(id:Long [PK], version:long);

order(id:Long [PK], GeneratedName:Customer #FK to(customer), version:long);

drivermanagerconnectionprovidervalidationconfigtest();

entityproxyserializationtest();

graphparsingtestentity(id:String [PK], name:String, description:String, linktoone:GraphParsingTestEntity #FK to(graphparsingtestentity), linktoonelazy:GraphParsingTestEntity #FK to(graphparsingtestentity));

entitygraphfunctionaltests();

entitygraphpaddedbatchstyletest(batch_size:int, num_of_locations:int);

graphparsingtestsubentity(sub:String);

entitygraphdynamicbatchstyletest(batch_size:int, num_of_locations:int);

abstractsqlfunctionmetadatabuildercontributortest(GeneratedName:Employee);

sqlfunctionmissingtest(GeneratedName:Employee);

attributeconvertermetadatabuildercontributortest(GeneratedName:Employee);

annotationentity(_id:Long [PK]);

db2390dialecttestcase();

scrollableresultsobjectarraycastingtest();

hhh14219(sf:SessionFactory);

quotedidentifiertest();

idclassmanytoonecascadetest();

sequencemismatchstrategywithoutsequencegeneratortest(loginspection:LoggerInspectionRule, GeneratedName:Triggerable, GeneratedName:ServiceRegistry, metadata:MetadataImplementor);

sequencemismatchstrategydefaultexceptiontest(GeneratedName:ServiceRegistry, metadata:MetadataImplementor);

postgresqlsequencegeneratorwithserialtest(loginspection:LoggerInspectionRule, GeneratedName:Triggerable, drop_sequence:String, drop_table:String, create_table:String);

sequencemismatchstrategylogtest(loginspection:LoggerInspectionRule, GeneratedName:Triggerable, GeneratedName:ServiceRegistry, metadata:MetadataImplementor);

sequencemismatchstrategyfixwithsequencegeneratortest(loginspection:LoggerInspectionRule, GeneratedName:Triggerable, GeneratedName:ServiceRegistry, metadata:MetadataImplementor);

generatedvaluetest();

queryplancachestatisticstest(GeneratedName:Statistics);

hhh14230(table_name:String, join_column_name:String);

manytomanytarget(id:Integer [PK], name:String);

manytomanyowner(id:Integer [PK], name:String);

none(none:ManyToManyOwner [PK] #FK to ManyToManyOwner,none:Target [PK] #FK to Target);

inheritancemanytomanyforeignkeytest();

jdbctimestampcustomtimezonetest(connectionprovider:PreparedStatementSpyConnectionProvider, time_zone:TimeZone);

jdbctimestampdefaulttimezonetest(connectionprovider:PreparedStatementSpyConnectionProvider);

jdbctimestampwithoututctimezonetest(connectionprovider:TimeZoneConnectionProvider);

jdbctimecustomtimezonetest(connectionprovider:PreparedStatementSpyConnectionProvider, time_zone:TimeZone);

jdbctimedefaulttimezonetest(connectionprovider:PreparedStatementSpyConnectionProvider);

jdbctimestampdstwithutctest(log:Logger);

jdbctimestampcustomsessionleveltimezonetest(connectionprovider:PreparedStatementSpyConnectionProvider, time_zone:TimeZone);

localdatecustomsessionleveltimezonetest(time_zone:TimeZone, connectionprovider:ConnectionProviderDelegate);

joinfetchwithenhancementtest();

table2(id:long [PK]);

confentity(serialversionuid:long, confkey:String [PK], confvalue:String [PK]);

userconfentity(serialversionuid:long, user:UserEntity [PK] #FK to(userentity), confkey:ConfEntity [PK] #FK to(confentity));

persistonlazycollectiontest(receipt_a:String, invoice_a:String, invoiceline_a:String, invoiceline_b:String);

userentity(serialversionuid:long, id:Long [PK], name:String);

table1(id:long [PK]);

nestedplayerstat(serialversionuid:long, playerid:Integer [PK], jerseynbr:Integer, game_id:NestedScore [PK] #FK to(nestedscore));

nestedscore(serialversionuid:long, gameid:Integer [PK], home:Boolean [PK], rosterid:Integer, score:Integer);

nestedstat(serialversionuid:long, period:Integer [PK], game_id:NestedPlayerStat [PK] #FK to(nestedplayerstat));

playerstat(playerid:Integer [PK], jerseynbr:Integer, game_id:Score [PK] #FK to(score));

score(gameid:Integer [PK], home:Boolean [PK], rosterid:Integer, score:Integer);

childentity(id:Long [PK], parentid:Long, name:String);



idpropertyintableperclasssubclasstest();

propertynamedidinidclasstest();

idpropertyinsingletablesubclasstest();

propertynamedidoutofnonjpacompositeidtest();

propertynamedidoutofidclasstest();

propertynamedidoutofembeddedidtest();

idpropertyinsubclassidinmappedsuperclasstest();

propertynamedidinembeddedidtest();

idpropertyinjoinedsubclasstest();

propertynamedidinnonjpacompositeidtest();

person(id:int [PK], clientid:int [PK], name:String, title:String);

adult();

emptycompositemanytoonekeycachedtest();

emptycompositecollectionkeyeagertest();

emptycompositecollectionkeylazytest();

emptycompositeequivalenttonulltest();

emptycompositemanytoonekeytest();

componentemptyembeddedowner(id:Integer [PK], embedded:ComponentEmptyEmbedded);

selectbeforeupdateembeddedtest(i:OnFlushDirtyInterceptor);

person(id:int [PK], GeneratedName:Name);

component(id:Long [PK], emb:Component.Emb);

selectdistincthqltest(distinct_passes_through_true_named_query:String, distinct_passes_through_false_named_query:String, distinct_passes_through_not_specified_named_query:String, GeneratedName:SQLStatementInterceptor);

schemaupdatetest(skiptest:boolean, jdbcmetadataextractorstrategy:String, output:File, ssr:StandardServiceRegistry, metadata:MetadataImplementor);

schemamigrationtargetscriptcreationtest(output:File);

quotedtablenameschemaupdatetest(output:File, ssr:StandardServiceRegistry);

sequencegenerationtest(ssr:StandardServiceRegistry, output:File, metadata:MetadataImplementor);

tablegeneratorstest(ssr:StandardServiceRegistry, output:File, metadata:MetadataImplementor, initial_value:int, expected_db_inserted_value:int);

sequencegeneratorstest(ssr:StandardServiceRegistry, output:File, metadata:MetadataImplementor);

tablegeneratortest(ssr:StandardServiceRegistry, output:File, metadata:MetadataImplementor, initial_value:int, expected_db_inserted_value:int);

group(id:Long [PK]);

project(id:Long [PK]);

schemaupdatewithkeywordautoquotingenabledtest(ssr:StandardServiceRegistry, metadata:MetadataImplementor);

joinedinheritanceforeignkeytest(output:File, ssr:StandardServiceRegistry, metadata:MetadataImplementor);

foreignkeydefinitiononetomanyjointabletest();

foreignkeydefinitiononetoonetest();

foreignkeydefinitionmanytoonetest();

foreignkeydefinitionsecondarytabletest();

usersetting(id:long [PK], GeneratedName:User #FK to(user));

person(id:Long [PK]);

employee(id:Long [PK]);

employee_project(employee_id:Employee [PK] #FK to Employee,project_id:set<project> [PK] #FK to set<project>);

foreignkeydroptest(output:File, metadata:MetadataImplementor, ssr:StandardServiceRegistry, GeneratedName:SchemaExport);

phone(id:Long [PK], number:String);

schematwoentity(id:String [PK]);

schemaoneentity(id:String [PK]);

foreignkeymigrationtest();

user(id:long [PK], GeneratedName:UserSetting #FK to(usersetting));

altertablequotedefaultschematest();

schemaupdatejoincolumnnoconstraintsecondarytablestest(expected_script:String, delimiter:String);

schemaupdateproceedonerrortest();

testfkupdating(GeneratedName:ServiceRegistry, metadata:MetadataImplementor);

schemaupdategeneratingonlyscriptfiletest();

schemaupdatedelimitertest(expected_delimiter:String);

schemaexportwithindexanddefaultschema(GeneratedName:ServiceRegistry, metadata:MetadataImplementor);

implicitcompositekeyjointest(GeneratedName:Logger);

migrationtest(GeneratedName:ServiceRegistry);

columnlengthtest(ssr:StandardServiceRegistry, output:File, metadata:MetadataImplementor);

schemaupdatesqlservertest(jdbcmetadataextractorstrategy:String, output:File, ssr:StandardServiceRegistry, metadata:MetadataImplementor);

sequencereadingtest();

schemaupdatewithfunctionindextest(GeneratedName:ServiceRegistry, metadata:MetadataImplementor);

postgresqlmultipleschemasequencetest(output:File);

schemaupdateformattertest(after_format:String, delimiter:String);

category();

element(id:Long [PK], code:String);



groupstep();

tablecommenttest(output:File);

schemaupdatehaltonerrortest(output:File, ssr:StandardServiceRegistry, metadata:MetadataImplementor);

altertablequotespecifiedschematest();

connectionsreleasetest(ssr:StandardServiceRegistry, metadata:MetadataImplementor, connectionprovider:ConnectionProviderDecorator);

schemamigratorhaltonerrortest();

schemaupdatewithviewstest(GeneratedName:ServiceRegistry, metadata:MetadataImplementor);

hanaschemamigrationtargetscriptcreationtest(output:File, varchartype:String, clobtype:String);

columnnamestest(jdbcmetadataextractorstrategy:String, ssr:StandardServiceRegistry, GeneratedName:Metadata, output:File);

schemaupdateschemanametest();

schemadroptest(GeneratedName:ServiceRegistry, metadata:MetadataImplementor);

schemaexportwithglobalquotingenabledtest(GeneratedName:ServiceRegistry, metadata:MetadataImplementor);

schemaupdatejoincolumnnoconstraintsecondarytabletest(expected_script:String, delimiter:String);

sqlserverquoteschematest(output:File);

indexescreationtest(ssr:StandardServiceRegistry, GeneratedName:Metadata);

componentindextest(ssr:StandardServiceRegistry, GeneratedName:Metadata);

schemaupdatejoincolumnnoconstrainttest(delimiter:String);

mixedfieldpropertyannotationtest(GeneratedName:ServiceRegistry, metadata:MetadataImplementor);

explicitenumconverterstest(converttodatabasecolumncalled:boolean, converttoentityattributecalled:boolean);

simplexmloverriddentest(ssr:StandardServiceRegistry);

collectionelementexplicitconversiontest();

collectioncompositeelementconversiontest();

elementcollectiontests();

collectionelementconversiontest();

collectioncompositeelementexplicitconversiontest(ssr:StandardServiceRegistry, simplevalueattributeconverterdescriptor:Field);

simpleembeddableoverriddenconvertertest();

queryliteraltest();

address(id:Integer [PK], streetline1:String, streetline2:String, GeneratedName:PostalArea);

xmlwithexplicitconvertannotationstest(//note:essentiallythesameexacttestasexplicitdateconverterstest,butherewewillmixannotationsandxmlconverttodatabasecolumncalled:boolean, converttoentityattributecalled:boolean);

simpleoverriddenconvertertest();

address(id:Integer [PK], streetline1:String, streetline2:String, GeneratedName:PostalArea);

myentity(id:Integer [PK], customtype:MyCustomJavaType);

andlobtest(ssr:StandardServiceRegistry);

dirtycheckingtest();

packageprivateattributeconverterentitymanagerfactorytest();

explicitjavatypedescriptortest(mutabletodatabasecallcount:int, mutabletodomaincallcount:int, immutabletodatabasecallcount:int, immutabletodomaincallcount:int, immutablemutabletodatabasecallcount:int, immutablemutabletodomaincallcount:int);

explicitlynamedconverterclassestest();

mapkeyconversiontest();

mapelementconversiontest();

mapkeyattributeconvertertest();

convertertest();

longtodateconversiontest();

nullhandlingtests();

simpleconvertsannotationtest(converttodatabasecolumncalled:boolean, converttoentityattributecalled:boolean);

parameterizedattributeconverterparametertypetest(ssr:StandardServiceRegistry);

packageprivateattributeconvertersessionfactorytest();

attributeconvertertest();

simpleconvertannotationtest(converttodatabasecolumncalled:boolean, converttoentityattributecalled:boolean);

explicitdateconverterstest(//note:initiallyunabletoreproducethereportedproblemconverttodatabasecolumncalled:boolean, converttoentityattributecalled:boolean);

basicjodatimeconversiontest(converttodatabasecolumncalled:boolean, converttoentityattributecalled:boolean);

querytest(salary:float);

andnationalizedtests();

batchfetchnotfoundignoredefaultstyletest(statementinspector:AStatementInspector, number_of_employees:int, tasks:List<Task>);

batchfetchbootstraptest();

batchfetchrefreshtest();

city(id:Integer [PK], name:String, GeneratedName:Country #FK to(country));

batchloadableentity(id:Integer [PK], name:String);

a(id:Integer [PK], otherproperty:String, GeneratedName:B #FK to(b));

batchfetchreferencedcolumnnametest();

country(id:Integer [PK], name:String);

b(idpart1:Integer [PK], idpart2:Integer [PK], otherproperty:String);

batchingentityloaderinitializationwithnolockmodetest(mainid:Long);

a(id:Long [PK], value:String);

locknonewarmingtest(GeneratedName:Triggerable, loginspection:LoggerInspectionRule);

lockrefreshtest(GeneratedName:LockModeType);

hanaoptimisticlockingtest();

abstractskiplockedtest();

door(id:Integer [PK], name:String);

joinedinheritanceoptimisticforceincrementtest();

qualifiedtablenamingtest();

house(id:Long [PK], streetaddress:String);

columndefinitionquotingtest();

role(id:long [PK]);

phone(id:Integer [PK], brandname:String, price:float);

quotetest();

tablegeneratorquotingtest(serviceregistry:StandardServiceRegistry);

person(id:long [PK], name:String);

user(id:long [PK], //theseexistsolelyforhhh-8464toensurethatthevariousformsofquotingarenormalizedinternally//(usingbackticks),includingthejoincolumn.withoutnormalization,themappingwillthrowa//duplicatemappingexception.:House #FK to(house), house1:Long, house2:Long, //testukonfkw/globalquoting--seehhh-8638//thismustbeinitialized.severaldbsdonotallowmultiplenullvaluesinauniquecolumn.3:House #FK to(house));

user_set<role>(userID:user [PK] #FK to user,set<role>ID:set<role> [PK] #FK to set<role>);

sessionjdbcbatchtest(connectionprovider:PreparedStatementSpyConnectionProvider, id:long);

tooneondeletetest();

foreigngeneratorresourcelocaltest();

saveentitytest();

identitygeneratorextendstest();

super(id:Long [PK], value:Long);

sub();

identityinsertsolecolumntest();

idgeneratornameslocalscopetest();

idgeneratornamesglobalscopetest();

hilooptimizerconcurrencytest(createschema:boolean, executor:ExecutorService);

hilosequencemismatchstrategytest(sequencename:String);

child(GeneratedName:Parent [PK] #FK to(parent));

parent(id:Long [PK], GeneratedName:Child #FK to(child));

ablockableentity(id:Long [PK], //wehavetwoone-to-oneassociationstomakesureparent_idisn'tconsideredaspartofthistableregardingduplicatemappingsother:OtherEntity #FK to(otherentity), other2:ABlockableEntity #FK to(Lockable), //twomany-to-onestomakesurethatstillworksinthisscenariomanytoone1:OtherEntity #FK to(otherentity), manytoone2:ABlockableEntity #FK to(Lockable));

message(description:String);

event(description:String);

otherentity(id:String [PK]);

bidirectionalonetoonefetchtest();

lazytoonetest();

product(id:Long [PK], name:String);

feature(id:Long [PK], GeneratedName:Product #FK to(product), name:String);

preisregelung(id:Long [PK], GeneratedName:Tranchenmodell #FK to(tranchenmodell));

x(id:Long [PK], GeneratedName:Tranchenmodell #FK to(tranchenmodell));

y(id:Long [PK], GeneratedName:Tranche #FK to(tranche));

tranchenmodell(id:Long [PK], GeneratedName:Preisregelung #FK to(preisregelung), GeneratedName:X #FK to(x));

tranche(id:Long [PK], GeneratedName:Tranchenmodell #FK to(tranchenmodell), GeneratedName:Y #FK to(y));

preisregelung(id:Long [PK], GeneratedName:Tranchenmodell #FK to(tranchenmodell));

tranchenmodell(id:Long [PK], GeneratedName:Preisregelung #FK to(preisregelung));

tranche(id:Long [PK], GeneratedName:Tranchenmodell #FK to(tranchenmodell));

onetooneeagerorphanremovaltest();

onetoonelazynonoptionalorphanremovaltest();

onetoonelazyorphanremovaltest();

onetooneeagernonoptionalorphanremovaltest();

onetooneproxyorphanremovaltest();

runtimefetchfrommanagedtest();

principal(id:Long [PK], uid:String);

user();

user(username:String);

principal(id:Long [PK], uid:String);

myentity(id:Long [PK], uid:String);

extendedentity(extendedvalue:String);

mappedsuperclassoverridetest();

d(oid:long [PK], name:String, assoiated:C #FK to(c));

a(oid:long [PK], ass:C #FK to(c), myname:String);

c(oid:long [PK], name:String);

b(oid:long [PK], ss:A #FK to(a), naturalid:int);

naturalidinuninitializedproxytest();

naturalidinuninitializedassociationtest();

identifiergeneratorwithnaturalidcachetest();

allcached(id:Integer [PK], name:String);

b(oid:long [PK], ss:A #FK to(a), naturalid:int);

another(id:Integer [PK], name:String, surname:String);

a(oid:long [PK], myname:String);

subclass();

building(id:Integer [PK], name:String, address:String, city:String, state:String);

postalcarrier(id:Long [PK], GeneratedName:PostalCode);

destinationentity(id:Integer [PK], from:FromEntity #FK to(fromentity), fullnamefrom:String);

treatkeywordtest();

identificationvariablestest();

fromentity(id:Integer [PK], name:String, lastname:String);

mapcontent(id:Long [PK], GeneratedName:Relationship #FK to(relationship));

group(id:Integer [PK], name:String);

classwithidentitycolumn(id:long [PK], name:String);

mapowner(id:Long [PK]);

relationship(id:Long [PK], name:String);

jdbcsqltypedescriptorconvertertest();

onetooneeagernonoptionalorphanremovaltest();

onetooneeagerorphanremovaltest();

onetoonelazyorphanremovaltest();

onetoonelazynonoptionalorphanremovaltest();

generatedvaluetests();

getterandismethodchecks();

tablegeneratorvisibilitytest();

mapkeycolumnbidionetomanyfktest();

mapkeycolumnonetomanyjointabletest();

mapkeycolumnmanytomanytest();

mapkeycolumnonetomanyfktest();

mapkeycolumnelementcollectiontest();

orderbyannotationtests(element_token:String, table_alias:String, column_name:String);

subclassonlycachingtests();

inheritedcacheabletest();

cachingwithsecondarytablestests(sessionfactory:SessionFactoryImplementor);

tablegeneratormultipledefinitiontest();

location(id:Integer [PK], code:String, GeneratedName:Company);

company(id:Integer [PK], name:String, locations:Set<Location>);

queryapitest();

storedprocedureapitests();

queryexecutiontest();

parent(id:Long [PK]);

lazyloadingloggingtest();

manytoonelazyloadingbyidtest();

lazyloadingtest(children_size:int, parentid:Long, lastchildid:Long);

child(id:Long [PK], GeneratedName:Parent);

connectionsreleaseautocommittest(connectionprovider:ConnectionProviderDecorator, GeneratedName:Connection);

jdbcbatchingagressivereleasetest(loginspection:LoggerInspectionRule, GeneratedName:Triggerable);

beforecompletionreleasetest();

student(id:Long [PK], GeneratedName:School #FK to(school), firstname:String, gpa:int);

school(id:int [PK]);

championship(id:int [PK]);

usenationalizedchardatasettingtest();

simplenationalizedtest();

stringnationalizedtest();

nationalizedlobfieldtest();

order(id:Integer [PK], referencecode:String, placed:Date, fulfilled:Date, GeneratedName:Customer);

industry(id:Integer [PK], name:String);

zipcode(id:Integer [PK], code:String, city:String, GeneratedName:State);

customer(id:Integer [PK], version:Integer, name:String, registeredtrademarks:Set<String>, hq:Address, addresses:Set<Address>);

customer_set<industry>(customerID:customer [PK] #FK to customer,set<industry>ID:set<industry> [PK] #FK to set<industry>);

item(id:Long [PK], price:Double, specialprice:Double);

collectionjointablenamingtest();

container(id:Integer [PK], items:List<Item>);

componentnamingstrategyforjoincolumntest();

dynamicentity(id:Integer [PK]);

workflow(serialversionuid:long, id:Long [PK], defaultlanguage:Locale, supportedlocales:Set<Locale>, localized:Map<Locale,LocalizedEmbeddable>);

category(id:Long [PK]);

category_set<item>(categoryID:category [PK] #FK to category,set<item>ID:set<item> [PK] #FK to set<item>);

language(id:Long [PK], //@column(unique:String, fallback:Language #FK to(language));

trtpanel(id:Long [PK], GeneratedName:Panel #FK to(panel), clientid:Long, deltastamp:String);

updateentitywithembeddedtest();

querysplittertest();

entity1(id:long [PK], GeneratedName:Entity2 #FK to(entity2), value:String);

grandchild(id:long [PK], value:String);

entity2(id:long [PK], GeneratedName:Entity3 #FK to(entity3), value:String);

child(id:long [PK], value:String);

entity3(id:long [PK], value:String);

parent(id:long [PK], value:String);

deletequerysubqueryreferencingtargetpropertytest();

crop(id:long [PK], name:String);

queryparametersvalidationtest();

scrollabletest();

panel(id:Long [PK], clientid:Long, deltastamp:String);

department(deptno:Integer [PK], deptname:String);

parametercollectiontest();

joinonclausetest();

aggregatefunctionswithsubselecttest();

subquerytest();

title(id:Integer [PK], description:String);

updatejoinedsubclasscorrelationtest();

coalescetest(GeneratedName:Person);

selectnewembeddedidtest();

casestatementtest();

queryparametersvalidationarraytest();

manytomanysizetest();

onetomanysizetest();

naturaliddereferencetest();

withclausejoinrewritetest();

db297substringfunctionstest(GeneratedName:MostRecentStatementInspector);

castnullselectexpressiontest();

hibernatefirstresultmaxresultstest();

joinedsubclasssubquerytest();

person(id:Integer [PK], name:String);

employee(employeenumber:String);

tuplesupporttest(GeneratedName:SessionFactory);

farm(id:long [PK], name:String, accreditations:Set<Accreditation>);

farm_list<crop>(farmID:farm [PK] #FK to farm,list<crop>ID:list<crop> [PK] #FK to list<crop>);

fetchnonrootrelativeelementcollectionandassociationtest();

mapfunctionexpressionstest(querytranslatorfactory:ASTQueryTranslatorFactory);

employee(id:Integer [PK], firstname:String, lastname:String, GeneratedName:Title #FK to(title), GeneratedName:Department #FK to(department));

insertwithsubselecttest();

collectionmapwithcomponentvaluetest(GeneratedName:KeyValue, GeneratedName:EmbeddableValue);

castfunctiontest();

entityjointest();

entitywithunusualtablenamejointest();

sizeattributereferencetest();

querycachejoinfetchtest();

entitywithstringcompositekey(pk:StringCompositeKey);

entitywithcompositekey(pk:CompositeKey);

structuredquerycachetest();

alias(id:Integer [PK], alias:String);

character_alias(Alias_ID:Alias [PK] #FK to Alias,list<character>_ID:list<character> [PK] #FK to list<character>);

character(id:Integer [PK], name:String);

multiplecollectionrefentity1(id:Long [PK], text:String, GeneratedName:MultipleCollectionEntity #FK to(multiplecollectionentity), multiplecollectionentityid:Long);

multiplecollectionentity(id:Long [PK], text:String);

multiplecollectionrefentity2(id:Long [PK], text:String, GeneratedName:MultipleCollectionEntity #FK to(multiplecollectionentity), multiplecollectionentityid:Long);

mergelistpreandpostpersisttest();

mergelistpreandpostpersistwithidentitytest();

tablenameswithunderscoretest();

jointablewithdefaultschematest();

synonymvalidationtest(ssr:StandardServiceRegistry);

viewvalidationtest(ssr:StandardServiceRegistry);

numericvalidationtest(jdbcmetadataextractorstrategy:String, ssr:StandardServiceRegistry, metadata:MetadataImplementor);

longvarcharvalidationtest(jdbcmetadataextractorstrategy:String, ssr:StandardServiceRegistry);

lazyabstractentityreference(id:Integer [PK], entity:AbstractEntity #FK to(abstractentity));



concreteentity(content:String);

hibernateunproxytest();

proxyreferenceequalitytest();

finalgettersettertest();

unionsubclasstest();

doesnotwork(serialversionuid:long, GeneratedName:DoesNotWorkPk, globadditinfotid:Long, globalnotes:List<String>);

noninsertablecolumntest();

idbagelementnullbasictest();

email(id:Long [PK], address:String);

user(username:String [PK]);

usercollectiontypetest();

email(id:Long [PK], address:String);

usercollectiontypetest();

userwithunimplementedcollection(username:String [PK]);

zoo(id:Long [PK], name:String, city:String, animals:Set<Animal>);

tiger(numberofstripes:int);

lion();

animal(id:Long [PK], weight:long);

user(serialversionuid:long, id:Long [PK], name:String, GeneratedName:Contact);

contact(serialversionuid:long, id:Long [PK], name:String, emailaddresses:Set<EmailAddress>, emailaddresses2:Set<EmailAddress>);

detachedbagdelayedoperationtest(loginspectioncollectiontype:LoggerInspectionRule, loginspectionabstractpersistentcollection:LoggerInspectionRule, ignorequeuedoperationsonmerge:Triggerable, queuedoperationwhenattachtosession:Triggerable, queuedoperationwhendetachfromsession:Triggerable, queuedoperationonrollback:Triggerable);

listaddtest();

bagdelayedoperationtest(parentid:Long);

setdelayedoperationtest(parentid:Long, childid1:Long, childid2:Long);

bagdelayedoperationnocascadetest(parentid:Long);

listdelayedoperationtest(parentid:Long, childid1:Long, childid2:Long);

versionedcascadeone(id:long [PK], version:long);

versionednocascadeone(id:long [PK], version:long);

many(id:long [PK]);

unversionednocascadeone(id:long [PK]);

unversionedcascadeone(id:long [PK]);

setelementnullbasictest();

bagelementnullbasictest();

multiplebagfetchhqltest();

persistentbagcontainstest();

multiplebagfetchtest();

bagduplicatestest();

listindexreferencefromlistelementtest();

listelementnullbasictest();

multiplesessioncollectiontest();

multiplesessioncollectionwarningtest(log:CoreMessageLogger, loginspection:LoggerInspectionRule);

persistentmaptest();

mapvalue(log:Logger, id:Long [PK], name:String, previoushashcode:int);

mapkey(log:Logger, id:Long [PK], name:String, defaultvalue:MapValue #FK to(mapvalue), previoushashcode:int);

mapholder(id:Long [PK]);

map_key_map_value(map_holder_id:MapHolder [PK] #FK to MapHolder,map_value_id:map<mapkey,mapvalue> [PK] #FK to map<mapkey,mapvalue>);

embeddableindextest();

mapelementnullbasictest();

multilingualstringparent(id:long [PK], parent:MultilingualStringParent #FK to(multilingualstringparent), string:MultilingualString #FK to(multilingualstring));

multilingualstring(id:long [PK], map:Map<String,LocalizedString>);

nonuniqueidtest();

postgresqlidentitysequencetest(connectionprovider:DriverManagerConnectionProviderImpl);

negativevaluesequencetest(loginspection:LoggerInspectionRule);

optimizertest();

postgresqlidentitysupporttest();

legacysequenceexporttest(ssr:StandardServiceRegistry);

sequenceexporttest(ssr:StandardServiceRegistry);

pooledhilosequenceidentifiertest();

sqlserver2012sequencegeneratorannotationtest();

postgresqlmultipletypesothercontributortest();

usertypecomparableidtest();

event(id:Long [PK], ip:Inet);

usertypenoncomparableidtest();

foreigngeneratortest();

uuid2generatorbinaryuniqueidentifieridtest();

postgresqluuidgeneratedvaluetest(GeneratedName:Book);

uuid2generatoruniqueidentifieridtest();

uuid2generatorstringuniqueidentifieridtest();

uuidbasedidinterpretationtest();

bytearrayidtest();

primitivecharacterarrayidtest();

primitivebytearrayidtest();

characterarrayidtest();

child1(id:Long [PK]);

unidirectionalonetomanynonpkjoincolumntest();

parent1(id:Long [PK]);

child2(id:Long [PK]);

lineentity(id:long [PK], GeneratedName:Line);

customer(id:Long [PK], name:String);

invoice(id:Long [PK]);

referencecachetest();

cacheannotationtests(entityid:Integer);

company(id:int [PK], name:String);

nonrootentitywithcacheableannotationtest(loginspection:LoggerInspectionRule);

country(id:Long [PK], code:String, name:String, GeneratedName:Continent);

entityupdatecachemodeignoretest();

cacheableitem(id:Long [PK], name:String);

bytecodeenhancedimmutablereferencecachetest();

collectioncacheevictionwithoutmappedbytest();

user(id:int [PK], version:int, name:String, GeneratedName:Company #FK to(company));

regionnametest(cacheprefix:String, localname:String, prefixedname:String, personrole:NavigableRole, personnamerole:NavigableRole, personnicknamesrole:NavigableRole);

manytomanycollectioncacheevictiontest();

itwithpkclass(key1:Integer [PK], key2:Integer [PK], name:String);

it(key1:Integer [PK], key2:Integer [PK], name:String);

cacheditem2();

abstractcacheditem(id:Long [PK], name:String);

cacheditem1();

sharedregiontest();

nonrootentitywithcacheannotationtest(loginspection:LoggerInspectionRule);

shareddomaindataandqueryresultstest(query:String, region:String, prefix:String);

refreshupdateddatatest();

continent(id:Long [PK], code:String, name:String);

naturalidcachingtest();

constrainttest(max_name_length:int, explicit_fk_name_native:String, explicit_fk_name_jpa:String, explicit_uk_name:String);

foreignkeyconstrainttest();

foreignkeynoconstrainttest();

foreignkeyconstraintmapsidtest();

duplicateentitynametest();

querytimeouttest(connection_provider:PreparedStatementSpyConnectionProvider, query:String);

custombeforecompletiontest();

customaftercompletiontest();

conversionautoapplytest();

querytest(salary:float);

item(id:Long [PK], price:BigDecimal, description:String, quantity:Integer);

theentity(id:Integer [PK], name:String, stock:Integer);

theentity(id:Integer [PK], name:String);

validnocdisupporttest();

theentity(id:Integer [PK], name:String);

joinedsubclasswithignoredexplicitdiscriminatortest();

joinedsubclasswithimplicitdiscriminatortest();

joinedsubclasswithembeddabletest();

joinedsubclasswithexplicitdiscriminatortest();

defaultgeneratedvaluetest();

defaultgeneratedvalueidentitytest();

replicatetest();

mergemanagedandcopiesallowedtest();

basicgetloadaccesstest();

proxiedgetloadaccesstest();

onetoonemergetest();

removeorderingtest();

multiloadsubselectcollectiontest();

multiloadtest(GeneratedName:SQLStatementInterceptor);

hanastoredproceduretest();

oraclestoredproceduretest();

vote(id:Long [PK], votechoice:boolean);

person(id:Long [PK], name:String, nickname:String, address:String, createdon:Date, version:int);

phone(id:Long [PK], GeneratedName:Person #FK to(person), number:String, valid:boolean, repairtimestamps:List<Date>);

collectionloadedintwophaseloadtest(//note//therearetwofetchprofilesbecausewheniuseonlyonetherelationorgunit.people//ismissinginthefetchprofile.//itismissingbecauseoflogicinfetchprofile.addfetch().donotunderstandtheimplementation//ofthemethodnow,sotheworkaroundistousetwofetchprofiles.fetch_profile_name:String, fetch_profile_name_2:String, ou_1:String, ou_2:String, p_1:String, p_2:String);

employee(fetch_profile_tree:String, id:Long [PK], manager:Employee #FK to(employee));

entityloadedintwophaseloadtest(fetch_profile_name:String);

tablea(id:int [PK], test:String, test2:String);

tableb(id:TableBId, idcolumn:ATable #FK to(atable));

atable(firstid:Integer [PK]);

autoflusheventlistenertest(listener:TheListener);

hqlorderbyidstest();

usereservedkeywordinorderbytest();

invalidenumeratedjavatypetest();

ordinalenumtypetest(binderloginspection:LoggerInspectionRule, extractorloginspection:LoggerInspectionRule, GeneratedName:Person, binder:Triggerable, extractor:Triggerable);

producer(id:Integer [PK], name:String);

product(id:Integer [PK], sku:String, GeneratedName:Vendor #FK to(vendor), GeneratedName:Producer #FK to(producer));

vendor(id:Integer [PK], name:String);

statelesssessionpersistentcontexttest();

statelesssessionnativequeryinserttest();

statelesssessionconnectiontest(loginspection:LoggerInspectionRule);

statelessdoworktest(expected_entity_name:String, persisted_test_entity_id:Integer);

limitexpressiontest();

sequencefiltertest(serviceregistry:StandardServiceRegistryImpl, GeneratedName:Metadata);

catalogfiltertest(GeneratedName:ServiceRegistry, GeneratedName:Metadata);

schemafiltertest(serviceregistry:StandardServiceRegistryImpl, GeneratedName:Metadata);

hsqltruncfunctiontest();

sqlserverdialecttest();

category(id:Integer [PK], name:String);

sqlserverdialectcollationtest();

sequenceinformationmariadbtest(connectionprovider:DriverManagerConnectionProviderImpl);

product2(id:Integer [PK], description:String, GeneratedName:Category #FK to(category));

sequenceinformationtest(GeneratedName:ServiceRegistry, metadata:MetadataImplementor);

sqlserverdialecttemptablecollationtest(originaldbcollation:String, changeddbcollation:String, collationchanged:boolean);

hanasearchtest(entity_name:String);

contact(id:Long [PK], type:String, firstname:String, lastname:String, GeneratedName:Folder #FK to(folder));

folder(id:Long [PK], name:String, owner:String);

hanabooleantest(entity_name:String, legacy_entity_name:String);

hanacalcviewtest(calc_view_name:String, calc_scenario_name:String, projection_node_name:String);

oraclefollowonlockingtest(GeneratedName:SQLStatementInterceptor);

sqlserverdialectpaginationtest();

hanadecimaltest(entity_name:String);

abstractsequenceinformationextractortest();

manytomanywithmaykeyandschemadefinitiontest();

pageadvertisement(id:Integer [PK]);

manytomanybidirectionaltest();

advertisement(id:Integer [PK]);

attachment(id:Integer [PK], filename:String, deleted:String);

attachment_set<advertisement>(attachmentID:attachment [PK] #FK to attachment,set<advertisement>ID:set<advertisement> [PK] #FK to set<advertisement>);

instanttest(year:int, month:int, day:int, hour:int, minute:int, second:int, nanosecond:int);

binarytypetest();

zoneddatetimetest(year:int, month:int, day:int, hour:int, minute:int, second:int, nanosecond:int, zone:String);

localdatetest(year:int, month:int, day:int);

timeandtimestamptest();

bigdecimaltypetest();

arraytypepropertiestest();

arraytypecontributortest();

longlisttypecontributortest();

smallinttoshortclassmappingtest();

oraclelonglobtypetest();

offsettimetest(hour:int, minute:int, second:int, nanosecond:int, offset:String, yearwhenpersistedwithouthibernate:int, monthwhenpersistedwithouthibernate:int, daywhenpersistedwithouthibernate:int);

localdatetimetest(year:int, month:int, day:int, hour:int, minute:int, second:int, nanosecond:int);

offsetdatetimetest(year:int, month:int, day:int, hour:int, minute:int, second:int, nanosecond:int, offset:String);

lobunfetchedpropertytest();

localtimetest(hour:int, minute:int, second:int, nanosecond:int, yearwhenpersistedwithouthibernate:int, monthwhenpersistedwithouthibernate:int, daywhenpersistedwithouthibernate:int);

sqlserver2008nvarchartypetest(ssr:StandardServiceRegistry, metadata:MetadataImplementor, GeneratedName:SchemaExport);

java8datetimetests();

optionaleagermappedbynotfoundtest();

optionaleagernotfoundtest();

optionaleagerrefnonpknotfoundtest();

optionallazynotfoundtest();

requiredlazynotfoundtest();

optionaleagerinembeddablenotfoundtest();

employee(id:Long [PK], name:String);

employeegroup(id:EmployeeGroupId [PK]);

jtaplatformloggingtest(loginspection:LoggerInspectionRule, GeneratedName:Triggerable);

individuallyschemavalidatorimpltest(loginspection:LoggerInspectionRule, ssr:StandardServiceRegistry, tool:HibernateSchemaManagementTool, configurationvalues:Map, GeneratedName:ExecutionOptions);

dropschemaduringjtatxntest();

individuallyschemavalidatorimplconnectiontest(loginspection:LoggerInspectionRule, ssr:StandardServiceRegistry, tool:HibernateSchemaManagementTool, configurationvalues:Map, GeneratedName:ExecutionOptions, connectionprovider:DriverManagerConnectionProviderImpl, GeneratedName:Connection);

schematooltransactionhandlingtest();

person(id:long [PK], name:String, GeneratedName:Address);

productentity(pk:Long [PK], description:Map<String,ILocalizable>);

metamodeltest();

ownerone();

abstractentity(id:Long [PK], owner:AbstractOwner #FK to(abstractowner));

entityone();



company(id:long [PK], name:String, GeneratedName:Address);

proxyinterfaceclassloadertest();

abstractskipautocommittest(connectionprovider:PreparedStatementSpyConnectionProvider);

nonjpacompliancealreadystartedtransactiontest(tm:TransactionManager);

entitya(id:int [PK], name:String);

interceptornonnulltransactiontest(GeneratedName:JpaComplianceTransactionSetting, GeneratedName:JtaAllowTransactionAccessSetting);

joinedsequenceidentitybatchtest();

identityjoinedsubclassbatchingtest();

sequencejoinedsubclassbatchingtest();

joinedsubclassbatchingtest();

querystatsmaxsizetest();

jtabeforecompletionfailuretest();

jtaaftercompletiontest();

interceptortransactiontest(GeneratedName:JpaComplianceTransactionSetting, GeneratedName:JtaAllowTransactionAccessSetting);

updateorderingidentityidentifiertest();

insertorderingwithcascadeonpersist();

insertorderingwithmanytoone();

insertorderingwithjoinedtableinheritance();

insertorderingwithbidirectionalonetomany();

insertorderingselfreferencetest();

insertorderingwithbaseclassreferencingsubclass();

insertorderingwithbidirectionalonetomanyflushproblem();

insertorderingduplicatetest();

insertorderingwithunidirectionalonetoonejoincolumn();

insertorderingwithmultiplemanytoone();

insertorderingwithjoinedtablemultilevelinheritance();

insertorderingwithbidirectionalonetooneflushproblem();

batchsortingtest();

insertorderingwithbidirectionalonetoone();

insertorderingwithsingletableinheritance();

insertorderingselfreferencesingletableinheritance();

insertorderingwithsecondarytable();

insertorderingwithbidirectionalmapsidonetoone();

insertorderingwithtableperclassinheritance();

insertorderingwithbidirectionalmanytomany();

insertorderingwithcompositetypeassociation();

insertorderingreferencedifferentsubclasstest();

insertorderinghasparenttest();

elementcollectiontest();

insertorderingwithunidirectionalonetoone();

queryhintsqlserver2012test();

queryhinttest(GeneratedName:SQLStatementInterceptor);

queryhinthanatest(GeneratedName:SQLStatementInterceptor);

queryexceptionhandlingtest();

stateobjectstateexceptionhandlingtest();

identifiergenerationexceptionhandlingtest();

transientobjectexceptionhandlingtest();

transactionexceptionhandlingtest();

nonactivetransactionsessionfindjdbcexceptionhandlingtest();

constraintviolationexceptionhandlingtest();

nationalizedignorecasetest();

mappedsuperclassextendsentitytest();

polygon(id:Integer [PK], description:String);

parententity(id:Long [PK]);

quadrilateral(anglea:Double, angleb:Double, anglec:Double);

joinedinheritanceeagertest();

singletableinheritancepersisttest(john:Man, jane:Woman, susan:Child, mark:Child, GeneratedName:Family, children:List<Child>, familymembers:List<Person>);

multiinheritanceimplicitdowncasttest();

singletablewithembeddabletest();

tableperclasswithembeddabletest();

joinedsubclasswithembeddabletest();

inheritingentity(somevalue:String);

subsubentity();

rootentity(id:Long [PK]);

subsubsubentity();

subentity();

singletablerelationstest();

joinedinheritancetest();

multisingletableloadtest();

tableperclassinheritancepersisttest(john:Man, jane:Woman, susan:Child, mark:Child, GeneratedName:Family, children:List<Child>, familymembers:List<Person>);

transientoverrideaspersistentmappedsuperclass();

inheritancedeletebatchtest();

transientoverrideaspersistenttableperclass();

mappedsuperclassinheritancetest(loginspection:LoggerInspectionRule);

transientoverrideaspersistentsingletable();

joinedinheritancewithonetomanytest();

joinedinheritancepropertynameconflicttest();

transientoverrideaspersistentjoined();

sorttest();

role(GeneratedName:Code [PK]);

bid(amount:float [PK], GeneratedName:Item [PK] #FK to(item));

item(name:String [PK]);

criteriaaliasfetchtest();

listactionrole(role:Code [PK], GeneratedName:Role #FK to(role));

sessioncreatequeryfromcriteriatest();

mapsidonetooneselecttest();

seller(id:Integer [PK], name:String);

seller_customer(seller_id:Seller [PK] #FK to Seller,customer_id:set<customer> [PK] #FK to set<customer>);

customer(id:Integer [PK], name:String);

batchoptimisticlockingtest(GeneratedName:ExecutorService);

batchingbatchfailuretest();

optionalsecondarytablebatchtest(companies:List<Company>);

nonbatchingbatchfailuretest();

batchinginheritancedeletetest();

tree(id:Long [PK]);

gate(id:Long [PK]);

portal(id:Long [PK]);

window(id:Long [PK]);

palmtree(leavesize:double);

annotationbindertest(loginspection:LoggerInspectionRule);

directreferencecacheentriestest();

defaultcacheconcurrencypropertytest();

wrongcircularitydetectiontest();

onetomanyduplicateinsertiontest(parentid:int);

book(isbn:String, GeneratedName:Library #FK to(library));

library(entid:int [PK]);

product(entid:int [PK], inventorycode:String);

library(entid:int [PK]);

product(entid:int [PK], inventorycode:String);

book(isbn:String, GeneratedName:Library #FK to(library));

book(isbn:String, GeneratedName:Library #FK to(library));

product(entid:int [PK], inventorycode:String);

library(entid:int [PK]);

annotateddetail(id:Integer [PK], name:String, //becauseotherwiseschemaexportwouldnotknowaboutit...domain:String);

annotatedmaster(id:Integer [PK], name:String, detail_domain:AnnotatedDetail #FK to(annotateddetail));

detachedgetidentifiertest();

evictiontest();

otherentityentrycontexttest();

basicenhancementtest();

basicsessiontest();

mappedsuperclasstest();

inheritedtest();

crossenhancementtest();

genericreturnvaluemappedsuperclassenhancementtest();

extendedassociationmanagementtest();

manytomanyassociationtest();

onetooneassociationtest();

inheritedattributeassociationtest();

onetomanyassociationtest();

dirtytrackingpersisttest();

dirtytrackingcollectiontest();

dirtytrackingcollectionindefaultfetchgrouptest();

dirtytrackingnonupdateabletest();

dirtytrackingtest();

cascadewithfkconstrainttest(garageid,car1id,car2id:String);

cascadedeletecollectiontest(original:Parent);

cascadedetachedtest();

cascadedeletemanytoonetest(original:Child);

cascadeonuninitializedtest();

lazyonetomanywithequalsimplementationtest(personid:Long);

statelessqueryscrollingtest();

lazynotfoundmanytoonenonupdatablenoninsertabletest(id:int);

lazynotfoundonetoonetest(id:int);

lazynotfoundonetoonenonupdatablenoninsertabletest(id:int);

lazycollectiondetachtest(children_size:int, parentid:Long);

lazycollectionhandlingtest(id:Integer);

lazycollectionloadingtest(children_size:int, parentid:Long, GeneratedName:Parent);

naturalidinuninitializedassociationtest();

lazyloadingbyenhancersettertest(,merged:Item);

lazybasicfieldnotinitializedtest(entityid:Long);

lazyincachetest(orderid:Long);

uninitializedlazybasiccachetest(personid:Long);

uninitializedassociationsincachetest();

lazybasicfieldmergetest();

simplelazygroupupdatetest(really_big_:String);

bidirectionallazygroupstest();

bidirectionallazygroupsinembeddabletest();

lazygrouptest();

lgmb_from(name:String, //lazy-attributewithoutlazygroup-annotation(thereforedefault-lazygroup)bigtext:String, //lazy-associationwithmappdedbyinownlazygrouptorelation:LGMB_To #FK to(lgmb_to), id:Long [PK]);

lgmb_to(id:Long [PK], fromrelation:LGMB_From #FK to(lgmb_from), name:String);

lazyloadingtest(children_size:int, parentid:Long, lastchildid:Long);

queryscrollingwithinheritancetest();

lazyproxyonenhancedentitytest(parentid:Long);

bidirectionallazytest();

lazycollectiondeletedtest(postid:Long);

lazybasicpropertyaccesstest(entity:LazyEntity, entityid:Long);

lazybasicfieldaccesstest(entity:LazyEntity, entityid:Long);

unexpecteddeletetest3();

unexpecteddeletetest2(my:Bar);

unexpecteddeletetest1(fooid:long);

queryscrollingwithinheritanceeagermanytoonetest();

lazyloadingintegrationtest(children_size:int, lastchildid:Long);

specializedentity(id:Long [PK], value:String, GeneratedName:SpecializedKey #FK to(specializedkey));

naturalidinuninitializedproxytest();

customer(oid:Integer [PK], name:String, GeneratedName:Address, parent:Customer);

address(id:Integer [PK], text:String);

batchfetchproxytest(number_of_entities:int);

proxyinitializeandupdateinlinedirtytrackingdynamicupdatetest(metadatacache:PersistenceUtilHelper.MetadataCache);

proxyinitializeandupdatetest();

deepinheritanceproxytest();

loadanonexistingentitytest(number_of_entities:int);

mergedetachedtoproxytest();

abstractkey(name:String, register:AbstractKey #FK to(abstractkey), parent:AbstractKey #FK to(abstractkey));

instruction(summary:String);

roleentity(value:Short, key:AbstractKey #FK to(abstractkey), GeneratedName:SpecializedKey #FK to(specializedkey));

lazytoonesnoproxyfactorywithsubclassesstatelesstest();

payment(oid:Integer [PK], amount:Float);

specializedkey();

queryscrollingwithinheritanceproxyeagermanytoonetest();

loadanonexistingnotfoundentitytest();

creditcardpayment(transactionid:String);

setidentifieronaenhancedproxytest(children_size:int, lastchildid:Long);

lazytoonesproxywithsubclassestest();

ordersupplemental(oid:Integer [PK], receivablesid:Integer);

lazytoonesnoproxyfactorywithsubclassesstatefultest();

simpleupdatetestwithlazyloadingandinlinedirtytracking(children_size:int, lastchildid:Long);

bidirectionalproxytest();

generickey();

proxyinitializeandupdateinlinedirtytrackingtest();

sharingreferencetest();

lazycollectiondeletedallowproxytest(postid:Long);

foreigncustomer(vat:String);

mapsidproxybidirectionaltest();

debitcardpayment(transactionid:String);

proxydeletiontest();

mappedsuperclasswithembeddabletest();

deepinheritancewithnonentitiesproxytest();

entitysharedincollectionandtoonetest();

webapplication(name:String, siteurl:String);

lazytoonesproxywithsubclassesstatelesstest();

queryscrollingwithinheritanceproxytest();

lazytoonesproxymergewithsubclassestest();

domesticcustomer(taxid:String);

fetchgraphtest();

ordersupplemental2(oid:Integer [PK], receivablesid:Integer, GeneratedName:Order);

dirtycheckprivateunmappedcollectiontest(skiptest:boolean);

manytoonepropertyaccessbyfieldtest(userid:Long, targetuserid:Long, officeid:Long);

manytoonewithembeddedandnotoptionalfieldtest(userid:Long);

simpleupdatetestwithlazyloading(children_size:int, lastchildid:Long);

loadanonexistingnotfoundbatchentitytest(number_of_entities:int);

order(oid:Integer [PK], thetext:String, GeneratedName:Customer, supplemental:OrderSupplemental #FK to(ordersupplemental), supplemental2:OrderSupplemental2 #FK to(ordersupplemental2));

abstractbatchingtest(childname:String, parentid:Long);

activity(description:String, GeneratedName:Instruction, GeneratedName:WebApplication);

mapsidproxyunidirectionaltest();

morespecializedkey();

lazyinitializationwithoutinlinedirtytrackingtest();

embeddedpktest();

mixedaccesstest(param_:Pattern, mapping_function:Function<Map.Entry,String>, id:String);

hhh3949test();

testentity(id:Long [PK], GeneratedName:Date, texts:Map<String,String>);

initfromcachetest(persister:EntityPersister, documentid:Long);

ondemandloadtest();

root(id:Long [PK], name:String);

compositemergetest(entityid:long);

leaf(id:Long [PK], GeneratedName:Root #FK to(root), name:String);

mergeenhancedentitytest(GeneratedName:Person);

mergedetachednoncascadedcollectioninembeddabletest();

mergedetachedcascadedcollectioninembeddabletest();

nonpkmanytooneassociationtest(GeneratedName:Parent);

jpastreamtest();

basicstreamtest();

subselectfetchcollectionfrombatchtest();

omitancestorjoinwhencommonsecondarytablepresenttest(secondary_table_name:String);

omitancestorjointest();

omitancestorjoinwhensecondarytablepresenttest();

compositeidassociationswithembeddedcompositeidtest();

iamafoo(id:long [PK], foo:String);

nativequeryscrollableresults();

jpafunctiontest();

group(id:Long [PK], name:String);

user(id:Long [PK], name:String);

membership(id:Long [PK], member:User #FK to(user), GeneratedName:Group, join:Date, dues:Float);

numvalue(num:long [PK], value:String);

nativequerysyncspacecachingtest();

nativequerydoesnotsupportiterationtest();

postgresrefcursorsupporttest(sf:SessionFactory);

h2proctesting();

storedprocedureresultsetmappingtest();

house(id:Long [PK], cost:Integer);

mysqldropconstraintthrowsexceptiontest();

uniqueconstraintvalidationtest();

room(id:Long [PK], name:String);

uniqueconstraintunittests();

uniqueconstraintthrowsconstraintviolationexceptiontest();

idclassmappedsuperclasstest();

domainadmin(domainname:String [PK], adminuser:String [PK], nickname:String);

houseplaces(id:int [PK], GeneratedName:Places, neighbour:Places);

vendor(id:int [PK]);

postman(name:String, id:String [PK]);

inhabitant(id:Integer [PK], name:String);

item(id:int [PK]);

house(id:Integer [PK], address:String, GeneratedName:Postman);

address(address:House [PK] #FK to House,name:set<inhabitant> [PK] #FK to set<inhabitant>);

bag(id:Integer [PK], serial:String, fld_name:Rambler #FK to(rambler));

itemcost(id:int [PK], GeneratedName:Item, GeneratedName:Vendor, cost:BigDecimal);

rambler(id:Integer [PK], name:String);

clothes(id:Integer [PK], type:String, flavor:String);

warehouseitem(id:int [PK], GeneratedName:Item, GeneratedName:Vendor, vendor_id:ItemCost #FK to(itemcost), qtyinstock:BigDecimal);

place(id:int [PK], name:String, owner:String);

luggage(id:Integer [PK], owner:String, type:String);

person(id:long [PK]);

address(id:long [PK], GeneratedName:Person #FK to(person));

a(id:String [PK], name:String, value:int, address:Set<AddressEntry>);

longkeynamingstrategytest(GeneratedName:ServiceRegistry);

abstractcharsetnamingstrategytest(GeneratedName:ServiceRegistry);

simple2(id1:Long [PK], id2:Long [PK], quantity:int);

simple(id1:Long [PK], id2:Long [PK], quantity:int);

multiple(id1:Long [PK], id2:Long [PK], id3:Long [PK], quantity:int);

listmappingtest(ssr:StandardServiceRegistry);

flight(id:Long [PK], name:String, transientduration:Long, version:Integer, GeneratedName:Company, triggereddata:String, factor:long, departure:Date, buydate:java.sql.Timestamp, alternativedeparturedate:Calendar);

transaction(id:long [PK], code:String, account:BankAccount #FK to(bankaccount));

onetomanytest();

post();

monkey(id:Integer [PK], name:String);

box(id:int [PK]);

trainer(id:Integer [PK], name:String);

organisation(idorganisation:Long [PK], name:String);

forum(id:Long [PK], name:String);

asset(idasset:Integer [PK], test:Integer [PK], GeneratedName:Employee #FK to(employee));

troop(id:Integer [PK], name:String);

a(id:Long [PK], name:String);

city(id:Integer [PK], name:String);

tiger(id:Integer [PK], name:String);

person(idperson:Long [PK], firstname,lastname:String);

politicalparty(name:String [PK]);

orderitem(schoolid:String [PK], academicyear:Integer [PK], dayno:Integer [PK], dayname:String, GeneratedName:Order);

visitor(id:Long [PK], firstname:String, lastname:String);

user(id:Long [PK], name:String, GeneratedName:Forum);

organisationuser(sometext:String, GeneratedName:Organisation);

bankaccount(id:long [PK]);

soldier(id:Integer [PK], name:String, GeneratedName:Troop);

politician(name:String [PK], party:PoliticalParty #FK to(politicalparty));

c(id:Long [PK], name:String);

child(id:Integer [PK], ismale:Parent #FK to(parent), favoritesuperhero:String, favoritesinger:String);

employee(id:Integer [PK]);



order(schoolid:String [PK], schoolidsort:Integer, academicyear:Integer [PK]);

zoo(id:Long [PK], name:String);

street(id:Integer [PK], streetname:String, streetnamecopy:String, GeneratedName:City);

model(id:Integer [PK], GeneratedName:Manufacturer #FK to(manufacturer));

computer(computername:String);

item(id:int [PK], code:String, sortfield:int, GeneratedName:Box #FK to(box));

parent(id:ParentPk [PK], age:int);

b(id:Long [PK], name:String);

inmemoryupdatetimestamptest();

storm(id:Integer [PK], start:Location, end:Location, stormname:String);

car(id:long [PK], brand:String, producer:String, since:long, GeneratedName:Dealer, otherdealers:Set<Dealer>);

importer(id:long [PK], name:String);

car_importer(Importer_ID:Importer [PK] #FK to Importer,list<car>_ID:list<car> [PK] #FK to list<car>);

sky(id:Long [PK], color:String, day:String, month:String);

car(id:int [PK], name:String);

race(length:Long, id:Integer [PK]);

narrative(id:int [PK], state:String, GeneratedName:Topic);

address(id:Integer [PK], city:String, GeneratedName:Country);

localcontactdetails(id:int [PK], local:PhoneNumber, GeneratedName:OverseasPhoneNumber);



contactdetails(id:int [PK], local:PhoneNumber, GeneratedName:OverseasPhoneNumber);

zipcode(code:String [PK]);

ransom(id:Integer [PK], kidnappername:String, amount:MonetaryAmount, GeneratedName:Date);

tree(id:Integer [PK], name:String);

soccerteam(id:int [PK], name:String, onevone:Player #FK to(player));

name(id:Integer [PK], GeneratedName:LastName);

forest2(id:Integer [PK], name:String, longdescription:String);

month(id:int [PK], year:int, month:int);

doctor(id:Integer [PK], name:String, activelicense:boolean, yearsexperience:Integer);

communitybid(communitynote:Starred);

washingmachine(id:Integer [PK], transientisactive:boolean);

topic(id:int [PK]);

bid(id:Integer [PK], description:String, note:Starred, editorsnote:Starred, approved:Boolean);

peugot();

flight(id:Long [PK], maxaltitudeinmilimeter:long, maxaltitude:long);

player(id:int [PK], name:String, team:SoccerTeam #FK to(soccerteam), //fortheworldcupofoneversusonematches,wehave//teamswithoneplayer(1v1team).onevoneteam:SoccerTeam);

forest(id:Integer [PK], name:String, length:long, longdescription:String, smalltext:String, bigtext:String, GeneratedName:Country, near:Set);

formallastname(id:Integer [PK], GeneratedName:LastName, designation:String);

powerdrill();

ticket(id:Long [PK], number:String);

son(id:Integer [PK], GeneratedName:Father, GeneratedName:Mother);

father(id:Integer [PK]);

mother(id:Integer [PK]);

passport(id:Long [PK], number:String, owner:Customer #FK to(customer));

item(id:long [PK], name:String);

highestbid(name:String [PK], amount:double);

bid(id:int [PK], itemid:long, amount:double);

sysuserorm(userid:long [PK]);

sys_groups_users(userid:SysUserOrm [PK] #FK to SysUserOrm,groupid:collection<sysgroupsorm> [PK] #FK to collection<sysgroupsorm>);

b(id:Integer [PK], name:String);

sysgroupsorm(groupid:long [PK]);

c(age:int);

cat(id:Integer [PK], name:String, secondname:String, storypart1:String, storypart2:String);

dog(id:DogPk [PK], weight:int, thoroughbredname:String);

simplecat(id:Integer [PK], name:String);

life(id:Integer [PK], duration:int, fulldescription:String, owner:SimpleCat #FK to(simplecat));

death(id:Integer [PK], GeneratedName:Date, howdoesithappen:String);

life(id:Integer [PK], duration:int, fulldescription:String, owner:Cat #FK to(cat));

inmemorycreationtimestampnullablecolumntest();

painting(sizex:int, sizey:int, name:String [PK], painter:String [PK]);

dress(id:Integer [PK]);

gaskey(name:String [PK]);

exchangerate(id:Integer [PK], rate:double, key:ExchangeRateKey, parent:ExchangeOffice);

software(name:String [PK]);

drawer(id:Long [PK]);

newspaper(id:Integer [PK], name:String);

newspaper_map<string,news>(newspaperID:newspaper [PK] #FK to newspaper,map<string,news>ID:map<string,news> [PK] #FK to map<string,news>);

currency(id:Integer [PK], currency:String);

news(id:Integer [PK], title:String, detail:String);

generationgroup(id:int [PK], GeneratedName:Generation);

wardrobe(id:Long [PK]);

generationuser(id:int [PK]);

training(id:Long [PK]);

training_sortedmap<string,trainee>(trainingID:training [PK] #FK to training,sortedmap<string,trainee>ID:sortedmap<string,trainee> [PK] #FK to sortedmap<string,trainee>);

atmosphere(id:Integer [PK], colorperdate:Map<Date,String>, colorperlevel:Map<Level,String>, composition:Map<Gas,Double>);

atmosphere_map<string,gas>(atmosphereID:atmosphere [PK] #FK to atmosphere,map<string,gas>ID:map<string,gas> [PK] #FK to map<string,gas>);gas_per_key(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,map<gaskey,gas>_ID:map<gaskey,gas> [PK] #FK to map<gaskey,gas>);atm_gas_def(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,map<string,gas>_ID:map<string,gas> [PK] #FK to map<string,gas>);atm_gas_defleg(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,map<string,gas>_ID:map<string,gas> [PK] #FK to map<string,gas>);gas_p_key_def(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,map<gaskey,gas>_ID:map<gaskey,gas> [PK] #FK to map<gaskey,gas>);

trainee(id:Long [PK], name:String);

addressbook(id:Integer [PK], owner:String);

exchangeoffice(id:Integer [PK], exchangerates:Map<ExchangeRateKey,ExchangeRate>, exchangeratefees:Map<ExchangeRateKey,BigDecimal>);

painter(id:Integer [PK]);

pressreleaseagency(id:Integer [PK], name:String);

pressreleaseagency_id(pressreleaseagency_id:PressReleaseAgency [PK] #FK to PressReleaseAgency,news_id:map<integer,news> [PK] #FK to map<integer,news>);

alphabeticaldirectory(id:Integer [PK], name:String);

version(id:Integer [PK], codename:String, number:String, GeneratedName:Software);

gas(id:Integer [PK], name:String);

atmosphere(id:Integer [PK], colorperdate:Map<Date,String>, colorperlevel:Map<Level,String>, composition:Map<Gas,Double>);

atmosphere_map<string,gas>(atmosphereID:atmosphere [PK] #FK to atmosphere,map<string,gas>ID:map<string,gas> [PK] #FK to map<string,gas>);gas_per_key(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,map<gaskey,gas>_ID:map<gaskey,gas> [PK] #FK to map<gaskey,gas>);atm_gas_def(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,map<string,gas>_ID:map<string,gas> [PK] #FK to map<string,gas>);atm_gas_defleg(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,map<string,gas>_ID:map<string,gas> [PK] #FK to map<string,gas>);gas_p_key_def(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,map<gaskey,gas>_ID:map<gaskey,gas> [PK] #FK to map<gaskey,gas>);

addressentry(person:AddressEntryPk, street:String, city:String, book:AddressBook #FK to(addressbook), directory:AlphabeticalDirectory #FK to(alphabeticaldirectory));

classc();

b(id:int [PK]);

classb();

c();

a(id:A_PK);

classd();

d(id:D_PK);

classa(id:int [PK]);

product(serialversionuid:long, id:Integer [PK], productidnf:String, description:String, product_idnf:Product #FK to(product));

contract(contractnumber:String, //integercompanycodeid:ContractId, GeneratedName:Manufacturer, GeneratedName:Model);

model(id:ModelId [PK], name:String);

language(serialversionuid:long, name:String, code:String [PK]);

message(serialversionuid:long, id:int [PK], languagecode:String, languagename:String, GeneratedName:Language);

menu(serialversionuid:long, id:Integer [PK], ordernbr:String, isdefault:String);

manufacturer(id:ManufacturerId [PK], name:String);

company(serialversionuid:long, id:int [PK], GeneratedName:Person);

person(serialversionuid:long, id:int [PK], companyid:int, defaultflag:String);

fooditem(id:Integer [PK], item:String, order_nbr:Menu #FK to(menu));

productsqlserver(serialversionuid:long, id:Integer [PK], productidnf:String, description:String, product_idnf:ProductSqlServer #FK to(productsqlserver));

zimpl(serialversionuid:long, zid:Integer [PK], GeneratedName:B);

primeminister(id:Integer [PK], name:String, current:Government);

bimpl(serialversionuid:long, bid:Integer);

aimpl(serialversionuid:long, aid:Integer [PK], description:String);

sky(id:Integer [PK], maincloud:CloudType #FK to(Type));

sky_Type(skyID:sky [PK] #FK to sky,TypeID:Type [PK] #FK to Type);

manufacturer(id:Integer [PK]);

tuplizerinstantiatesbytebuddysubclasstest();

cuisine();

myentity(id:Long [PK], name:String);

creationtimestamptest();

collectionasbasictest();

contactimpl(id:Integer [PK], name:String);

userimpl(id:Integer [PK]);

state(id:Integer [PK], name:String);

country(id:Integer [PK], name:String);

foobar(id:Integer [PK], name:String);

immutableentityupdatequeryhandlingmodeexceptiontest();

photo(id:Integer [PK], name:String, metadata:Exif, GeneratedName:Caption);

bug(id:int [PK], title:String);

`bug_category`(Bug_ID:Bug [PK] #FK to Bug,list<category>_ID:list<category> [PK] #FK to list<category>);

category(id:int [PK], title:String);

printer(id:Long [PK]);

printercable(id:Long [PK], GeneratedName:Printer);

person(serialversionuid:long, id:Long [PK], name:String);

mouth(id:Integer [PK], size:int);

codedpairholder(id:Long [PK], code:String, pair:PersonPair);

tooth(id:Integer [PK], type:String, leftneighbour:Tooth #FK to(tooth), rightneighbour:Tooth #FK to(tooth), GeneratedName:Mouth #FK to(mouth));

parent(/***/id:Long [PK], /***/default:Child #FK to(child));

child(/***/id:Long [PK], /***/:Parent #FK to(parent));

codedpairsetholder(serialversionuid:long, id:Long [PK], code:String, pairs:Set<PersonPair>);

updatedetachedtest();

entity1(entity1_prop1:String, entity1_prop2:String, entity1_prop3:String, entity1_prop4:String, entity1_prop5:String, entity1_prop6:String);

entity2(entity2_prop1:String, entity2_prop2:String, entity2_prop3:String, entity2_prop4:String, entity2_prop5:String, entity2_prop6:String);

dvd(id:MyOid [PK], title:String);

stamp(id:Long [PK], country:String);

passport(id:Long [PK], name:String);

passport_stamp(Passport_ID:Passport [PK] #FK to Passport,collection<stamp>_ID:collection<stamp> [PK] #FK to collection<stamp>);passport_visastamp(Passport_ID:Passport [PK] #FK to Passport,collection<stamp>_ID:collection<stamp> [PK] #FK to collection<stamp>);

socialsite(id:int [PK], website:String);

blogentry(text:String);

propertyrecord(id:Long [PK], parcels:Map<Address,PropertyInfo>, legacyparcels:Map<Address,PropertyInfo>, unsortedparcels:Set<PropertyInfo>, legacyunsortedparcels:Set<PropertyInfo>);

entityinheritanceattributeoverridetest(loginspection:LoggerInspectionRule);

mappedsuperclassattributeoverridetest();

inheritedattributeoverridingtest(GeneratedName:StandardServiceRegistry);

mappedsuperclassbasicpropertyidattributeoverridetest();

subclasswithuuidasid();

trip();

location(name:String [PK]);

addr(id:int [PK], street:String, city:String, state:String, country:String, zipcode:String);

phonenumber(id:int [PK], number:int);

employee(id:int [PK], GeneratedName:ContactInfo);

flight(id:String [PK]);

basicattributeoverridetest();

attributeoverrideenhancedusertypetest();

investor(id:Long [PK], investments:List<Investment>);

customer(id:Long [PK], investments:List<Investment>);

customer(id:Long [PK], investments:List<Investment>);

embeddablewithmanytomany_hhh_11302_test();

embeddablewithonetomany_hhh_11302_test();

embeddablewithonetomany_hhh_8564_test();

embeddablewithonetomany_hhh_8860_test();

customer(id:Long [PK], name:String, GeneratedName:Passport);

bigbed(size:int);

chair();

gardenshed(id:Integer [PK], floors:long);

foobar(foo:String);

boy(id:long [PK], nicknames:Set<String>);

cook(id:int [PK], favouriteknife:Knive);

tourist(id:long [PK], name:String, destination:String);

rentalcar(id:int [PK], GeneratedName:Driver);

waiter();

driver(id:int [PK], name:String);

attributeaccessortest(GeneratedName:ServiceRegistry);

course5(id:long [PK], title:String);

course5_list<student>(course5ID:course5 [PK] #FK to course5,list<student>ID:list<student> [PK] #FK to list<student>);

course1(id:long [PK], title:String);

shape(id:long [PK]);

course4(id:long [PK], title:String);

horse(name:String);

student(id:long [PK], name:String);

person(firstname:String, lastname:String);

bed();

animal(id:long [PK]);

circle(GeneratedName:Color);

course8(id:long [PK], title:String);

course6(id:long [PK], title:String);

course2(id:long [PK], title:String);

being(id:long [PK]);

gardenshed(id:Integer [PK], floors:long);

user();

furniture(id:Integer [PK], weight:long);

chair();

square(id:long [PK], GeneratedName:Position);

bigbed(size:int);

course7(id:long [PK], title:String);

course3(id:long [PK], title:String);

furniture();

bed();

supporttickets(id:long [PK], description:String, resolution:String);

customer4(id:long [PK], name:String, customernumber:long);

customer5(id:long [PK], name:String, customernumber:long);

address(id:long [PK], street:String, customer:Customer6 #FK to(customer6));

customer3(id:long [PK], name:String, customernumber:long);

order(id:long [PK], ordernumber:long, delivery:Date, GeneratedName:Country #FK to(country));

customer(id:long [PK], name:String, customernumber:long, last:Order #FK to(order));

country(id:Integer [PK], name:String);

customer2(id:long [PK], name:String, customernumber:long);

customer6(id:long [PK], name:String, GeneratedName:Address #FK to(address));

secondarytableschematest();

databasecreationtimestampnullablecolumntest();

discount(id:Long [PK], discount:double, owner:Customer #FK to(customer));

marketregion(id:long [PK], regioncode:String);

car(id:long [PK], model:String, region_code:MarketRegion #FK to(Region));

sportcar();

branch(id:Integer [PK]);

person(//memberdeclarationid:int, firstname:String, lastname:String, companyname:String);

stay(//memberdeclarationid:int, GeneratedName:Person, old:Person, veryold:Person, start:Date, end:Date, vessel:String, authoriser:String, comments:String);

leaf(id:Integer [PK], GeneratedName:Branch #FK to(branch));

team(id:Long [PK]);

player(id:Long [PK], GeneratedName:Team, name:String);

loaderwithinvalidquerytest();

updatetimestamptest();

friend(id:Integer [PK], name:String);

friend2friend(from_fr:Friend [PK] #FK to Friend,to_fr:set<friend> [PK] #FK to set<friend>);

building(id:Long [PK], name:BuildingCompany #FK to(buildingcompany));

group(id:Integer [PK]);

group_collection<permission>(groupID:group [PK] #FK to group,collection<permission>ID:collection<permission> [PK] #FK to collection<permission>);

employee(id:Integer [PK], name:String, GeneratedName:ContactInfo, GeneratedName:JobInfo);

contractor(hourlyrate:float);

phonenumber(phnumber:int [PK]);

buildingcompany(id:Long [PK], foundedin:Date);

permission(permission:String [PK], expiration:Date);

supplier(id:Integer [PK], name:String);

woman(id:WomanPk [PK], carname:String);

man_woman(womanlastname:Woman [PK] #FK to Woman,maniselder:set<man> [PK] #FK to set<man>);

inspectorprefixes(prefixes:String);

deserted_area(inspector_name:InspectorPrefixes [PK] #FK to InspectorPrefixes,area_id:list<zone> [PK] #FK to list<zone>);inspector_prefixes_areas(inspector_id:InspectorPrefixes [PK] #FK to InspectorPrefixes,area_id:list<zone> [PK] #FK to list<zone>);

store(id:Integer [PK], name:String);

store_set<knownclient>(storeID:store [PK] #FK to store,set<knownclient>ID:set<knownclient> [PK] #FK to set<knownclient>);storesupplier(store:Store [PK] #FK to Store,supplier:set<supplier> [PK] #FK to set<supplier>);store_set<city>(storeID:store [PK] #FK to store,set<city>ID:set<city> [PK] #FK to set<city>);

employee(id:Integer [PK], name:String, GeneratedName:ContactInfo);

item(id:Integer [PK]);

item_set<city>(itemID:item [PK] #FK to item,set<city>ID:set<city> [PK] #FK to set<city>);

store(id:Integer [PK], name:String);

store_set<knownclient>(storeID:store [PK] #FK to store,set<knownclient>ID:set<knownclient> [PK] #FK to set<knownclient>);store_set<item>(storeID:store [PK] #FK to store,set<item>ID:set<item> [PK] #FK to set<item>);store_set<category>(storeID:store [PK] #FK to store,set<category>ID:set<category> [PK] #FK to set<category>);store_set<city>(storeID:store [PK] #FK to store,set<city>ID:set<city> [PK] #FK to set<city>);

phonenumber(phnumber:int [PK]);

city(id:Integer [PK], name:String);

city_set<item>(cityID:city [PK] #FK to city,set<item>ID:set<item> [PK] #FK to set<item>);

category(id:Integer [PK]);

category_set<knownclient>(categoryID:category [PK] #FK to category,set<knownclient>ID:set<knownclient> [PK] #FK to set<knownclient>);

knownclient(id:Integer [PK], name:String);

man(id:ManPk [PK], carname:String);

city(id:Integer [PK], name:String);

inspector(_id:Long [PK], name:String);

programmanager(id:int [PK]);

knownclient(id:Integer [PK], name:String);

employer(id:Integer [PK]);

employer_employee(emper_id:Employer [PK] #FK to Employer,empee_id:collection [PK] #FK to collection);employer_contractor(employer_id:Employer [PK] #FK to Employer,contractor_id:list [PK] #FK to list);

cat(id:CatPk, age:int);

tt(Cat_ID:Cat [PK] #FK to Cat,set<woman>_ID:set<woman> [PK] #FK to set<woman>);

zone(id:Integer [PK]);

groupwithset(id:Integer [PK]);

groupwithset_set<permission>(groupwithsetID:groupwithset [PK] #FK to groupwithset,set<permission>ID:set<permission> [PK] #FK to set<permission>);

notfoundonetoonenoninsertablenonupdateabletest(id:int);

notfoundtest();

notfoundlogicalonetoonetest();

onetoonenotfoundtest();

component(manufacturerpartnumber:String, manufacturerid:Long, id:Long [PK]);

robot(name:String);

machine(id:Integer [PK], weight:Double);

product();

t800(targetname:String);

ferry(sea:String);

notnullmanytoonetest();

customer(id:Integer [PK], userid:String);

item();

vendor();

warehouseitem(GeneratedName:Item, GeneratedName:Vendor, vendor_id:ZItemCost #FK to(zitemcost), qtyinstock:BigDecimal);

zitemcost(GeneratedName:Item, GeneratedName:Vendor, cost:BigDecimal);

color(id:Integer [PK], name:String);

node(id:NodePk [PK], description:String, parent:Node #FK to(Node));

treetype(id:Integer [PK], name:String, GeneratedName:ForestType, alternative:ForestType);

carz(id:Integer [PK], make:String, model:String, manufactured:Date, loc_code:Lotz #FK to(lotz));

user(userkey:Long [PK], start:Date [PK], end:Date [PK], createdby:Long, createdon:Date, userid:String, prefix:Integer, firstname:String, lastname1:String, lastname2:String, middlename1:String, middlename2:String, suffix:Integer, birth:Date, birthstate:Integer, birthcountry:Integer, username:String, password:String, usertype:Integer, privilege:Integer, state:Integer, country:Integer, preferredname:String, birthplace:String, school:Long, cluster:Long, ldtmm:Long, ldtmd:Long, pmtmp:Long);

car(id:Integer [PK], body:Color, owner:Parent #FK to(parent));

districtuser(id:Long [PK], createdby:Long, createdon:Date, ctvusers_key:User #FK to(user), ldtmd:Long, pmtmp:Long);

foresttype(id:Integer [PK], name:String, biggestrepresentative:BiggestForest #FK to(biggestforest));

lens(id:Long [PK], focal:float, length:float, name:Frame #FK to(frame));

frame(id:Long [PK], name:String, lowername:String);

manytoonemapsidflushmodetest();

biggestforest(id:Integer [PK], type:ForestType #FK to(Type));

parent(id:ParentPk [PK], age:int);

deal(id:Integer [PK], userid:Customer #FK to(customer), userid:Customer #FK to(customer));

lotz(lotpk:LotzPK, name:String, location:String);

child(id:Integer [PK], ismale:Parent #FK to(parent));

orderline(id:Integer [PK], item:String, GeneratedName:Order, replacement:Order);

order(id:Integer [PK], ordernbr:String);

entityenum(id:long [PK], ordinal:Common, string:Common, GeneratedName:FirstLetter, GeneratedName:LastNumber, explicitoverridingimplicit:LastNumber, GeneratedName:Trimmed, formula:Trimmed, set:Set<Common>);

enumeratedsmoketest(ssr:StandardServiceRegistry);

entitymapenum(id:int [PK], ordinalmap:Map<Common,String>, stringmap:Map<Common,String>, firstlettermap:Map<FirstLetter,String>, lastnumbermap:Map<LastNumber,String>, explicitoverridingimplicitmap:Map<LastNumber,String>);

socialnetworkprofile(id:java.lang.String, GeneratedName:User #FK to(user), type:SocialNetwork, networkid:String);

user(id:java.lang.String);

boat(id:Integer [PK], size:int, weight:int);

a(accountid:AId, shortcode:String);

d(oid:long [PK], version:int, GeneratedName:A, single:A);

state(id:Integer [PK], name:String);

citizen(id:Integer [PK], firstname:String, lastname:String, GeneratedName:State #FK to(state), ssn:String);

naturalidonmanytoone(id:int [PK], GeneratedName:Citizen #FK to(citizen));

a(oid:long [PK], version:int, name:String, ds:Set<D>, single:D);

tvmagazin(id:TvMagazinPk, time:Date);

c(id:Long [PK]);

parent(id:ParentPk);

tvprogramidclass(GeneratedName:Channel [PK], GeneratedName:Presenter [PK], time:Date, text:String);

littlegenius(particularskill:String);

order(id:Integer [PK]);

someentity(id:SomeEntityId [PK], prop:String);

orderline(GeneratedName:Order [PK], GeneratedName:Product [PK]);

child(id:ChildPk);

b(id:Long [PK]);

compositeididentitytest();

compositeidfkgeneratedvalueidentitytest();

card(id:String [PK]);

key(id:String [PK]);

cardfield(GeneratedName:PrimaryKey);

presenter(name:String [PK]);

channel(id:Integer [PK], name:String);

compositeidfkgeneratedvaluetest();

product(name:String [PK]);

tvprogram(id:TvMagazinPk, time:Date, text:String);

a(GeneratedName:AId);

propertylist(id:Integer [PK], name:String, somepropery:T, generalproperties:List<T>);

embeddedanytest();

propertyset(id:Integer [PK], name:String, some:Property, generalproperties:List<Property>);

longproperty(id:Integer [PK], name:String, value:Long);

charproperty(id:Integer [PK], name:String, value:Character);

propertymap(id:Integer [PK], name:String, properties:Map<String,Property>);

lazypropertyset(id:Integer [PK], name:String, some:Property);

stringproperty(id:Integer [PK], name:String, value:String);

integerproperty(id:Integer [PK], name:String, value:Integer);

contest(id:int [PK], heldin:Month);

competitor(id:int [PK], name:String);

professionalagreement(id:Integer [PK], expiration:Date);

conductor(id:Integer [PK], name:String, version:Long);

vmtimestamped(id:int [PK], lastup:Date);

staff(id:Integer [PK], sizeininches:double, radiuss:double, diameter:double, kooky:String);

vehicule(id:String [PK], registrationnumber:String, current:Conductor #FK to(conductor), year:Integer, previous:Conductor #FK to(conductor));

truck(weight:int, agreement:ProfessionalAgreement #FK to(professionalagreement));

antenna(id:Integer [PK], longitude:String, latitude:String, power:Double);

dbtimestamped(id:int [PK], lastup:Date);

store(id:Integer [PK], serialversionuid:long);

cardfield(GeneratedName:PrimaryKey [PK], tmp:Card #FK to(card));

course(id:int [PK], name:String);

student(id:int [PK], name:String);

customers(serialversionuid:long, customerid:int [PK]);

storecustomer(GeneratedName:Store [PK] #FK to(store), GeneratedName:Customer [PK] #FK to(customer), serialversionuid:long);

basketitems(serialversionuid:long, basketdatetime:ShoppingBaskets [PK] #FK to(shoppingbaskets), cost:Double [PK]);

card(primarykey:CardPrimaryKey [PK], main:CardField #FK to(cardfield));

coursestudent(GeneratedName:Course [PK] #FK to(course), GeneratedName:Student [PK] #FK to(student), value:String);

customer(id:Integer [PK], serialversionuid:long);

project(id:int [PK]);

cardkey(id:int [PK]);

shoppingbaskets(serialversionuid:long, customerid:Customers [PK] #FK to(customers), basketdatetime:java.util.Date [PK]);

service(idpk:BigInteger [PK]);

a(id:int [PK]);

droitacces(idpk:BigInteger [PK], idpkbenef:Benefserv #FK to(benefserv));

b(parent:C [PK], sequencenumber:int [PK]);

acces(idpk:BigInteger [PK], idpkdracc:Droitacces #FK to(droitacces));

benefserv(idpk:BigInteger [PK], idpkser:Service #FK to(service));

c(prent:A [PK], sequencenumber:int [PK]);

user(id:int [PK], emailaddress:String, age:int, username:String, password:String, lockedout:boolean);

mammal(ispregnant:boolean);

human(iq:int);

animal(id:Integer [PK], name:String);

club(id:int [PK], name:String);

human(iq:int, GeneratedName:Club #FK to(club));

mammal(ispregnant:boolean);

animal(id:Integer [PK], name:String);

mammal(ispregnant:boolean);

human(iq:int);

mammal(ispregnant:boolean);

human(iq:int);

animal(id:Integer [PK], name:String);

account();

savingsaccount();



incorrectentity(name:String);

updatetimestampinheritancetest(sleep_millis:long, customerid:String);

joinformulamanytoonenotignorelazyfetchingtest(loginspection:LoggerInspectionRule, GeneratedName:Triggerable);

formulawithcolumntypestest();

joinformulaonetomanynotignorelazyfetchingtest(loginspection:LoggerInspectionRule, GeneratedName:Triggerable);

formulawithpartitionbytest();

joincolumnorformulatest(ssr:StandardServiceRegistry);

joinformulamanytoonelazyfetchingtest();

formulanativequerytest();

formulawithaliastest();

joinformulaonetoonenotignorelazyfetchingtest(loginspection:LoggerInspectionRule, GeneratedName:Triggerable);

employer(name:String [PK], GeneratedName:Employee [PK] #FK to(employee));

dependent(//idattributemappedbyjoincolumndefaultid:DependentId, GeneratedName:Employee #FK to(employee));

person(ssn:String [PK]);

employee(empid:EmployeeId);

dependent(id:DependentId, firstname:Employee #FK to(employee));

policy(id:PolicyId, firstname:Dependent #FK to(dependent));

employee(empid:EmployeeId);

dependent(//defaultcolumnnameisoverriddenname:String [PK], firstname:Employee [PK] #FK to(employee));

policy(id:PolicyId, dep:Dependent #FK to(dependent));

dependent(id:DependentId, emp:Employee #FK to(employee));

employee(empid:EmployeeId);

dependent(//defaultcolumnnamefor"name"attributeisoverriddenid:DependentId, firstname:Employee #FK to(employee));

employee(empid:EmployeeId);

medicalhistory(//overridingnotallowed...//defaultjoincolumnnameisoverridden@mapsidid:String [PK], patient:Person #FK to(person), lastup:Date);

financialhistory(//overridingnotallowed...//defaultjoincolumnnameisoverridden@mapsidid:String [PK], lastup:Date, patient:Person #FK to(person));

person(ssn:String [PK]);

medicalhistory(patient:Person [PK] #FK to(person), lastup:Date);

financialhistory(patient:Person [PK] #FK to(person), lastup:Date);

simple(ssn:String [PK], name:String [PK]);

person(ssn:String [PK]);

medicalhistory(patient:Person [PK] #FK to(person), xraydata:byte);

person(id:PersonId);

medicalhistory(//allattributesmaptorelationship:attributeoverridenotallowedid:PersonId, patient:Person #FK to(person));

person(id:PersonId);

medicalhistory(patient:Person [PK] #FK to(person));

order(id:Long [PK], name:String);

person(serialversionuid:long, id:Integer [PK], name:String, GeneratedName:PersonInfo #FK to(personinfo));

bar(GeneratedName:Foo [PK] #FK to(foo), details:String);

foo(id:Long [PK], name:String, GeneratedName:Bar #FK to(bar));

employee(empid:long [PK], empname:String);

product(id:Long [PK], name:String);

personinfo(serialversionuid:long, id:Person [PK] #FK to(person), info:String);

dependent(emp:Employee [PK] #FK to(employee), name:String);

orderline(GeneratedName:Order [PK] #FK to(order), GeneratedName:Product [PK] #FK to(product), amount:Integer);

compositeidderivedidwithidclasstest();

customerinventory(id:Integer [PK], custid:int [PK], GeneratedName:Customer #FK to(customer), vehicle:Item #FK to(item), totalcost:BigDecimal, quantity:int, version:int);

customerinventorytwo(id:Integer [PK], custid:int [PK], customer:CustomerTwo #FK to(customertwo), vehicle:Item #FK to(item), totalcost:BigDecimal, quantity:int, version:int);

customertwo(query_all:String, query_count:String, query_by_credit:String, bad_credit:String, id:int [PK], firstname:String, lastname:String, contact:String, credit:String, creditlimit:BigDecimal, since:Calendar, balance:BigDecimal, ytdpayment:BigDecimal, version:int);

customer(query_all:String, query_count:String, query_by_credit:String, bad_credit:String, id:int [PK], firstname:String, lastname:String, contact:String, credit:String, creditlimit:BigDecimal, since:Calendar, balance:BigDecimal, ytdpayment:BigDecimal, version:int);

item(query_by_category:String, id:String [PK], name:String, price:BigDecimal, description:String, discount:BigDecimal, category:int, version:int);

dependent(id:DependentId, //@joincolumn(name:Employee #FK to(employee));

employee(empid:long [PK], empname:String);

exclusivedependent(id:DependentId, emp:Employee #FK to(employee));

dependent(name:String [PK], //idattributemappedbyjoincolumndefaultemp:Employee);

employee(empid:long [PK], empname:String, nickname:String);

employee(empid:long [PK], empname:String);

dependent(name:String [PK], emp:Employee [PK] #FK to(employee));

item(query_by_category:String, id:String [PK], name:String, price:BigDecimal, description:String, discount:BigDecimal, category:int, version:int);

customerinventory(id:Integer [PK], GeneratedName:Customer [PK] #FK to(customer), vehicle:Item #FK to(item), totalcost:BigDecimal, quantity:int, version:int);

customer(query_all:String, query_count:String, query_by_credit:String, bad_credit:String, id:int [PK], firstname:String, lastname:String, contact:String, credit:String, creditlimit:BigDecimal, since:Calendar, balance:BigDecimal, ytdpayment:BigDecimal, version:int);

medicalhistory(id:Integer [PK], patient:Person #FK to(person));

person(id:Integer [PK]);

person(firstname:String [PK], lastname:String [PK]);

medicalhistory(patient:Person [PK] #FK to(person));

medicalhistory(//allattributesmaptorelationship:attributeoverridenotallowedid:PersonId, patient:Person #FK to(person));

person(firstname:String [PK], lastname:String [PK]);

dependent(id:DependentId, emp:Employee #FK to(employee));

employee(firstname:String [PK], lastname:String [PK]);

dependent(name:String [PK], firstname:Employee [PK] #FK to(employee));

employee(firstname:String [PK], lastname:String [PK]);

employee(id:long [PK], name:String);

port(id:Long [PK]);

book(id:Integer [PK]);

materializedblobentity(id:Long [PK], name:String, thes:byte);

lobtestentity(id:Long [PK], lobvalue:Blob, qwerty:String);

lobholder(id:Long [PK], locator:Clob, locator:Blob, counter:Integer);

longstringholder(id:Long [PK], name:char, whatever:Character, long:String);

versionedbook(id:Integer [PK], version:Integer);

compiledcode(id:Integer [PK]);

versionedcompiledcode(id:Integer [PK], version:Integer);

entityserialize(id:long [PK], explicitlob:ExplicitSerializable, explicit:ExplicitSerializable, implicit:ImplicitSerializable, explicitoverridingimplicit:ImplicitSerializable);

imageholder(id:Long [PK], longarray:byte, GeneratedName:Dog, picarray:Byte);

document(id:Long [PK], revision:Integer, fulltext:String, shortdescription:String);

a320(javaembeddedversion:String);

voice(id:Integer [PK]);

gsm(frequency:int);

synonymousdictionary();

alltables(tablename:String [PK], daysold:String);

night(id:Integer [PK], duration:long, GeneratedName:Date, GeneratedName:Area);

attrset(id:Long [PK]);

twilight(id:int [PK]);

mark(id:int [PK], value:int);

namedquerytest(game_titles:String);

employee(id:Long [PK], GeneratedName:Employeegroup #FK to(employeegroup), GeneratedName:Attrset #FK to(attrset));

attrvalue(id:Long [PK], value:String);

spaceship(name:String [PK], model:String, speed:double, GeneratedName:Captain, GeneratedName:Dimensions);

casimirparticle(id:Long [PK]);

area(id:Integer [PK], name:String);

employeegroup(id:Long [PK], GeneratedName:Attrset #FK to(attrset));

captain(firstname:String [PK], lastname:String [PK]);

dictionary(id:Integer [PK], name:String, editor:String);

chaos(id:Long [PK], size:Long, name:String, nickname:String);

company(id:Integer [PK], name:String);

music(name:String [PK]);

mergenotnullcollectionusingidentitytest();

cupholder(id:Integer [PK], radius:BigDecimal);

screen(id:Integer [PK], stop:Button, GeneratedName:PowerSupply, connectors:Set<DisplayConnector>);

screen_set<color>(screenID:screen [PK] #FK to screen,set<color>ID:set<color> [PK] #FK to set<color>);

mergenotnullcollectiontest();

powersupply(id:Integer [PK], power:BigDecimal, position:String);

display(id:Integer [PK], brand:String);

minmax(id:Long [PK], value:Integer);

address(blacklistedzipcode:String, line1:String, line2:String, zip:String, state:String, country:String, id:long [PK], internalvalid:boolean, floor:int);

rock(bit:Integer);

tvowner(id:Integer [PK], GeneratedName:Tv #FK to(tv));

tv(serial:String [PK], model:String, size:int, name:String, exp:Date, description:String, lifetime:BigInteger, GeneratedName:Tuner, GeneratedName:Recorder);

ddlwithoutcallbacktest();

color(id:Integer [PK], name:String);

bugsystem(id:Integer [PK], bugs:Set<Bug>);

query(id:Long [PK], includedlocations:Set<Location>);

a(id:int [PK], listofb:List<B>);

c(id:int [PK], comment:String);

widgets(name:String, id:int [PK]);

entitywithanelementcollection(id:Long [PK], somestrings:Set<String>);

person(id:Long [PK], name:String, nicknamesascendingnaturalsort:Set<String>, nicknamesdescendingnaturalsort:Set<String>, addressesascendingnaturalsort:Set<Address>, addressesdescendingnaturalsort:Set<Address>, addressescityascendingsort:Set<Address>, addressescitydescendingsort:Set<Address>);

embeddablecollectionelementwithlazymanytoonetest();

testcourse(testcourseid:Long [PK], title:LocalizedString);

sale(id:Integer [PK], contacts:List<Contact>);

boy(id:Integer [PK], firstname:String, lastname:String, nicknames:Set<String>, hatednames:Set<String>, preferrednames:Set<String>, scorepernickname:Map<String,Integer>, scoreperpreferredname:Map<String,Integer>, favoritenumbers:int, favoritetoys:Set<Toy>, characters:Set<Character>, foods:Map<String,FavoriteFood>, countryattitudes:Set<CountryAttitude>);

raceexecution(id:Integer [PK], poiarrival:Map<Poi,PoiArrival>);

poi(id:Integer [PK], name:String);

matrix(id:Integer [PK], mvalues:SortedMap<Integer,Float>);

owner(id:Integer [PK], elements:Set<String>);

products(id:Integer [PK], widgets:Set<Widgets>);

match(competitor1point:String, version:Integer, playerassn:SocialSecurityNumber);

jpaoverriddenannotationreadertest();

socialsecurityphysicalaccount(number:String, countrycode:String);

company(id:Long [PK], organizations:List<Organization>);

socialsecuritymoralaccount(number:String, countrycode:String);

bustrip(id:BusTripPk, status:Availability, serial:byte, terminustime:Date, players:Map<String,SocialSecurityPhysicalAccount>, roads:List);

tennismatch();

administration(id:Integer [PK], firstname:String, lastname:String, address:String, version:Integer, transientfield:String, default:BusTrip #FK to(bustrip));

country(id:Integer [PK], name:String);

childhierarchy1();

parenthierarchy1();

childhierarchy22();

parenthierarchy22();

address(id:Integer [PK], city:String);

party(partyid:String [PK], GeneratedName:PartyAffiliate #FK to(partyaffiliate));

item(id:Long [PK], name:String);

shipment(id:Long [PK], createdon:Date, GeneratedName:ShipmentState, auction:Item #FK to(item));

onetoonejointablenonoptionaltest();

trousers(id:Integer [PK], zip:TrousersZip #FK to(trouserszip));

onetoonemapsidchangeparenttest(loginspection:LoggerInspectionRule, GeneratedName:Triggerable);

trouserszip(id:Integer [PK], GeneratedName:Trousers #FK to(trousers));

onetoonemapsidtest();

body(id:Integer [PK], GeneratedName:Heart);

personaddress(id:Integer [PK], GeneratedName:Person #FK to(person));

optionalonetoonepkjcquerytest();

computer(id:ComputerPk, cpu:String, serial:SerialNumber #FK to(serialnumber));

show(id:Integer [PK], description:ShowDescription #FK to(showdescription));

owneraddress(id:Integer [PK], GeneratedName:Owner #FK to(owner));

heart(id:Integer [PK]);

onetoonejointableoptionaltest();

person(id:long [PK], GeneratedName:Address #FK to(address));

address(id:long [PK], GeneratedName:Person #FK to(person));

onetoonemapsidjoincolumntest();

optionalonetoonemapsidquerytest();

person(id:Integer [PK], GeneratedName:PersonAddress #FK to(personaddress));

client(id:Integer [PK], name:String, GeneratedName:Address, secondary:Address);

partyaffiliate(partyid:String [PK], GeneratedName:Party #FK to(party), affiliatename:String);

showdescription(id:Integer [PK], GeneratedName:Show #FK to(show));

owner(id:Integer [PK], address:OwnerAddress #FK to(owneraddress));

serialnumber(id:SerialNumberPk [PK], value:String);

owner(deleted:boolean, id:Long [PK], name:String, version:Integer);

manageddevice(name:String, GeneratedName:Device, GeneratedName:DeviceGroupConfig);



devicegroupconfig(name:String);

device(GeneratedName:ManagedDevice, tag:String);

onetoonejointableuniquenesstest(output:File);

americacupclass(GeneratedName:Country);

deck(id:Integer [PK]);

card(id:Integer [PK], GeneratedName:Deck #FK to(deck));

minimaltableentity(tbl_name:String, id:Long [PK]);

autoentity(id:Long [PK]);

minimalsequenceentity(seq_name:String, id:Long [PK]);

dedicatedsequenceentity1(sequence_suffix:String, id:Long [PK]);

completesequenceentity(seq_name:String, id:Long [PK]);

dedicatedsequenceentity2(entity_name:String, id:Long [PK]);

dog(id:Integer [PK], name:String);

planetcheatsheet(GeneratedName:Planet [PK], mass:double, radius:double, numberofinhabitants:long);

hibernatesequenceentity(id:Long [PK], text:String);

pointytooth(id:BigDecimal [PK], GeneratedName:Bunny #FK to(bunny));

soundsystem(id:String [PK], brand:String, model:String);

phone(id:Integer [PK]);

home(id:Long [PK]);

computer(id:Long [PK], serialnumber:String);

monkey(id:String [PK]);

goalkeeper();

twinkletoes(id:BigDecimal [PK], GeneratedName:Bunny #FK to(bunny));

bunny(id:BigDecimal [PK]);

firtree();

furniture(id:Integer [PK]);

breakdance(id:Integer [PK], name:String);

tower();

footballer(firstname:String [PK], lastname:String [PK], club:String);

ball(id:Integer [PK]);

shoe(id:Long [PK]);

department(id:Long [PK]);

store(id:Long [PK]);

computer(id:Long [PK], serialnumber:String);

home(id:Long [PK]);

dog(id:Integer [PK], name:String);

twinkletoes(id:BigDecimal [PK], GeneratedName:Bunny #FK to(bunny));

furniture(id:Integer [PK]);

hotel(id:Long [PK], name:String);

monkey(id:String [PK]);

ball(id:Integer [PK]);

shoe(id:Long [PK]);

store(id:Long [PK]);

department(id:Long [PK]);

firtree();

tower();

footballer(firstname:String [PK], lastname:String [PK], club:String);

breakdance(id:Integer [PK], name:String);

pointytooth(id:BigDecimal [PK], GeneratedName:Bunny #FK to(bunny));

bunny(id:BigDecimal [PK]);

planetcheatsheet(GeneratedName:Planet [PK], mass:double, radius:double, numberofinhabitants:long);

goalkeeper();

soundsystem(id:String [PK], brand:String, model:String);

phone(id:Integer [PK]);

andformulatest(ssr:StandardServiceRegistry);

a320b();

someentity(id:java.util.Date [PK], timedata:java.sql.Time, tsdata:java.sql.Timestamp, data:Byte, chardata:Character);

someotherentity(id:int [PK], data:boolean, data:byte, //settingaarbitraryacterheretomakethistestalsopassagainstpostgresql//postgresqlthrowsotherwiseanexceptionwhenpersistingthenullvalue//org.postgresql.util.psqlexception:error:invalidbytesequenceforencoding"utf8":0x00acterdata:char, data:short, egerdata:int, data:long, data:double, data:float, GeneratedName:Grade);

fruit(id:Integer [PK]);

tomato(size:int);

file(name:String [PK], parent:Folder #FK to(folder));

symboliclink(target:File #FK to(file));

folder();

document(size:int);

document(size:int);

company(companyname:String, companyaddress:String);

programexecution(id:Integer [PK], action:String, applieson:File #FK to(file));

customer(customername:String, customercode:String);

alarm(eventinfo:EventInformation #FK to(eventinformation));

sweater(issweat:boolean);

swimmingpool();

parent(id:Integer [PK], propertyass:Set, financialass:Set);

financialasset(price:double);

asset(id:Integer [PK], GeneratedName:Parent);

file(name:String [PK], parent:Folder #FK to(folder));

account(serialversionuid:long, id:int [PK], number:String, balance:double);

clothing(id:long [PK], size:int, color:String);

client(serialversionuid:long, street:String, code:String, city:String, id:Account #FK to(account));

person(id:int [PK], name:String, firtsname:String);

eventinformation(notificationid:String [PK]);

pool(id:Integer [PK], address:PoolAddress, secondaryaddress:PoolAddress);

symboliclink(target:File #FK to(file));

folder();

propertyasset(price:double);

carrot(length:int);

subclass2();

baseclass(id:long [PK]);

baseclass2(id:long [PK]);

subclass();

document(size:int);

folder();

file(name:String [PK], parent:Folder #FK to(folder));

symboliclink(target:File #FK to(file));

music(id:Integer [PK], avgbeat:int, type:Integer);

papertrash();

funk(starred:int);

rock();

duplicateddiscriminatorvaluetest(discriminator_value:String);

building(id:Integer [PK], street:String);

noise();

house();

trash(id:Integer [PK]);

apple();

vegetable(id:VegetablePk [PK], priceincent:long);

someguy(id:Integer [PK]);

price(id:Integer [PK], amount:Double, currency:String);

papertype(id:Integer [PK], name:String);

gene(id:Integer [PK], state:STE);

dummy(id:Long [PK]);

paper();

dna(id:Integer [PK]);

classes();

wildentity(serialversionuid:long, id:int [PK], property:String);

person(id:Integer [PK], name:String, GeneratedName:Address, bornin:Country);

manager(id:Integer [PK], name:String, employer:InternetProvider #FK to(internetprovider));

book(isbn:String [PK], name:String, GeneratedName:Summary);

alias(id:Long [PK], GeneratedName:Name, source:String);

person(id:Long [PK], name:PersonName);

corptype(id:Integer [PK], type:String);

country(iso2:String [PK], name:String);

person(id:Long [PK], name:String, GeneratedName:Address);

spreaddeal(/***withthetenor.*/long:Swap, /***withthelongertenor.*/short:Swap);

internetprovider(id:Integer [PK], brandname:String, owner:LegalStructure);

vanillaswap(/***identifieroftheinterestrateswap*/instrumentid:String, /***oftheswap(andofbothlegs).*/:Currency, /***fixedleg(cashflowswiththefixedrate).*/:FixedLeg, /***floatingleg(cashflowsboundtoafinancialindex).*/:FloatLeg);

entitywithnestedembeddables(id:Integer [PK], embeda:EmbeddableA);

favoritethings(id:int [PK], web:InternetFavorites);

regionalarticle(pk:RegionalArticlePk [PK], name:String);

wealthyperson(vacationhomes:Set<Address>, legacyvacationhomes:Set<Address>, explicitvacationhomes:Set<Address>);

addresstype(id:Integer [PK], name:String);

nationality(id:Integer [PK], name:String);

author(id:Long [PK], name:String, GeneratedName:Publisher);

nontransactionaldataaccesstest(allowupdateoperationoutsidetransaction:String);

bookstore(id:Long [PK], name:String);

bookstore_set<book>(bookstoreID:bookstore [PK] #FK to bookstore,set<book>ID:set<book> [PK] #FK to set<book>);

unrelatedentity(id:Long [PK], name:String);

book(id:Long [PK], title:String, GeneratedName:Author);

testflushmodewithidentityselfreferencetest();

publisher(id:Long [PK], name:String);

joinedsubclassduplicatefieldswithtreattest();

criteriaquerywithappliedfiltertest(student_id:Identifier);

manytomanywithdynamicfiltertest();

filterdotnametest();

filterwitsubselectfetchmodetest();

onetomanywithdynamicfiltertest();

oraclepaginationtest();

product(id:Long [PK]);

shop(id:Long [PK]);

testentity(id:long [PK]);

queryscrollingwithinheritancetest();

testentity(id:String [PK], value:String);

testentity2(id:String [PK], value:String);

cachelazyloadnotranstest();

product(id:String [PK], name:String, description:String, msrp:BigDecimal, version:int);

inventory(id:int [PK], GeneratedName:Store, GeneratedName:Product, quantity:Long, storeprice:BigDecimal);

store(id:int [PK], name:String, version:int);

customer(salesperson:Employee #FK to(employee), comments:String);

person(id:long [PK], name:String, address:String, zip:String, country:String, heightinches:double, sex:char);

employee(title:String, salary:BigDecimal, manager:Employee #FK to(employee));

user(login:String, passwordexpirydays:Double, silly:String);

outerjointest();

nationalizedscalarquerytest();

zoneddatetimeversiontest();

sybasetimestampcomparisonannotationstest();

localdatetimeversiontest();

instantversiontest();

offsetdatetimeversiontest();

wildflyddlentity(id:Integer [PK], name:String);

cascademergetoproxyentitycopyallowedtest(default:Project);

mergetest();

cascademergetoproxysimpletest(_generator:Random);

lobentity(blob_length:int, id:Long [PK], GeneratedName:Blob);

lobstringtest(long_string_size:int, value1:String, value2:String);

postgresqllobstringtest(value1:String, value2:String, value3:String);

issue(id:Long [PK], description:String, issuenumber:String);

varioustypesentity(id:Integer [PK], data:byte);

isolatedevictableentity(id:Integer [PK], name:String);

thing(id:Long [PK], name:String, mutableproperty:Date);

loadplanbuildertest();

employee(//illustratestheproblematicsituationdescribedinhhh-8980belongsto:Department #FK to(department));

user(id:Integer [PK]);

contractor(//illustratestheproblematicsituationdescribedinhhh-8330reportsto:Department #FK to(department));

department(id:Integer [PK]);

simpleresultsetprocessortest();

encapsulatedcompositeattributeresultsetprocessortest();

encapsulatedcompositeidresultsetprocessortest();

entityassociationresultsetprocessortest();

entitywithnonlazycollectionresultsetprocessortest();

entitywithnonlazyonetomanysetresultsetprocessortest();

entitywithnonlazyonetomanylistresultsetprocessortest();

basicwalkingtest();

lazytomanywheredontuseclasswheretest();

lazyelementcollectionbasicnonuniqueidwheretest();

eagertomanywheretest();

lazymanytomanynonuniqueidwheretest();

lazyonetomanynonuniqueidwheretest();

eagermanytoonefetchmodejoinwheretest();

lazytomanywheretest();

eagertomanywhereuseclasswheretest();

eagertomanywheredontuseclasswheretest();

lazytomanywhereuseclasswheretest();

eagermanytoonefetchmodeselectwheretest();

lazyelementcollectionwithlazymanytoonenonuniqueidwheretest();

lazypersistwithdetachedassociationtest();

globalquotedidentifiersbulkidtest();

abstractbulkcompositeidtest();

abstractbulkidtest();

customsqlschemaresolvingidentitytest();

abstractschemasubstitutionformulatest(schema_placeholder:String);

customsqlschemaresolvingtest();

joinformulaimplicitjointest();

mergecontexttest(session:EventSource);

embeddablecallbacktest();

preinserteventlistenervetounidirectionaltest();

preinserteventlistenervetobidirectionaltest();

irrelevantentity(id:Integer [PK], name:String);

order(ordernumber:int [PK], name:String);

item(itemnumber:int [PK]);

getandisvariantgetterwithtransientannotationtest();

getandisvariantgettertest(ssr:StandardServiceRegistry);

cachekeyimplementationhashcodetest();

readwritecachetest(original_title:String, updated_title:String, bookid:long, endlatch:CountDownLatch, intercepttransaction:AtomicBoolean);

associateentitywithtwosessionstest(loginspection:LoggerInspectionRule);

dirtycheckingwithembeddedongettertest();

dirtycheckingwithmappedsuperclasstest();

dirtycheckingwithembeddableandmappedsuperclasstest();

dirtycheckingwithembeddedtest();

persistenceunitoverridestests();

basiccriteriaexecutiontests();

synchronizedspacetests();

simpleentity(GeneratedName:Pattern, id:Long [PK], name:String);

extrastatetest(/***storingitasafieldsoitcanbeaccessedfromtheentitysetter.*/:Session);

informixfunctiontest(GeneratedName:Event);

annotationmappednopackageentity(id:Integer [PK], name:String);

any(id:long [PK], prop:String);

employee(name:String, salary:float, GeneratedName:Seniority, start:Date, GeneratedName:Department, manager:Employee #FK to(employee), annotations:Map<String,String>, Employee: String);

product(id:Long [PK], name:String, PRODUCT_TYPE: String);

step(id:Integer [PK], parent:Step #FK to(step), type: String);

abstractentity(id:Integer [PK]);

abstractowner(id:Long [PK]);

parententity(id:Long [PK], tom:ChildEntity #FK to(childentity), ben:ChildEntity #FK to(childentity), CLASS_ID: String);

product(description:String);

comment(id:Long [PK], GeneratedName:Post, name:String, GeneratedName:Forum, DTYPE: String);

drill(id:int [PK], DRILL_TYPE: String);

b(id:Integer [PK], GeneratedName:A);

animal(name:String, id:Long [PK]);

plane(id:Long [PK], nbrofseats:int, planetype: String);

hardware(parent:Hardware #FK to(hardware), DeviceType: String);

file(id:long [PK], GeneratedName:Location #FK to(location), markets:Set<Market>, phonenumbers:Set<String>);

person(id:Long [PK], GeneratedName:Address, person_type: String);



** PROGRAM TYPE: JPA+Hibernate(Hybrid)