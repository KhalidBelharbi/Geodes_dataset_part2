ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> Topic =>=>=> RelationalSchema.Table>> topic;
ClassDiagram.Class>> Post =>=>=> RelationalSchema.Table>> post;
ClassDiagram.Class>> LoginLog =>=>=> RelationalSchema.Table>> loginlog;
ClassDiagram.Class>> MainPost =>=>=> RelationalSchema.Table>> mainpost;
ClassDiagram.Class>> Board =>=>=> RelationalSchema.Table>> board;
ClassDiagram.Attribut>> User./***锁定用户对应的状态值*/user_lock:int =>=>=> RelationalSchema.Column>> user./***锁定用户对应的状态值*/user_lock;
ClassDiagram.Attribut>> User./***用户解锁对应的状态值*/user_unlock:int =>=>=> RelationalSchema.Column>> user./***用户解锁对应的状态值*/user_unlock;
ClassDiagram.Attribut>> User./***管理员类型*/forum_admin:int =>=>=> RelationalSchema.Column>> user./***管理员类型*/forum_admin;
ClassDiagram.Attribut>> User./***普通用户类型*/normal_user:int =>=>=> RelationalSchema.Column>> user./***普通用户类型*/normal_user;
ClassDiagram.Attribut>> User.userid:int =>=>=> RelationalSchema.Column>> user.userid PRIMARY KEY;
ClassDiagram.Attribut>> User.username:String =>=>=> RelationalSchema.Column>> user.username;
ClassDiagram.Attribut>> User.usertype:int =>=>=> RelationalSchema.Column>> user.usertype;
ClassDiagram.Attribut>> User.lastip:String =>=>=> RelationalSchema.Column>> user.lastip;
ClassDiagram.Attribut>> User.lastvisit:Date =>=>=> RelationalSchema.Column>> user.lastvisit;
ClassDiagram.Attribut>> User.password:String =>=>=> RelationalSchema.Column>> user.password;
ClassDiagram.Attribut>> User.locked:int =>=>=> RelationalSchema.Column>> user.locked;
ClassDiagram.Attribut>> User.credit:int =>=>=> RelationalSchema.Column>> user.credit;
ClassDiagram.Attribut>> Topic./***精华主题帖子*/digest_topic:int =>=>=> RelationalSchema.Column>> topic./***精华主题帖子*/digest_topic;
ClassDiagram.Attribut>> Topic./***普通的主题帖子*/not_digest_topic:int =>=>=> RelationalSchema.Column>> topic./***普通的主题帖子*/not_digest_topic;
ClassDiagram.Attribut>> Topic.topicid:int =>=>=> RelationalSchema.Column>> topic.topicid PRIMARY KEY;
ClassDiagram.Attribut>> Topic.topictitle:String =>=>=> RelationalSchema.Column>> topic.topictitle;
ClassDiagram.Attribut>> Topic.boardid:int =>=>=> RelationalSchema.Column>> topic.boardid;
ClassDiagram.Attribut>> Topic.GeneratedName:MainPost =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> Topic.lastpost:Date =>=>=> RelationalSchema.Column>> topic.lastpost;
ClassDiagram.Attribut>> Topic.createtime:Date =>=>=> RelationalSchema.Column>> topic.createtime;
ClassDiagram.Attribut>> Topic.views:int =>=>=> RelationalSchema.Column>> topic.views;
ClassDiagram.Attribut>> Topic.replies:int =>=>=> RelationalSchema.Column>> topic.replies;
ClassDiagram.Attribut>> Topic.digest:int =>=>=> RelationalSchema.Column>> topic.digest;
ClassDiagram.Attribut>> Post.postid:int =>=>=> RelationalSchema.Column>> post.postid PRIMARY KEY;
ClassDiagram.Attribut>> Post.posttitle:String =>=>=> RelationalSchema.Column>> post.posttitle;
ClassDiagram.Attribut>> Post.posttext:String =>=>=> RelationalSchema.Column>> post.posttext;
ClassDiagram.Attribut>> Post.boardid:int =>=>=> RelationalSchema.Column>> post.boardid;
ClassDiagram.Attribut>> Post.createtime:Date =>=>=> RelationalSchema.Column>> post.createtime;
ClassDiagram.Attribut>> LoginLog.loginlogid:int =>=>=> RelationalSchema.Column>> loginlog.loginlogid PRIMARY KEY;
ClassDiagram.Attribut>> LoginLog.login:Date =>=>=> RelationalSchema.Column>> loginlog.login;
ClassDiagram.Attribut>> LoginLog.ip:String =>=>=> RelationalSchema.Column>> loginlog.ip;
ClassDiagram.Attribut>> Board.boardid:int =>=>=> RelationalSchema.Column>> board.boardid PRIMARY KEY;
ClassDiagram.Attribut>> Board.boardname:String =>=>=> RelationalSchema.Column>> board.boardname;
ClassDiagram.Attribut>> Board.boarddesc:String =>=>=> RelationalSchema.Column>> board.boarddesc;
ClassDiagram.Attribut>> Board.topicnum:int =>=>=> RelationalSchema.Column>> board.topicnum;
Many-To-Many relationship between ClassDiagram.Class>>User  and ClassDiagram.Class>>set<board>: t_board_manager(user_id:User [PK] #FK to User,board_id:set<board> [PK] #FK to set<board>);
Many-To-One relationship from ClassDiagram.Class>>Topic  to ClassDiagram.Class>>user represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Post  to ClassDiagram.Class>>user represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Post  to ClassDiagram.Class>>topic represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>LoginLog  to ClassDiagram.Class>>user represented by ClassDiagram.Atrribute>>GeneratedName;
Inheritance based on SINGLE-TABLE strategy (PUSH-UP): ROOT>>Post   Descriminator>>post_type: String ;
