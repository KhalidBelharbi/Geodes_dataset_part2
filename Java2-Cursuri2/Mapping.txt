ClassDiagram.Class>> Persoana =>=>=> RelationalSchema.Table>> persoana;
ClassDiagram.Class>> Student =>=>=> RelationalSchema.Table>> student;
ClassDiagram.Class>> Avocat =>=>=> RelationalSchema.Table>> avocat;
ClassDiagram.Class>> Programator =>=>=> RelationalSchema.Table>> programator;
ClassDiagram.Class>> Ciocolata =>=>=> RelationalSchema.Table>> ciocolata;
ClassDiagram.Class>> Bere =>=>=> RelationalSchema.Table>> bere;
ClassDiagram.Class>> Produs =>=>=> RelationalSchema.Table>> produs;
ClassDiagram.Attribut>> Persoana.id:NumePrenumeId =>=>=> RelationalSchema.Column>> persoana.id;
ClassDiagram.Attribut>> Persoana.varsta:int =>=>=> RelationalSchema.Column>> persoana.varsta;
ClassDiagram.Attribut>> Student.nume:String =>=>=> RelationalSchema.Column>> student.nume PRIMARY KEY;
ClassDiagram.Attribut>> Student.prenume:String =>=>=> RelationalSchema.Column>> student.prenume PRIMARY KEY;
ClassDiagram.Attribut>> Avocat.vechime:int =>=>=> RelationalSchema.Column>> avocat.vechime;
ClassDiagram.Attribut>> Programator.limbaj:String =>=>=> RelationalSchema.Column>> programator.limbaj;
ClassDiagram.Attribut>> Ciocolata.zahar:int =>=>=> RelationalSchema.Column>> ciocolata.zahar;
ClassDiagram.Attribut>> Bere.alcool:int =>=>=> RelationalSchema.Column>> bere.alcool;
ClassDiagram.Attribut>> Produs.id:int =>=>=> RelationalSchema.Column>> produs.id PRIMARY KEY;
ClassDiagram.Attribut>> Produs.nume:String =>=>=> RelationalSchema.Column>> produs.nume;
Inheritance based on Table-Per-Class strategy (PUSH-DOWN): ROOT>>Produs  ;
