ClassDiagram.Class>> EmployeeLeaveMaster =>=>=> RelationalSchema.Table>> employeeleavemaster;
ClassDiagram.Class>> Role =>=>=> RelationalSchema.Table>> role;
ClassDiagram.Class>> aclSid =>=>=> RelationalSchema.Table>> aclsid;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> authority =>=>=> RelationalSchema.Table>> authority;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> Base =>=>=> RelationalSchema.Table>> base;
ClassDiagram.Class>> Holiday =>=>=> RelationalSchema.Table>> holiday;
ClassDiagram.Class>> LeaveStatus =>=>=> RelationalSchema.Table>> leavestatus;
ClassDiagram.Class>> LeaveRequest =>=>=> RelationalSchema.Table>> leaverequest;
ClassDiagram.Attribut>> EmployeeLeaveMaster.leaveyear:int =>=>=> RelationalSchema.Column>> employeeleavemaster.leaveyear;
ClassDiagram.Attribut>> EmployeeLeaveMaster.availableleavebalance:int =>=>=> RelationalSchema.Column>> employeeleavemaster.availableleavebalance;
ClassDiagram.Attribut>> EmployeeLeaveMaster.openingleavebalance:int =>=>=> RelationalSchema.Column>> employeeleavemaster.openingleavebalance;
ClassDiagram.Attribut>> Role./***/serialversionuid:long =>=>=> RelationalSchema.Column>> role./***/serialversionuid;
ClassDiagram.Attribut>> Role.role:String =>=>=> RelationalSchema.Column>> role.role;
ClassDiagram.Attribut>> aclSid./***/serialversionuid:long =>=>=> RelationalSchema.Column>> aclsid./***/serialversionuid;
ClassDiagram.Attribut>> aclSid.principal:String =>=>=> RelationalSchema.Column>> aclsid.principal;
ClassDiagram.Attribut>> aclSid.sid:String =>=>=> RelationalSchema.Column>> aclsid.sid;
ClassDiagram.Attribut>> User./***/serialversionuid:long =>=>=> RelationalSchema.Column>> user./***/serialversionuid;
ClassDiagram.Attribut>> User.username:String =>=>=> RelationalSchema.Column>> user.username;
ClassDiagram.Attribut>> User.password:String =>=>=> RelationalSchema.Column>> user.password;
ClassDiagram.Attribut>> User.enabled:int =>=>=> RelationalSchema.Column>> user.enabled;
ClassDiagram.Attribut>> User.email:String =>=>=> RelationalSchema.Column>> user.email;
ClassDiagram.Attribut>> authority./***/serialversionuid:long =>=>=> RelationalSchema.Column>> authority./***/serialversionuid;
ClassDiagram.Attribut>> authority.authority:String =>=>=> RelationalSchema.Column>> authority.authority;
ClassDiagram.Attribut>> Employee.serialversionuid:long =>=>=> RelationalSchema.Column>> employee.serialversionuid;
ClassDiagram.Attribut>> Employee.employeename:String =>=>=> RelationalSchema.Column>> employee.employeename;
ClassDiagram.Attribut>> Employee.employeeid:String =>=>=> RelationalSchema.Column>> employee.employeeid;
ClassDiagram.Attribut>> Employee.email:String =>=>=> RelationalSchema.Column>> employee.email;
ClassDiagram.Attribut>> Base./***/serialversionuid:long =>=>=> RelationalSchema.Column>> base./***/serialversionuid;
ClassDiagram.Attribut>> Base.id:String =>=>=> RelationalSchema.Column>> base.id PRIMARY KEY;
ClassDiagram.Attribut>> Base.createdon:DateTime =>=>=> RelationalSchema.Column>> base.createdon;
ClassDiagram.Attribut>> Base.modifiedon:DateTime =>=>=> RelationalSchema.Column>> base.modifiedon;
ClassDiagram.Attribut>> Base.isdeleted:boolean =>=>=> RelationalSchema.Column>> base.isdeleted;
ClassDiagram.Attribut>> Holiday.holidayname:String =>=>=> RelationalSchema.Column>> holiday.holidayname;
ClassDiagram.Attribut>> Holiday.holidaydate:DateTime =>=>=> RelationalSchema.Column>> holiday.holidaydate;
ClassDiagram.Attribut>> LeaveStatus.statusvalue:String =>=>=> RelationalSchema.Column>> leavestatus.statusvalue;
ClassDiagram.Attribut>> LeaveRequest.//@format(pattern:DateTime =>=>=> RelationalSchema.Column>> leaverequest.//@format(pattern;
ClassDiagram.Attribut>> LeaveRequest.//@format(pattern:DateTime =>=>=> RelationalSchema.Column>> leaverequest.//@format(pattern;
ClassDiagram.Attribut>> LeaveRequest.//todo-thisshouldbeamastertypeofleave:String =>=>=> RelationalSchema.Column>> leaverequest.//todo-thisshouldbeamastertypeofleave;
ClassDiagram.Attribut>> LeaveRequest.leavedurationtype:String =>=>=> RelationalSchema.Column>> leaverequest.leavedurationtype;
ClassDiagram.Attribut>> LeaveRequest.remarks:String =>=>=> RelationalSchema.Column>> leaverequest.remarks;
ClassDiagram.Attribut>> LeaveRequest.availableleavebalance:int =>=>=> RelationalSchema.Column>> leaverequest.availableleavebalance;
ClassDiagram.Attribut>> LeaveRequest.leaveduration:int =>=>=> RelationalSchema.Column>> leaverequest.leaveduration;
ClassDiagram.Attribut>> LeaveRequest.log:String =>=>=> RelationalSchema.Column>> leaverequest.log;
Many-To-One relationship from ClassDiagram.Class>>EmployeeLeaveMaster  to ClassDiagram.Class>>employee represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-Many relationship between ClassDiagram.Class>>User  and ClassDiagram.Class>>Role: user_roles(user_id:User [PK] #FK to User,role_id:Role [PK] #FK to Role);
Many-To-One relationship from ClassDiagram.Class>>authority  to ClassDiagram.Class>>User represented by ClassDiagram.Atrribute>>name;
Many-To-One relationship from ClassDiagram.Class>>Employee  to ClassDiagram.Class>>employee represented by ClassDiagram.Atrribute>>manager;
One-To-Many relationship from ClassDiagram.Class>>Employee  to ClassDiagram.Class>>Set<Employee>;
One-To-One relationship between ClassDiagram.Class>>Employee  to ClassDiagram.Class>>User represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>LeaveRequest  to ClassDiagram.Class>>employee represented by ClassDiagram.Atrribute>>requestorname;
Many-To-One relationship from ClassDiagram.Class>>LeaveRequest  to ClassDiagram.Class>>employee represented by ClassDiagram.Atrribute>>approvername;
Many-To-One relationship from ClassDiagram.Class>>LeaveRequest  to ClassDiagram.Class>>leavestatus represented by ClassDiagram.Atrribute>>GeneratedName;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Base  ;
