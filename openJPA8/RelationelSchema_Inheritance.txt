constraintdigits(id:long [PK], twodigits:BigDecimal, //@digits(5,5)constraintisonthegetterfivedigits:BigDecimal);

defgrpentity(id:int [PK], //notnullconstraintwithdefaultvalidationgroupdgname:String);

book(id:int, title:String, pages:int, GeneratedName:Publisher);

constraintsize(id:long [PK], my:String, mymap:Map<String,String>);

constraintnull(id:long [PK], nullrequired:String, //@notnullconstraintisonthegetternullinvalid:String);

nondefgrpentity(id:int [PK], //notnullconstraintwithdefaultvalidationgroupdgname:String, //notnullconstraintwithspecifiedvalidationgroupndgname:String);

customer(shipping:Address #FK to(address), billing:Address #FK to(address));

simpleentity(serialversionuid:long, id:long [PK], name:String, value:String);

constraintpattern(id:long [PK], my:String, )constraintisonthegetterzipcode:String);

address(id:long [PK], //@notnullisoniaddressgetterstreetaddress:String, //@notnullisoniaddressgettercity:String, //@notnullisoniaddressgetterstate:String, //@notnullisoniaddressgetterpostalcode:String, phonenumber:String);

image(id:int [PK], filename:String, GeneratedName:Location);

constraintnumber(id:long [PK], minzero:long, //@max(value:long);

constraintdecimal(id:long [PK], minzero:BigDecimal, //@decimalmax(value:BigDecimal);

mixedgrpentity(id:int [PK], defnotnull:String, vg1notnull:String, vg2notnull:String, vg12notnull:String);

constraintboolean(id:long [PK], truerequired:Boolean, //@assertfalseconstraintisonthegetterfalserequired:Boolean);

constraintdates(id:long [PK], future:Date, //@pastconstraintisonthegetterpastcalendar:GregorianCalendar);

person(id:long [PK], //@notnullisonipersongetterfirstname:String, //@notnullisonipersongetterlastname:String, home:Address #FK to(address));



** PROGRAM TYPE: JPA+Hibernate(Hybrid)