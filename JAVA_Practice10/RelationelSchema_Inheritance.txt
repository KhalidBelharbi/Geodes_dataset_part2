classpropertyholder(GeneratedName:PersistentClass, joins:Map<String,Join>, joinsperrealtablename:Map<String,Join>, GeneratedName:EntityBinder, inheritancestateperclass:Map<XClass,InheritanceState>, attributeconversioninfomap:Map<String,AttributeConversionInfo>);

annotationbinder(log:CoreMessageLogger, default_cache_concurrency_strategy:CacheConcurrencyStrategy);

entitybinder(log:CoreMessageLogger, natural_id_cache_suffix:String, name:String, annotatedclass:XClass, GeneratedName:PersistentClass, GeneratedName:Mappings, discriminatorvalue:String, forcediscriminator:Boolean, insertablediscriminator:Boolean, dynamicinsert:boolean, dynamicupdate:boolean, explicithibernateentityannotation:boolean, GeneratedName:OptimisticLockType, GeneratedName:PolymorphismType, selectbeforeupdate:boolean, batchsize:int, lazy:boolean, proxyclass:XClass, where:String, secondarytables:java.util.Map<String,Join>, secondarytablejoins:java.util.Map<String,Object>, cacheconcurrentstrategy:String, cacheregion:String, naturalidcacheregion:String, filters:List<Filter>, GeneratedName:InheritanceState, ignoreidannotations:boolean, cachelazyproperty:boolean, property:AccessType, wrapidsinembeddedcomponents:boolean, subselect:String, sec_tbl_ns_helper:SecondaryTableNamingStrategyHelper);

resultsetmappingsecondpass(log:CoreMessageLogger, ann:SqlResultSetMapping, GeneratedName:Mappings, isdefault:boolean);

entitymocker(log:CoreMessageLogger, entity:JaxbEntity);

listenermocker(GeneratedName:ClassInfo);

entityhierarchybuilder(object:DotName);

enhancementtask(filesets:List<FileSet>, //enhanceralsobuildsctclassinstances.mightmakesensetosharethese().:ClassPool, GeneratedName:Enhancer);

mergecontexttest(session:EventSource);

extrastatetest(/***storingitasafieldsoitcanbeaccessedfromtheentitysetter.*/:Session);

order(ordernumber:int [PK]);

item(itemnumber:int [PK]);

order(id:Long [PK], GeneratedName:Customer #FK to(customer), version:long);

customer(id:Long [PK], version:long);

entitywithbasiccollections(id:Long [PK], name:String, thebag:Collection<String>, theset:Set<String>);

manytooneentity(id:Long [PK], thename:String, GeneratedName:SimpleEntity #FK to(simpleentity));

simpleentitywithsimplecomponent(id:Long [PK], name:String, GeneratedName:SimpleComponent);

simpleversionedentity(id:Long [PK], name:String, version:long);

simpleentity(id:Long [PK], name:String);

simpleentitysubclass();

lobbindingtests();

uniqueconstraintbindingtest();

embeddedidtest();

whereclausetest();

enumeratedbindingtest();

rowidbindingtests();

embeddablebindingtest();

quotedidentifiertest(ormpath:String);

inheritancebindingtest();

proxybindingtest();

tablenametest();

mappedsuperclasstest();

cachebindingtest();

identifiergeneratortest();

batchsizebindingtest();

mapsidtest();

temporalbindingtest();

accessbindingtest();

synchronizebindingtest();

customsqlbindingtest();

secondarytabletest();

entityhierarchytest();

embeddablehierarchytest();

jandexhelpertest(serviceregistry:StandardServiceRegistryImpl, GeneratedName:ClassLoaderService);

generictypediscoverytest();

author(id:Long [PK], name:String);

defaultconfigurationhelpertest();

book(id:Long [PK], publish:Date, GeneratedName:Author #FK to(author), topics:List<Topic>, version:Long);

star(id:int);

simpleentity(id:Long [PK], name:String);

sorttest();

joinedsubclasswithimplicitdiscriminatortest();

joinedsubclasswithignoredexplicitdiscriminatortest();

joinedsubclasswithexplicitdiscriminatortest();

inheritingentity(somevalue:String);



pooledhilosequenceidentifiertest(log:Logger);

defaultgeneratedvaluetest();

configurationserializationtest(files:String);

gate(id:Long [PK]);

portal(id:Long [PK]);

palmtree(leavesize:double);

tree(id:Long [PK]);

window(id:Long [PK]);

wrongcircularitydetectiontest();

subentity(id:Long [PK], name:String, active:boolean, somenumber:long);

customer(query_all:String, query_count:String, query_by_credit:String, bad_credit:String, id:int [PK], firstname:String, lastname:String, contact:String, credit:String, creditlimit:BigDecimal, since:Calendar, balance:BigDecimal, ytdpayment:BigDecimal, GeneratedName:Address, version:int);

customerinventory(query_count:String, id:Long [PK], custid:int [PK], GeneratedName:Customer #FK to(customer), vehicle:String #FK to(string), totalcost:BigDecimal, quantity:int, version:int);

simpleentity(id:Long [PK], name:String, active:boolean, somenumber:long, somestrings:List<String>, GeneratedName:Address);

superentity();

myentity(id:Long [PK], name:String);

tablea(id:int [PK], test:String, test2:String);



atable(firstid:Integer [PK]);

item(name:String [PK]);

listactionrole(role:Code [PK], GeneratedName:Role #FK to(role));

role(GeneratedName:Code [PK]);

bid(amount:float [PK], GeneratedName:Item [PK] #FK to(item));

unrelatedentity(id:Long [PK], name:String);

bookstore(id:Long [PK], name:String);

bookstore_Set(bookstoreID:bookstore [PK] #FK to bookstore,SetID:Set [PK] #FK to Set);

book(id:Long [PK], title:String, GeneratedName:Author);

author(id:Long [PK], name:String, GeneratedName:Publisher);

publisher(id:Long [PK], name:String);

contact(id:Long [PK], type:String, firstname:String, lastname:String, GeneratedName:Folder #FK to(folder));

folder(id:Long [PK], name:String, owner:String);

category(id:Integer [PK], name:String);

product2(id:Integer [PK], description:String, GeneratedName:Category #FK to(category));

domainadmin(domainname:String [PK], adminuser:String [PK], nickname:String);

highestbid(name:String [PK], amount:double);

item(id:long [PK], name:String);

bid(id:int [PK], itemid:long, amount:double);

gaskey(name:String [PK]);

atmosphere(id:Integer [PK], colorperdate:Map<Date,String>, colorperlevel:Map<Level,String>, composition:Map<Gas,Double>);

atmosphere_Map(atmosphereID:atmosphere [PK] #FK to atmosphere,MapID:Map [PK] #FK to Map);gas_per_key(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,Map_ID:Map [PK] #FK to Map);atm_gas_def(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,Map_ID:Map [PK] #FK to Map);atm_gas_defleg(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,Map_ID:Map [PK] #FK to Map);gas_p_key_def(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,Map_ID:Map [PK] #FK to Map);

addressentry(person:AddressEntryPk, street:String, city:String, book:AddressBook #FK to(addressbook), directory:AlphabeticalDirectory #FK to(alphabeticaldirectory));

painting(sizex:int, sizey:int, name:String [PK], painter:String [PK]);

news(id:Integer [PK], title:String, detail:String);

gas(id:Integer [PK], name:String);

currency(id:Integer [PK], currency:String);

generationuser(id:int [PK] #FK to User, id:int [PK]);

pressreleaseagency(id:Integer [PK], name:String);

pressreleaseagency_id(pressreleaseagency_id:PressReleaseAgency [PK] #FK to PressReleaseAgency,news_id:Map [PK] #FK to Map);

drawer(id:Long [PK]);

software(name:String [PK]);

exchangeoffice(id:Integer [PK], exchangerates:Map<ExchangeRateKey,ExchangeRate>, exchangeratefees:Map<ExchangeRateKey,BigDecimal>);

alphabeticaldirectory(id:Integer [PK], name:String);

atmosphere(id:Integer [PK], colorperdate:Map<Date,String>, colorperlevel:Map<Level,String>, composition:Map<Gas,Double>);

atmosphere_Map(atmosphereID:atmosphere [PK] #FK to atmosphere,MapID:Map [PK] #FK to Map);gas_per_key(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,Map_ID:Map [PK] #FK to Map);atm_gas_def(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,Map_ID:Map [PK] #FK to Map);atm_gas_defleg(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,Map_ID:Map [PK] #FK to Map);gas_p_key_def(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,Map_ID:Map [PK] #FK to Map);

training(id:Long [PK]);

training_Map(trainingID:training [PK] #FK to training,MapID:Map [PK] #FK to Map);

wardrobe(id:Long [PK]);

version(id:Integer [PK], codename:String, number:String, GeneratedName:Software);

newspaper(id:Integer [PK], name:String);

newspaper_Map(newspaperID:newspaper [PK] #FK to newspaper,MapID:Map [PK] #FK to Map);

painter(id:Integer [PK]);

addressbook(id:Integer [PK], owner:String);

generationgroup(id:int [PK], GeneratedName:Generation);

exchangerate(id:Integer [PK], rate:double, key:ExchangeRateKey, parent:ExchangeOffice);

trainee(id:Long [PK], name:String);

dress(id:Integer [PK]);

display(id:Integer [PK], brand:String);

color(id:Integer [PK], name:String);

tv(serial:String [PK], model:String, size:int, name:String, exp:Date, description:String, lifetime:BigInteger, GeneratedName:Tuner, GeneratedName:Recorder);

minmax(id:Long [PK], value:Integer);

cupholder(id:Integer [PK], radius:BigDecimal);

range(id:Long [PK], value:Integer);

screen(id:Integer [PK], stop:Button, GeneratedName:PowerSupply, connectors:Set<DisplayConnector>);

screen_Set(screenID:screen [PK] #FK to screen,SetID:Set [PK] #FK to Set);

tvowner(id:Integer [PK], GeneratedName:Tv #FK to(tv));

rock(bit:Integer);

powersupply(id:Integer [PK], power:BigDecimal, position:String);

music(name:String [PK]);

address(blacklistedzipcode:String, line1:String, line2:String, zip:String, state:String, country:String, id:long [PK], internalvalid:boolean, floor:int);

mark(id:int [PK], value:int);

spaceship(name:String [PK], model:String, speed:double, GeneratedName:Captain, GeneratedName:Dimensions);

captain(firstname:String [PK], lastname:String [PK]);

attrvalue(id:Long [PK], value:String);

employee(id:Long [PK], GeneratedName:Employeegroup #FK to(employeegroup), GeneratedName:Attrset #FK to(Set));

casimirparticle(id:Long [PK]);

employeegroup(id:Long [PK], GeneratedName:Attrset #FK to(Set));

twilight(id:int [PK]);

chaos(id:Long [PK], size:Long, name:String, nickname:String);

alltables(tablename:String [PK], daysold:String);

synonymousdictionary();

night(id:Integer [PK], duration:long, GeneratedName:Date, GeneratedName:Area);

attrset(id:Long [PK]);

area(id:Integer [PK], name:String);

dictionary(id:Integer [PK], name:String, editor:String);

customer(id:long [PK], name:String, customernumber:long, last:Order #FK to(order));

customer5(id:long [PK], name:String, customernumber:long);

supporttickets(id:long [PK], description:String, resolution:String);

country(id:Integer [PK], name:String);

customer4(id:long [PK], name:String, customernumber:long);

customer2(id:long [PK], name:String, customernumber:long);

customer3(id:long [PK], name:String, customernumber:long);

order(id:long [PK], ordernumber:long, delivery:Date, GeneratedName:Country #FK to(country));

investor(id:Long [PK], investments:List<Investment>);

customer(id:Long [PK], investments:List<Investment>);

customer(id:Long [PK], investments:List<Investment>);

incorrectentity(name:String);

sky(id:Long [PK], color:String, day:String, month:String);

minimaltableentity(tbl_name:String, id:Long [PK]);

autoentity(id:Long [PK]);

dedicatedsequenceentity1(sequence_suffix:String, id:Long [PK]);

minimalsequenceentity(seq_name:String, id:Long [PK]);

completesequenceentity(seq_name:String, id:Long [PK]);

dedicatedsequenceentity2(entity_name:String, id:Long [PK]);

footballer(firstname:String [PK], lastname:String [PK], club:String);

department(id:Long [PK]);

pointytooth(id:BigInteger [PK], GeneratedName:Bunny #FK to(bunny));

monkey(id:String [PK]);

furniture(id:Integer [PK]);

goalkeeper();

hotel(id:Long [PK], name:String);

firtree();

soundsystem(id:String [PK], brand:String, model:String);

planetcheatsheet(GeneratedName:Planet [PK], mass:double, radius:double, numberofinhabitants:long);

breakdance(id:Integer [PK], name:String);

store(id:Long [PK]);

home(id:Long [PK]);

twinkletoes(id:BigInteger [PK], GeneratedName:Bunny #FK to(bunny));

computer(id:Long [PK], serialnumber:String);

tower();

shoe(id:Long [PK]);

ball(id:Integer [PK]);

bunny(id:BigInteger [PK]);

phone(id:Integer [PK]);

dog(id:Integer [PK], name:String);

furniture(id:Integer [PK]);

store(id:Long [PK]);

home(id:Long [PK]);

planetcheatsheet(GeneratedName:Planet [PK], mass:double, radius:double, numberofinhabitants:long);

tower();

monkey(id:String [PK]);

dog(id:Integer [PK], name:String);

bunny(id:BigInteger [PK]);

ball(id:Integer [PK]);

twinkletoes(id:BigInteger [PK], GeneratedName:Bunny #FK to(bunny));

shoe(id:Long [PK]);

firtree();

phone(id:Integer [PK]);

department(id:Long [PK]);

footballer(firstname:String [PK], lastname:String [PK], club:String);

pointytooth(id:BigInteger [PK], GeneratedName:Bunny #FK to(bunny));

soundsystem(id:String [PK], brand:String, model:String);

goalkeeper();

computer(id:Long [PK], serialnumber:String);

hibernatesequenceentity(id:Long [PK], text:String);

breakdance(id:Integer [PK], name:String);

car(id:long [PK], model:String, region_code:MarketRegion #FK to(Region));

marketregion(id:long [PK], regioncode:String);

sportcar();

organisation(idorganisation:Long [PK], name:String);

b(id:Long [PK], name:String);

tiger(id:Integer [PK], name:String);

organisationuser(sometext:String, GeneratedName:Organisation);

street(id:Integer [PK], streetname:String, streetnamecopy:String, GeneratedName:City);

employee(id:Integer [PK]);

box(id:int [PK]);



asset(idasset:Integer [PK], test:Integer [PK], GeneratedName:Employee #FK to(employee));

soldier(id:Integer [PK], name:String, GeneratedName:Troop);

user(id:Long [PK], name:String, GeneratedName:Forum);

transaction(id:long [PK], code:String, account:BankAccount #FK to(bankaccount));

visitor(id:Long [PK], firstname:String, lastname:String);

troop(id:Integer [PK], name:String);

parent(id:ParentPk [PK], age:int);

item(id:int [PK], code:String, sortfield:int, GeneratedName:Box #FK to(box));

politician(name:String [PK], party:PoliticalParty #FK to(politicalparty));

computer(computername:String);

forum(id:Long [PK], name:String);

c(id:Long [PK], name:String);

trainer(id:Integer [PK], name:String);

orderitem(schoolid:String [PK], academicyear:Integer [PK], dayno:Integer [PK], dayname:String, GeneratedName:Order);

post();

a(id:Long [PK], name:String);

person(idperson:Long [PK], firstname,lastname:String);

bankaccount(id:long [PK]);

model(id:Integer [PK], GeneratedName:Manufacturer #FK to(manufacturer));

child(id:Integer [PK], ismale:Parent #FK to(parent), favoritesuperhero:String, favoritesinger:String);

politicalparty(name:String [PK]);

zoo(id:Long [PK], name:String);

city(id:Integer [PK], name:String);

order(schoolid:String [PK], schoolidsort:Integer, academicyear:Integer [PK]);

monkey(id:Integer [PK], name:String);

storm(id:Integer [PK], start:Location, end:Location, stormname:String);

printercable(id:Long [PK], GeneratedName:Printer);

bug(id:int [PK], title:String);

`bug_category`(Bug_ID:Bug [PK] #FK to Bug,List_ID:List [PK] #FK to List);

printer(id:Long [PK]);

category(id:int [PK], title:String);

contactimpl(id:Integer [PK], name:String);

userimpl(id:Integer [PK]);

flight(id:String [PK]);

codedpairsetholder(serialversionuid:long, id:Long [PK], code:String, pairs:Set<PersonPair>);

person(serialversionuid:long, id:Long [PK], name:String);

child(/***/id:Long [PK], /***/:Parent #FK to(parent));

tooth(id:Integer [PK], type:String, leftneighbour:Tooth #FK to(tooth), rightneighbour:Tooth #FK to(tooth), GeneratedName:Mouth #FK to(mouth));

codedpairholder(id:Long [PK], code:String, pair:PersonPair);

parent(/***/id:Long [PK], /***/default:Child #FK to(child));

mouth(id:Integer [PK], size:int);

uniqueconstrainttest();

uniqueconstraintvalidationtest();

house(id:Long [PK], cost:Integer);

room(id:Long [PK], name:String);

cuisine();

order(id:Integer [PK], ordernbr:String);

child(id:Integer [PK], ismale:Parent #FK to(parent));

lotz(lotpk:LotzPK, name:String, location:String);

deal(id:Integer [PK], userid:Customer #FK to(customer), userid:Customer #FK to(customer));

foresttype(id:Integer [PK], name:String, biggestrepresentative:BiggestForest #FK to(biggestforest));

biggestforest(id:Integer [PK], type:ForestType #FK to(foresttype));

frame(id:Long [PK], name:String, lowername:String);

customer(id:Integer [PK], userid:String);

car(id:Integer [PK], body:Color, owner:Parent #FK to(parent));

orderline(id:Integer [PK], item:String, GeneratedName:Order, replacement:Order);

color(id:Integer [PK], name:String);

user(userkey:Long [PK], start:Date [PK], end:Date [PK], createdby:Long, createdon:Date, userid:String, prefix:Integer, firstname:String, lastname1:String, lastname2:String, middlename1:String, middlename2:String, suffix:Integer, birth:Date, birthstate:Integer, birthcountry:Integer, username:String, password:String, usertype:Integer, privilege:Integer, state:Integer, country:Integer, preferredname:String, birthplace:String, school:Long, cluster:Long, ldtmm:Long, ldtmd:Long, pmtmp:Long);

parent(id:ParentPk [PK], age:int);

carz(id:Integer [PK], make:String, model:String, manufactured:Date, loc_code:Lotz #FK to(lotz));

districtuser(id:Long [PK], createdby:Long, createdon:Date, ctvusers_key:User #FK to(user), ldtmd:Long, pmtmp:Long);

node(id:NodePk [PK], description:String, parent:Node #FK to(Node));

treetype(id:Integer [PK], name:String, GeneratedName:ForestType, alternative:ForestType);

lens(id:Long [PK], focal:float, length:float, name:Frame #FK to(frame));

vendor();

warehouseitem(GeneratedName:Item, GeneratedName:Vendor, vendor_id:ZItemCost #FK to(zitemcost), qtyinstock:BigDecimal);

item();

zitemcost(GeneratedName:Item, GeneratedName:Vendor, cost:BigDecimal);

key(id:String [PK]);

cardfield(GeneratedName:PrimaryKey);

card(id:String [PK]);

child(id:ChildPk);

order(id:Integer [PK]);

tvprogramidclass(GeneratedName:Channel [PK], GeneratedName:Presenter [PK], time:Date, text:String);

littlegenius(particularskill:String);

orderline(GeneratedName:Order [PK], GeneratedName:Product [PK]);

channel(id:Integer [PK]);

parent(id:ParentPk);

product(name:String [PK]);

tvmagazin(id:TvMagazinPk, time:Date);

a(GeneratedName:AId);

tvprogram(id:TvMagazinPk, time:Date, text:String);

c(id:Long [PK]);

b(id:Long [PK]);

someentity(id:SomeEntityId [PK], prop:String);

presenter(name:String [PK]);

flight(id:Long [PK], name:String, transientduration:Long, version:Integer, GeneratedName:Company, triggereddata:String, factor:long, departure:Date, buydate:java.sql.Timestamp, alternativedeparturedate:Calendar);

propertyset(id:Integer [PK], name:String, some:Property, generalproperties:List<Property>);

charproperty(id:Integer [PK], name:String, value:Character);

stringproperty(id:Integer [PK], name:String, value:String);

propertylist(id:Integer [PK], name:String, somepropery:T, generalproperties:List<T>);

propertymap(id:Integer [PK], name:String, properties:Map<String,Property>);

integerproperty(id:Integer [PK], name:String, value:Integer);

longproperty(id:Integer [PK], name:String, value:Long);

city(id:Integer [PK], name:String);

inspectorprefixes(prefixes:String);

deserted_area(inspector_name:InspectorPrefixes [PK] #FK to InspectorPrefixes,area_id:List [PK] #FK to List);inspector_prefixes_areas(inspector_id:InspectorPrefixes [PK] #FK to InspectorPrefixes,area_id:List [PK] #FK to List);

zone(id:Integer [PK]);

groupwithset(id:Integer [PK]);

groupwithset_Set(groupwithsetID:groupwithset [PK] #FK to groupwithset,SetID:Set [PK] #FK to Set);

cat(id:CatPk, age:int);

tt(Cat_ID:Cat [PK] #FK to Cat,Set_ID:Set [PK] #FK to Set);

building(id:Long [PK], name:BuildingCompany #FK to(Any));

employee(id:Integer [PK], name:String, GeneratedName:ContactInfo, GeneratedName:JobInfo);

phonenumber(phnumber:int [PK]);

permission(permission:String [PK], expiration:Date);

contractor(hourlyrate:float);

group(id:Integer [PK]);

group_Collection(groupID:group [PK] #FK to group,CollectionID:Collection [PK] #FK to Collection);

phonenumber(phnumber:int [PK]);

store(id:Integer [PK], name:String);

store_Set(storeID:store [PK] #FK to store,SetID:Set [PK] #FK to Set);store_Set(storeID:store [PK] #FK to store,SetID:Set [PK] #FK to Set);store_Set(storeID:store [PK] #FK to store,SetID:Set [PK] #FK to Set);store_Set(storeID:store [PK] #FK to store,SetID:Set [PK] #FK to Set);

employee(id:Integer [PK], name:String, GeneratedName:ContactInfo);

city(id:Integer [PK], name:String);

city_Set(cityID:city [PK] #FK to city,SetID:Set [PK] #FK to Set);

knownclient(id:Integer [PK], name:String);

category(id:Integer [PK]);

category_Set(categoryID:category [PK] #FK to category,SetID:Set [PK] #FK to Set);

item(id:Integer [PK]);

item_Set(itemID:item [PK] #FK to item,SetID:Set [PK] #FK to Set);

programmanager(id:int [PK]);

man(id:ManPk [PK], carname:String);

employer(id:Integer [PK]);

employer_employee(emper_id:Employer [PK] #FK to Employer,empee_id:Collection [PK] #FK to Collection);employer_contractor(employer_id:Employer [PK] #FK to Employer,contractor_id:List [PK] #FK to List);

friend(id:Integer [PK], name:String);

friend2friend(from_fr:Friend [PK] #FK to Friend,to_fr:Set [PK] #FK to Set);

woman(id:WomanPk [PK], carname:String);

man_woman(womanlastname:Woman [PK] #FK to Woman,maniselder:Set [PK] #FK to Set);

knownclient(id:Integer [PK], name:String);

store(id:Integer [PK], name:String);

store_Set(storeID:store [PK] #FK to store,SetID:Set [PK] #FK to Set);storesupplier(store:Store [PK] #FK to Store,supplier:Set [PK] #FK to Set);store_Set(storeID:store [PK] #FK to store,SetID:Set [PK] #FK to Set);

inspector(_id:Long [PK], name:String);

supplier(id:Integer [PK], name:String);

buildingcompany(id:Long [PK], foundedin:Date);

user(id:int [PK], emailaddress:String, age:int, username:String, password:String, lockedout:boolean);

mammal(ispregnant:boolean);

human(iq:int);

mammal(ispregnant:boolean);



human(iq:int);

club(id:int [PK], name:String);

mammal(ispregnant:boolean);

animal(id:Integer [PK], name:String);

human(iq:int, GeneratedName:Club #FK to(club));

human(iq:int);

mammal(ispregnant:boolean);

animal(id:Integer [PK], name:String);

currency(id:Integer [PK], name:String);

coin(id:Integer [PK], name:String, GeneratedName:Currency);

entityenum(id:long [PK], ordinal:Common, string:Common, GeneratedName:FirstLetter, GeneratedName:LastNumber, explicitoverridingimplicit:LastNumber, GeneratedName:Trimmed, formula:Trimmed, set:Set<Common>);



user(id:java.lang.String);

ticket(id:Long [PK], number:String);

contest(id:int [PK], heldin:Month);

competitor(id:int [PK], name:String);

ferry(sea:String);

book(id:Integer [PK]);

compiledcode(id:Integer [PK]);

longstringholder(id:Long [PK], name:char, whatever:Character, long:String);

imageholder(id:Long [PK], longarray:byte, GeneratedName:Dog, picarray:Byte);

entityserialize(id:long [PK], explicitlob:ExplicitSerializable, explicit:ExplicitSerializable, implicit:ImplicitSerializable, explicitoverridingimplicit:ImplicitSerializable);

lobtestentity(id:Long [PK], lobvalue:Blob, qwerty:String);

lobholder(id:Long [PK], locator:Clob, locator:Blob, counter:Integer);

materializedblobentity(id:Long [PK], name:String, thes:byte);

versionedcompiledcode(id:Integer [PK], version:Integer);

versionedbook(id:Integer [PK], version:Integer);

document(id:Long [PK], revision:Integer, fulltext:String, shortdescription:String);

state(id:Integer [PK], name:String);

foobar(id:Integer [PK], name:String);

country(id:Integer [PK], name:String);

americacupclass(GeneratedName:Country);

phonenumber(id:int [PK], number:int);

location(name:String [PK]);

trip();

employee(id:int [PK], GeneratedName:ContactInfo);

addr(id:int [PK], street:String, city:String, state:String, country:String, zipcode:String);

socialsite(id:int [PK], website:String);

propertyrecord(id:Long [PK], parcels:Map<Address,PropertyInfo>, legacyparcels:Map<Address,PropertyInfo>, unsortedparcels:Set<PropertyInfo>, legacyunsortedparcels:Set<PropertyInfo>);

blogentry(text:String);

simple(id1:Long [PK], id2:Long [PK], quantity:int);

simple2(id1:Long [PK], id2:Long [PK], quantity:int);

multiple(id1:Long [PK], id2:Long [PK], id3:Long [PK], quantity:int);

team(id:Long [PK]);

player(id:Long [PK], GeneratedName:Team, name:String);

company(id:Integer [PK], name:String);



query(id:Long [PK], includedlocations:Set<Location>);

person(id:Long [PK], name:String, nicknamesascendingnaturalsort:Set<String>, nicknamesdescendingnaturalsort:Set<String>, addressesascendingnaturalsort:Set<Address>, addressesdescendingnaturalsort:Set<Address>, addressescityascendingsort:Set<Address>, addressescitydescendingsort:Set<Address>);

products(id:Integer [PK], widgets:Set<Widgets>);

bugsystem(id:Integer [PK], bugs:Set<Bug>);

widgets(name:String, id:int [PK]);

sale(id:Integer [PK], contacts:List<Contact>);

a(id:int [PK], listofb:List<B>);

c(id:int [PK], comment:String);

boy(id:Integer [PK], firstname:String, lastname:String, nicknames:Set<String>, hatednames:Set<String>, preferrednames:Set<String>, scorepernickname:Map<String,Integer>, scoreperpreferredname:Map<String,Integer>, favoritenumbers:int, favoritetoys:Set<Toy>, characters:Set<Character>, foods:Map<String,FavoriteFood>, countryattitudes:Set<CountryAttitude>);

testcourse(testcourseid:Long [PK], title:LocalizedString);

entitywithanelementcollection(id:Long [PK], somestrings:Set<String>);

matrix(id:Integer [PK], mvalues:SortedMap<Integer,Float>);

owner(id:Integer [PK], elements:Set<String>);

rentalcar(id:int [PK], GeneratedName:Driver);

waiter();

driver(id:int [PK], name:String);

cook(id:int [PK], favouriteknife:Knive);

boy(id:long [PK], nicknames:Set<String>);

tourist(id:long [PK], name:String, destination:String);

chair();

course3(id:long [PK], title:String);

course7(id:long [PK], title:String);

bigbed(size:int);

course2(id:long [PK], title:String);

square(id:long [PK], GeneratedName:Position);

bed();

course6(id:long [PK], title:String);

being(id:long [PK]);

user();

student(id:long [PK], name:String);

shape(id:long [PK]);

gardenshed(id:Integer [PK], floors:long);

course4(id:long [PK], title:String);

horse(name:String);

course8(id:long [PK], title:String);

person(firstname:String, lastname:String);

furniture(id:Integer [PK], weight:long);

course1(id:long [PK], title:String);

course5(id:long [PK], title:String);

course5_List(course5ID:course5 [PK] #FK to course5,ListID:List [PK] #FK to List);

circle(GeneratedName:Color);

animal(id:long [PK]);

furniture(id:Integer [PK], weight:long);

foobar(foo:String);

chair();

gardenshed(id:Integer [PK], floors:long);

bigbed(size:int);

bed();

branch(id:Integer [PK]);

person(//memberdeclarationid:int, firstname:String, lastname:String, companyname:String);

stay(//memberdeclarationid:int, GeneratedName:Person, old:Person, veryold:Person, start:Date, end:Date, vessel:String, authoriser:String, comments:String);

leaf(id:Integer [PK], GeneratedName:Branch #FK to(branch));

company(serialversionuid:long, id:int [PK], GeneratedName:Person);

fooditem(id:Integer [PK], item:String, order_nbr:Menu #FK to(menu));

menu(serialversionuid:long, id:Integer [PK], ordernbr:String, isdefault:String);

message(serialversionuid:long, id:int [PK], languagecode:String, languagename:String, GeneratedName:Language);

manufacturer(id:ManufacturerId [PK], name:String);

language(serialversionuid:long, name:String, code:String [PK]);

product(serialversionuid:long, id:Integer [PK], productidnf:String, description:String, product_idnf:Product #FK to(product));

person(serialversionuid:long, id:int [PK], companyid:int, defaultflag:String);

productsqlserver(serialversionuid:long, id:Integer [PK], productidnf:String, description:String, product_idnf:ProductSqlServer #FK to(productsqlserver));

contract(contractnumber:String, //integercompanycodeid:ContractId, GeneratedName:Manufacturer, GeneratedName:Model);

model(id:ModelId [PK], name:String);

manufacturer(id:Integer [PK]);

zimpl(serialversionuid:long, zid:Integer [PK], GeneratedName:B);

primeminister(id:Integer [PK], name:String, current:Government);

bimpl(serialversionuid:long, bid:Integer);

sky(id:Integer [PK], maincloud:CloudType #FK to(cloudtype));

sky_Set(skyID:sky [PK] #FK to sky,SetID:Set [PK] #FK to Set);

aimpl(serialversionuid:long, aid:Integer [PK]);

c();

classc();

b(id:int [PK]);

classb();

d(id:D_PK);

classd();

a(id:A_PK);

classa(id:int [PK]);

truck(weight:int, agreement:ProfessionalAgreement #FK to(professionalagreement));

dbtimestamped(id:int [PK], lastup:Date);

professionalagreement(id:Integer [PK], expiration:Date);

antenna(id:Integer [PK], longitude:String, latitude:String, power:Double);

conductor(id:Integer [PK], name:String, version:Long);

staff(id:Integer [PK], sizeininches:double, radiuss:double, diameter:double);

vmtimestamped(id:int [PK], lastup:Date);

vehicule(id:String [PK], registrationnumber:String, current:Conductor #FK to(conductor), year:Integer, previous:Conductor #FK to(conductor));

passport(id:Long [PK], number:String, owner:Customer #FK to(customer));

a320(javaembeddedversion:String);

port(id:Long [PK]);

country(id:Integer [PK], name:String);

state(id:Integer [PK], name:String);

a(accountid:AId, shortcode:String);

a(oid:long [PK], version:int, name:String, ds:Set<D>, single:D);

citizen(id:Integer [PK], firstname:String, lastname:String, GeneratedName:State #FK to(state), ssn:String);

d(oid:long [PK], version:int, GeneratedName:A, single:A);

naturalidonmanytoone(id:int [PK], GeneratedName:Citizen #FK to(citizen));

entity1(entity1_prop1:String, entity1_prop2:String, entity1_prop3:String, entity1_prop4:String, entity1_prop5:String, entity1_prop6:String);

entity2(entity2_prop1:String, entity2_prop2:String, entity2_prop3:String, entity2_prop4:String, entity2_prop5:String, entity2_prop6:String);

dvd(id:MyOid [PK], title:String);

boat(id:Integer [PK], size:int, weight:int);

apple();

carrot(length:int);

vegetable(id:VegetablePk [PK], priceincent:long);

rock();

music(id:Integer [PK], avgbeat:int, type:Integer);

funk(starred:int);

building(id:Integer [PK], street:String);

noise();

house();

papertrash();

trash(id:Integer [PK]);

duplicateddiscriminatorvaluetest(discriminator_value:String);

folder();

symboliclink(target:File #FK to(file));

document(size:int);

file(name:String [PK], parent:Folder #FK to(folder));

file(name:String [PK], parent:Folder #FK to(folder));

document(size:int);

symboliclink(target:File #FK to(file));

folder();

programexecution(id:Integer [PK], action:String, applieson:File #FK to(file));

alarm(eventinfo:EventInformation #FK to(eventinformation));

person(id:int [PK], name:String, firtsname:String);

client(serialversionuid:long, street:String, code:String, city:String, id:Account #FK to(account));

file(name:String [PK], parent:Folder #FK to(folder));

symboliclink(target:File #FK to(file));

financialasset(price:double);

asset(id:Integer [PK], GeneratedName:Parent);

folder();

parent(id:Integer [PK], propertyass:Set, financialass:Set);

pool(id:Integer [PK], address:PoolAddress);

clothing(id:long [PK], size:int, color:String);

account(serialversionuid:long, id:int [PK], number:String, balance:double);

company(companyname:String, companyaddress:String);

customer(customername:String, customercode:String);

document(size:int);

propertyasset(price:double);

eventinformation(notificationid:String [PK]);

swimmingpool();

sweater(issweat:boolean);

baseclass2(id:long [PK]);

subclass();

baseclass(id:long [PK]);

subclass2();

tomato(size:int);

fruit(id:Integer [PK]);

myentity(id:Long [PK], name:String);

vendor(id:int [PK]);

house(id:Integer [PK], address:String, GeneratedName:Postman);

address(address:House [PK] #FK to House,name:Set [PK] #FK to Set);

postman(name:String, id:String [PK]);

houseplaces(id:int [PK], GeneratedName:Places, neighbour:Places);

bag(id:Integer [PK], serial:String, fld_name:Rambler #FK to(rambler));

warehouseitem(id:int [PK], GeneratedName:Item, GeneratedName:Vendor, vendor_id:ItemCost #FK to(itemcost), qtyinstock:BigDecimal);

inhabitant(id:Integer [PK], name:String);

itemcost(id:int [PK], GeneratedName:Item, GeneratedName:Vendor, cost:BigDecimal);

place(id:int [PK], name:String, owner:String);

luggage(id:Integer [PK], owner:String, type:String);

clothes(id:Integer [PK], type:String, flavor:String);

item(id:int [PK]);

rambler(id:Integer [PK], name:String);

a(id:String [PK], name:String, value:int, address:Set<AddressEntry>);

address(id:long [PK], GeneratedName:Person #FK to(person));

person(id:long [PK]);

deck(id:Integer [PK]);

card(id:Integer [PK], GeneratedName:Deck #FK to(deck));

life(id:Integer [PK], duration:int, fulldescription:String, owner:Cat #FK to(cat));

simplecat(id:Integer [PK], name:String);

life(id:Integer [PK], duration:int, fulldescription:String, owner:SimpleCat #FK to(simplecat));

sysgroupsorm(groupid:long [PK]);

death(id:Integer [PK], GeneratedName:Date, howdoesithappen:String);

b(id:Integer [PK], name:String);

c(age:int);

cat(id:Integer [PK], name:String, secondname:String, storypart1:String, storypart2:String);

dog(id:DogPk [PK], weight:int, thoroughbredname:String);

sysuserorm(userid:long [PK]);

sys_groups_users(userid:SysUserOrm [PK] #FK to SysUserOrm,groupid:Collection [PK] #FK to Collection);

body(id:Integer [PK], GeneratedName:Heart);

partyaffiliate(partyid:String [PK], GeneratedName:Party #FK to(party), affiliatename:String);

address(id:long [PK], GeneratedName:Person #FK to(person));

person(id:long [PK], GeneratedName:Address #FK to(address));

heart(id:Integer [PK]);

showdescription(id:Integer [PK], GeneratedName:Show #FK to(show));

client(id:Integer [PK], name:String, GeneratedName:Address, secondary:Address);

person(id:Integer [PK], GeneratedName:PersonAddress #FK to(personaddress));

personaddress(id:Integer [PK], GeneratedName:Person #FK to(person));

owner(deleted:boolean, id:Long [PK], name:String, version:Integer);



device(GeneratedName:ManagedDevice, tag:String);

manageddevice(name:String, GeneratedName:Device, GeneratedName:DeviceGroupConfig);

devicegroupconfig(name:String);

owner(id:Integer [PK], address:OwnerAddress #FK to(owneraddress));

trouserszip(id:Integer [PK], GeneratedName:Trousers #FK to(trousers));

address(id:Integer [PK], city:String);

owneraddress(id:Integer [PK], GeneratedName:Owner #FK to(owner));

party(partyid:String [PK], GeneratedName:PartyAffiliate #FK to(partyaffiliate));

trousers(id:Integer [PK], zip:TrousersZip #FK to(trouserszip));

computer(id:ComputerPk, cpu:String, serial:SerialNumber #FK to(serialnumber));

show(id:Integer [PK], description:ShowDescription #FK to(showdescription));

serialnumber(id:SerialNumberPk [PK], value:String);

passport(id:Long [PK], name:String);

passport_stamp(Passport_ID:Passport [PK] #FK to Passport,Collection_ID:Collection [PK] #FK to Collection);passport_visastamp(Passport_ID:Passport [PK] #FK to Passport,Collection_ID:Collection [PK] #FK to Collection);

stamp(id:Long [PK], country:String);

customer(id:Long [PK], name:String, GeneratedName:Passport);

someotherentity(id:int [PK], data:boolean, data:byte, //settingaarbitraryacterheretomakethistestalsopassagainstpostgresql//postgresqlthrowsotherwiseanexceptionwhenpersistingthenullvalue//org.postgresql.util.psqlexception:error:invalidbytesequenceforencoding"utf8":0x00acterdata:char, data:short, egerdata:int, data:long, data:double, data:float, GeneratedName:Grade);

someentity(id:java.util.Date [PK], timedata:java.sql.Time, tsdata:java.sql.Timestamp, data:Byte, chardata:Character);

car(id:long [PK], brand:String, producer:String, since:long, GeneratedName:Dealer, otherdealers:Set<Dealer>);

importer(id:long [PK], name:String);

car_importer(Importer_ID:Importer [PK] #FK to Importer,List_ID:List [PK] #FK to List);

product();

machine(id:Integer [PK], weight:Double);

robot(name:String);

t800(targetname:String);

component(manufacturerpartnumber:String, manufacturerid:Long, id:Long [PK]);

savingsaccount();

account();

project(id:int [PK]);

cardfield(GeneratedName:PrimaryKey [PK], tmp:Card #FK to(card));

store(id:Integer [PK], serialversionuid:long);

customers(serialversionuid:long, customerid:int [PK]);

basketitems(serialversionuid:long, basketdatetime:ShoppingBaskets [PK] #FK to(shoppingbaskets), cost:Double [PK]);

b(parent:C [PK], sequencenumber:int [PK]);

benefserv(idpk:BigInteger [PK], idpkser:Service #FK to(service));

acces(idpk:BigInteger [PK], idpkdracc:Droitacces #FK to(droitacces));

service(idpk:BigInteger [PK]);

c(prent:A [PK], sequencenumber:int [PK]);

a(id:int [PK]);

droitacces(idpk:BigInteger [PK], idpkbenef:Benefserv #FK to(benefserv));

cardkey(id:int [PK]);

storecustomer(GeneratedName:Store [PK] #FK to(store), GeneratedName:Customer [PK] #FK to(customer), serialversionuid:long);

card(primarykey:CardPrimaryKey [PK], main:CardField #FK to(cardfield));

course(id:int [PK], name:String);

student(id:int [PK], name:String);

customer(id:Integer [PK], serialversionuid:long);

coursestudent(GeneratedName:Course [PK] #FK to(course), GeneratedName:Student [PK] #FK to(student), value:String);

shoppingbaskets(serialversionuid:long, customerid:Customers [PK] #FK to(customers), basketdatetime:java.util.Date [PK]);

mother(id:Integer [PK]);

father(id:Integer [PK]);

son(id:Integer [PK], GeneratedName:Father, GeneratedName:Mother);

match(competitor1point:String, version:Integer, playerassn:SocialSecurityNumber);

tennismatch();

bustrip(id:BusTripPk, status:Availability, serial:byte, terminustime:Date, players:Map<String,SocialSecurityPhysicalAccount>, roads:List);

jpaoverriddenannotationreadertest();

administration(id:Integer [PK], firstname:String, lastname:String, address:String, version:Integer, transientfield:String, default:BusTrip #FK to(bustrip));

socialsecurityphysicalaccount(number:String, countrycode:String);

socialsecuritymoralaccount(number:String, countrycode:String);

discount(id:Long [PK], discount:double, owner:Customer #FK to(customer));

month(id:int [PK], year:int, month:int);

bid(id:Integer [PK], description:String, note:Starred, editorsnote:Starred, approved:Boolean);

washingmachine(id:Integer [PK], transientisactive:boolean);

forest2(id:Integer [PK], name:String, longdescription:String);

ransom(id:Integer [PK], kidnappername:String, amount:MonetaryAmount, GeneratedName:Date);

narrative(id:int [PK], state:String, GeneratedName:Topic);



topic(id:int [PK]);

address(id:Integer [PK], city:String, GeneratedName:Country);

formallastname(id:Integer [PK], GeneratedName:LastName, designation:String);

zipcode(code:String [PK]);

communitybid(communitynote:Starred);

player(id:int [PK], name:String, team:SoccerTeam #FK to(soccerteam), //fortheworldcupofoneversusonematches,wehave//teamswithoneplayer(1v1team).onevoneteam:SoccerTeam);

contactdetails(id:int [PK], local:PhoneNumber, GeneratedName:OverseasPhoneNumber);

forest(id:Integer [PK], name:String, length:long, longdescription:String, smalltext:String, bigtext:String, GeneratedName:Country, near:Set);

flight(id:Long [PK], maxaltitudeinmilimeter:long, maxaltitude:long);

drill(id:int [PK]);

localcontactdetails(id:int [PK], local:PhoneNumber, GeneratedName:OverseasPhoneNumber);

peugot();

name(id:Integer [PK], GeneratedName:LastName);

tree(id:Integer [PK], name:String);

car(id:int [PK], name:String);

race(length:Long, id:Integer [PK]);

soccerteam(id:int [PK], name:String, onevone:Player #FK to(player));

employee(firstname:String [PK], lastname:String [PK]);

dependent(id:DependentId, emp:Employee #FK to(employee));

dependent(name:String [PK], firstname:Employee [PK] #FK to(employee));

employee(firstname:String [PK], lastname:String [PK]);

medicalhistory(//allattributesmaptorelationship:attributeoverridenotallowedid:PersonId, patient:Person #FK to(person));

person(firstname:String [PK], lastname:String [PK]);

medicalhistory(patient:Person [PK] #FK to(person));

person(firstname:String [PK], lastname:String [PK]);

medicalhistory(id:Integer [PK], patient:Person #FK to(person));

person(id:Integer [PK]);

employee(empid:long [PK], empname:String);

dependent(name:String [PK], emp:Employee [PK] #FK to(employee));

customerinventory(id:Integer [PK], GeneratedName:Customer [PK] #FK to(customer), vehicle:Item #FK to(item), totalcost:BigDecimal, quantity:int, version:int);

item(query_by_category:String, id:String [PK], name:String, price:BigDecimal, description:String, discount:BigDecimal, category:int, version:int);

customer(query_all:String, query_count:String, query_by_credit:String, bad_credit:String, id:int [PK], firstname:String, lastname:String, contact:String, credit:String, creditlimit:BigDecimal, since:Calendar, balance:BigDecimal, ytdpayment:BigDecimal, version:int);

dependent(id:DependentId, //@joincolumn(name:Employee #FK to(employee));

customerinventory(id:Integer [PK], custid:int [PK], GeneratedName:Customer #FK to(customer), vehicle:Item #FK to(item), totalcost:BigDecimal, quantity:int, version:int);

customer(query_all:String, query_count:String, query_by_credit:String, bad_credit:String, id:int [PK], firstname:String, lastname:String, contact:String, credit:String, creditlimit:BigDecimal, since:Calendar, balance:BigDecimal, ytdpayment:BigDecimal, version:int);

item(query_by_category:String, id:String [PK], name:String, price:BigDecimal, description:String, discount:BigDecimal, category:int, version:int);

customertwo(query_all:String, query_count:String, query_by_credit:String, bad_credit:String, id:int [PK], firstname:String, lastname:String, contact:String, credit:String, creditlimit:BigDecimal, since:Calendar, balance:BigDecimal, ytdpayment:BigDecimal, version:int);

customerinventorytwo(id:Integer [PK], custid:int [PK], customer:CustomerTwo #FK to(customertwo), vehicle:Item #FK to(item), totalcost:BigDecimal, quantity:int, version:int);

exclusivedependent(id:DependentId, emp:Employee #FK to(employee));

employee(empid:long [PK], empname:String);

dependent(name:String [PK], //idattributemappedbyjoincolumndefaultemp:Employee);

employee(empid:long [PK], empname:String, nickname:String);

medicalhistory(patient:Person [PK] #FK to(person), xraydata:byte);

person(ssn:String [PK]);

medicalhistory(patient:Person [PK] #FK to(person));

person(id:PersonId);

medicalhistory(//allattributesmaptorelationship:attributeoverridenotallowedid:PersonId, patient:Person #FK to(person));

person(id:PersonId);

employer(name:String [PK], GeneratedName:Employee [PK] #FK to(employee));

person(ssn:String [PK]);

financialhistory(//overridingnotallowed...//defaultjoincolumnnameisoverridden@mapsidid:String [PK], lastup:Date, patient:Person #FK to(person));

medicalhistory(//overridingnotallowed...//defaultjoincolumnnameisoverridden@mapsidid:String [PK], patient:Person #FK to(person), lastup:Date);

financialhistory(patient:Person [PK] #FK to(person), lastup:Date);

simple(ssn:String [PK], name:String [PK]);

person(ssn:String [PK]);

medicalhistory(patient:Person [PK] #FK to(person), lastup:Date);

employee(id:long [PK], name:String);

dependent(//defaultcolumnnamefor"name"attributeisoverriddenid:DependentId, firstname:Employee #FK to(employee));

employee(empid:EmployeeId);

employee(empid:EmployeeId);

dependent(//defaultcolumnnameisoverriddenname:String [PK], firstname:Employee [PK] #FK to(employee));

dependent(//idattributemappedbyjoincolumndefaultid:DependentId, GeneratedName:Employee #FK to(employee));

personinfo(serialversionuid:long, id:Person [PK] #FK to(person), info:String);

foo(id:Long [PK], name:String, GeneratedName:Bar #FK to(bar));

bar(GeneratedName:Foo [PK] #FK to(foo), details:String);

order(id:Long [PK], name:String);

employee(empid:long [PK], empname:String);

dependent(emp:Employee [PK] #FK to(employee), name:String);

orderline(GeneratedName:Order [PK] #FK to(order), GeneratedName:Product [PK] #FK to(product), amount:Integer);

person(serialversionuid:long, id:Integer [PK], name:String, GeneratedName:PersonInfo #FK to(personinfo));

product(id:Long [PK], name:String);

voice(id:Integer [PK]);

gsm(frequency:int);

internetprovider(id:Integer [PK], brandname:String, owner:LegalStructure);

nationality(id:Integer [PK], name:String);

wealthyperson(vacationhomes:Set<Address>, legacyvacationhomes:Set<Address>, explicitvacationhomes:Set<Address>);

book(isbn:String [PK], name:String, GeneratedName:Summary);

favoritethings(id:int [PK], web:InternetFavorites);

manager(id:Integer [PK], name:String, employer:InternetProvider #FK to(internetprovider));

addresstype(id:Integer [PK], name:String);

entitywithnestedembeddables(id:Integer [PK], embeda:EmbeddableA);

vanillaswap(/***identifieroftheinterestrateswap*/instrumentid:String, /***oftheswap(andofbothlegs).*/:Currency, /***fixedleg(cashflowswiththefixedrate).*/:FixedLeg, /***floatingleg(cashflowsboundtoafinancialindex).*/:FloatLeg);

corptype(id:Integer [PK], type:String);

person(id:Integer [PK], name:String, GeneratedName:Address, bornin:Country);

spreaddeal(/***withthetenor.*/long:Swap, /***withthelongertenor.*/short:Swap);

person(id:Long [PK], name:String, GeneratedName:Address);

country(iso2:String [PK], name:String);

regionalarticle(pk:RegionalArticlePk [PK], name:String);

person(id:Long [PK], name:PersonName);

alias(id:Long [PK], GeneratedName:Name, source:String);

price(id:Integer [PK], amount:Double, currency:String);

gene(id:Integer [PK], state:STE);

dna(id:Integer [PK]);

dummy(id:Long [PK]);

someguy(id:Integer [PK]);

paper();

papertype(id:Integer [PK], name:String);

classes();

wildentity(serialversionuid:long, id:int [PK], property:String);

a320b();

childhierarchy22();

parenthierarchy22();

parenthierarchy1();

childhierarchy1();

customer(id:Long [PK], name:String);

invoice(id:Long [PK]);

simplenationalizedtest();

annotateddetail(id:Integer [PK], name:String, //becauseotherwiseschemaexportwouldnotknowaboutit...domain:String);

annotatedmaster(id:Integer [PK], name:String, detail_domain:AnnotatedDetail #FK to(annotateddetail));

batchingbatchfailuretest();

nonbatchingbatchfailuretest();

workflow(serialversionuid:long, id:Long [PK], defaultlanguage:Locale, supportedlocales:Set<Locale>, localized:Map<Locale,LocalizedEmbeddable>);

category(id:Long [PK]);

category_Set(categoryID:category [PK] #FK to category,SetID:Set [PK] #FK to Set);

container(id:Integer [PK], items:List<Item>);

industry(id:Integer [PK], name:String);

zipcode(id:Integer [PK], code:String, city:String, GeneratedName:State);

order(id:Integer [PK], referencecode:String, placed:Date, fulfilled:Date, GeneratedName:Customer);

customer(id:Integer [PK], version:Integer, name:String, registeredtrademarks:Set<String>, hq:Address, addresses:Set<Address>);

customer_Set(customerID:customer [PK] #FK to customer,SetID:Set [PK] #FK to Set);

item(id:Long [PK], price:Double, specialprice:Double);

a(oid:long [PK], myname:String);

allcached(id:Integer [PK], name:String);

b(oid:long [PK], ss:A #FK to(a), naturalid:int);

another(id:Integer [PK], name:String, surname:String);

principal(id:Long [PK], uid:String);

principal(id:Long [PK], uid:String);

user(username:String);

user();

a(oid:long [PK], ass:C #FK to(c), myname:String);

d(oid:long [PK], name:String, assoiated:C #FK to(c));

b(oid:long [PK], ss:A #FK to(a), naturalid:int);

c(oid:long [PK], name:String);

building(id:Integer [PK], name:String, address:String, city:String, state:String);

user(id:Long [PK], name:String);

group(id:Long [PK], name:String);

membership(id:Long [PK], member:User #FK to(user), GeneratedName:Group, join:Date, dues:Float);

storedprocedureresultsetmappingtest();

postgresrefcursorsupporttest(sf:SessionFactory);

numvalue(num:long [PK], value:String);

matrix(id:Integer [PK], mvalues:Set<Integer>);

component(id:Long [PK], emb:Component.Emb);

person(id:int [PK], GeneratedName:Name);

proxyinterfaceclassloadertest();

iamafoo(id:long [PK], foo:String);

isolatedevictableentity(id:Integer [PK], name:String);

invalidenumeratedjavatypetest();

lobentity(blob_length:int, id:Long [PK], GeneratedName:Blob);

x(id:Long [PK], GeneratedName:Tranchenmodell #FK to(tranchenmodell));

y(id:Long [PK], GeneratedName:Tranche #FK to(tranche));

preisregelung(id:Long [PK], GeneratedName:Tranchenmodell #FK to(tranchenmodell));

tranche(id:Long [PK], GeneratedName:Tranchenmodell #FK to(tranchenmodell), GeneratedName:Y #FK to(y));

tranchenmodell(id:Long [PK], GeneratedName:Preisregelung #FK to(preisregelung), GeneratedName:X #FK to(x));

tranchenmodell(id:Long [PK], GeneratedName:Preisregelung #FK to(preisregelung));

tranche(id:Long [PK], GeneratedName:Tranchenmodell #FK to(tranchenmodell));

preisregelung(id:Long [PK], GeneratedName:Tranchenmodell #FK to(tranchenmodell));

feature(id:Long [PK], GeneratedName:Product #FK to(product), name:String);

product(id:Long [PK], name:String);

loadplanbuildertest();

encapsulatedcompositeattributeresultsetprocessortest();

entitywithnonlazyonetomanylistresultsetprocessortest();

entitywithnonlazycollectionresultsetprocessortest();

entitywithnonlazyonetomanysetresultsetprocessortest();

user(id:Integer [PK]);

employee(//illustratestheproblematicsituationdescribedinhhh-8980belongsto:Department #FK to(department));

department(id:Integer [PK]);

contractor(//illustratestheproblematicsituationdescribedinhhh-8330reportsto:Department #FK to(department));

simpleresultsetprocessortest();

encapsulatedcompositeidresultsetprocessortest();

entityassociationresultsetprocessortest();

basicwalkingtest();

thing(id:Long [PK], name:String, mutableproperty:Date);

issue(id:Long [PK], description:String, issuenumber:String);

varioustypesentity(id:Integer [PK], data:byte);

employee(fetch_profile_tree:String, id:Long [PK], manager:Employee #FK to(employee));

a(id:Long [PK], value:String);

door(id:Integer [PK], name:String);

title(id:Integer [PK], description:String);

employee(id:Integer [PK], firstname:String, lastname:String, GeneratedName:Title #FK to(title), GeneratedName:Department #FK to(department));

panel(id:Long [PK], clientid:Long, deltastamp:String);

farm(id:long [PK], name:String, accreditations:Set<Accreditation>);

farm_List(farmID:farm [PK] #FK to farm,ListID:List [PK] #FK to List);

casestatementtest();

entity1(id:long [PK], GeneratedName:Entity2 #FK to(entity2), value:String);

parent(id:long [PK], value:String);

child(id:long [PK], value:String);

entity3(id:long [PK], value:String);

entity2(id:long [PK], GeneratedName:Entity3 #FK to(entity3), value:String);

grandchild(id:long [PK], value:String);

tuplesupporttest(GeneratedName:SessionFactory);

crop(id:long [PK], name:String);

trtpanel(id:Long [PK], GeneratedName:Panel #FK to(panel), clientid:Long, deltastamp:String);

subquerytest();

employee(employeenumber:String);

person(id:Integer [PK], name:String);

castfunctiontest();

department(deptno:Integer [PK], deptname:String);

user(username:String [PK]);

email(id:Long [PK], address:String);

versionednocascadeone(id:long [PK], version:long);

unversionednocascadeone(id:long [PK]);

many(id:long [PK]);

versionedcascadeone(id:long [PK], version:long);

unversionedcascadeone(id:long [PK]);

user(serialversionuid:long, id:Long [PK], name:String, GeneratedName:Contact);

contact(serialversionuid:long, id:Long [PK], name:String, emailaddresses:Set<EmailAddress>, emailaddresses2:Set<EmailAddress>);

mapvalue(log:Logger, id:Long [PK], name:String, previoushashcode:int);

mapkey(log:Logger, id:Long [PK], name:String, defaultvalue:MapValue #FK to(Value), previoushashcode:int);

mapholder(id:Long [PK]);

map_key_map_value(map_holder_id:MapHolder [PK] #FK to MapHolder,map_value_id:Value [PK] #FK to Value);

persistentmaptest();

multiplesessioncollectionwarningtest();

multiplesessioncollectiontest(log:Logger);

animal(id:Long [PK], weight:long);

tiger(numberofstripes:int);

lion();

zoo(id:Long [PK], name:String, city:String, animals:Set<Animal>);

cacheableitem(id:Long [PK], name:String);

cacheditem2();

abstractcacheditem(id:Long [PK], name:String);

cacheditem1();

referencecachetest();

company(id:int [PK]);

user(id:int [PK], GeneratedName:Company #FK to(Any));

product(id:String [PK], name:String, description:String, msrp:BigDecimal, version:int);

inventory(id:int [PK], GeneratedName:Store, GeneratedName:Product, quantity:Long, storeprice:BigDecimal);

store(id:int [PK], name:String, version:int);

constrainttest(max_name_length:int, explicit_fk_name_native:String, explicit_fk_name_jpa:String, explicit_uk_name:String);

destinationentity(id:Integer [PK], from:FromEntity #FK to(fromentity), fullnamefrom:String);

identificationvariablestest();

treatkeywordtest();

fromentity(id:Integer [PK], name:String, lastname:String);

classwithidentitycolumn(id:long [PK], name:String);

group(id:Integer [PK], name:String);

child(id:Long [PK], GeneratedName:Parent);

parent(id:Long [PK]);

table2(id:long [PK]);

confentity(serialversionuid:long, confkey:String [PK], confvalue:String [PK]);

table1(id:long [PK]);

userentity(serialversionuid:long, id:Long [PK], name:String);

userconfentity(serialversionuid:long, user:UserEntity [PK] #FK to(userentity), confkey:ConfEntity [PK] #FK to(confentity));

parent(id:Long [PK], GeneratedName:Child #FK to(child));

child(GeneratedName:Parent [PK] #FK to(parent));

lazyabstractentityreference(id:Integer [PK], entity:AbstractEntity #FK to(abstractentity));

abstractentity(id:Integer [PK]);

concreteentity(content:String);

nullhandlingtests();

andnationalizedtests();

elementcollectiontests();

attributeconvertertest();

doesnotwork(serialversionuid:long, GeneratedName:DoesNotWorkPk, globadditinfotid:Long, globalnotes:List<String>);

multiplecollectionrefentity2(id:Long [PK], text:String, GeneratedName:MultipleCollectionEntity #FK to(Collection), multiplecollectionentityid:Long);

multiplecollectionrefentity1(id:Long [PK], text:String, GeneratedName:MultipleCollectionEntity #FK to(Collection), multiplecollectionentityid:Long);

multiplecollectionentity(id:Long [PK], text:String);

alias(id:Integer [PK], alias:String);

character_alias(Alias_ID:Alias [PK] #FK to Alias,List_ID:List [PK] #FK to List);

character(id:Integer [PK], name:String);

entitywithcompositekey(pk:CompositeKey);

entitywithstringcompositekey(pk:StringCompositeKey);

queryhinttest();

sub();

super(id:Long [PK], value:Long);

user(id:long [PK], //theseexistsolelyforhhh-8464toensurethatthevariousformsofquotingarenormalizedinternally//(usingbackticks),includingthejoincolumn.withoutnormalization,themappingwillthrowa//duplicatemappingexception.:House #FK to(house), house1:Long, house2:Long, //testukonfkw/globalquoting--seehhh-8638//thismustbeinitialized.severaldbsdonotallowmultiplenullvaluesinauniquecolumn.3:House #FK to(house));

user_Set(userID:user [PK] #FK to user,SetID:Set [PK] #FK to Set);

quoteglobaltest();

quotetest();

role(id:long [PK]);

phone(id:Integer [PK], brandname:String, price:float);

person(id:long [PK], name:String);

house(id:Long [PK], streetaddress:String);

employeegroup(id:EmployeeGroupId [PK]);

employee(id:Long [PK], name:String);

child1(id:Long [PK]);

parent1(id:Long [PK]);

child2(id:Long [PK]);

synonymvalidationtest();

removeorderingtest();

b(idpart1:Integer [PK], idpart2:Integer [PK], otherproperty:String);

batchloadableentity(id:Integer [PK], name:String);

a(id:Integer [PK], otherproperty:String, GeneratedName:B #FK to(b));

irrelevantentity(id:Integer [PK], name:String);

parententity(id:Long [PK], CLASS_ID: String);

comment(id:Long [PK], GeneratedName:Post, name:String, GeneratedName:Forum, DTYPE: String);

animal(id:Integer [PK], name:String);

plane(id:Long [PK], nbrofseats:int, planetype: String);

file(id:java.lang.String, GeneratedName:User #FK to(user), type:SocialNetwork, networkid:String);

b(id:TableBId, idcolumn:ATable #FK to(Table));

hardware(parent:Hardware #FK to(hardware), DeviceType: String);

drill(, DRILL_TYPE: String);



** PROGRAM TYPE: JPA+Hibernate(Hybrid)