ClassDiagram.Class>> NodeAddress =>=>=> RelationalSchema.Table>> nodeaddress;
ClassDiagram.Class>> MinerAddress =>=>=> RelationalSchema.Table>> mineraddress;
ClassDiagram.Class>> BackEndAwards =>=>=> RelationalSchema.Table>> backendawards;
ClassDiagram.Class>> NodeTransactionAwards =>=>=> RelationalSchema.Table>> nodetransactionawards;
ClassDiagram.Attribut>> NodeAddress.guid:String =>=>=> RelationalSchema.Column>> nodeaddress.guid PRIMARY KEY;
ClassDiagram.Attribut>> NodeAddress.ipaddress:String =>=>=> RelationalSchema.Column>> nodeaddress.ipaddress;
ClassDiagram.Attribut>> NodeAddress.port:int =>=>=> RelationalSchema.Column>> nodeaddress.port;
ClassDiagram.Attribut>> NodeAddress.isactive:boolean =>=>=> RelationalSchema.Column>> nodeaddress.isactive;
ClassDiagram.Attribut>> MinerAddress.id:int =>=>=> RelationalSchema.Column>> mineraddress.id PRIMARY KEY;
ClassDiagram.Attribut>> MinerAddress.address:String =>=>=> RelationalSchema.Column>> mineraddress.address;
ClassDiagram.Attribut>> MinerAddress.addresstype:MinerAddressType =>=>=> RelationalSchema.Column>> mineraddress.addresstype;
ClassDiagram.Attribut>> BackEndAwards.id:long =>=>=> RelationalSchema.Column>> backendawards.id PRIMARY KEY;
ClassDiagram.Attribut>> BackEndAwards.transactiontype:byte =>=>=> RelationalSchema.Column>> backendawards.transactiontype;
ClassDiagram.Attribut>> BackEndAwards.addressto:String =>=>=> RelationalSchema.Column>> backendawards.addressto;
ClassDiagram.Attribut>> BackEndAwards.amount:BigInteger =>=>=> RelationalSchema.Column>> backendawards.amount;
ClassDiagram.Attribut>> BackEndAwards.commission:BigInteger =>=>=> RelationalSchema.Column>> backendawards.commission;
ClassDiagram.Attribut>> BackEndAwards.created:long =>=>=> RelationalSchema.Column>> backendawards.created;
ClassDiagram.Attribut>> BackEndAwards.timeout:long =>=>=> RelationalSchema.Column>> backendawards.timeout;
ClassDiagram.Attribut>> BackEndAwards.transactionpurpose:byte =>=>=> RelationalSchema.Column>> backendawards.transactionpurpose;
ClassDiagram.Attribut>> BackEndAwards.commentid:long =>=>=> RelationalSchema.Column>> backendawards.commentid;
ClassDiagram.Attribut>> BackEndAwards.isdone:boolean =>=>=> RelationalSchema.Column>> backendawards.isdone;
ClassDiagram.Attribut>> NodeTransactionAwards.id:long =>=>=> RelationalSchema.Column>> nodetransactionawards.id PRIMARY KEY;
ClassDiagram.Attribut>> NodeTransactionAwards.transactiontype:byte =>=>=> RelationalSchema.Column>> nodetransactionawards.transactiontype;
ClassDiagram.Attribut>> NodeTransactionAwards.addressto:String =>=>=> RelationalSchema.Column>> nodetransactionawards.addressto;
ClassDiagram.Attribut>> NodeTransactionAwards.amount:BigInteger =>=>=> RelationalSchema.Column>> nodetransactionawards.amount;
ClassDiagram.Attribut>> NodeTransactionAwards.commission:BigInteger =>=>=> RelationalSchema.Column>> nodetransactionawards.commission;
ClassDiagram.Attribut>> NodeTransactionAwards.created:long =>=>=> RelationalSchema.Column>> nodetransactionawards.created;
ClassDiagram.Attribut>> NodeTransactionAwards.timeout:long =>=>=> RelationalSchema.Column>> nodetransactionawards.timeout;
ClassDiagram.Attribut>> NodeTransactionAwards.transactionpurpose:byte =>=>=> RelationalSchema.Column>> nodetransactionawards.transactionpurpose;
ClassDiagram.Attribut>> NodeTransactionAwards.isdone:boolean =>=>=> RelationalSchema.Column>> nodetransactionawards.isdone;
One-To-Many relationship from ClassDiagram.Class>>NodeAddress  to ClassDiagram.Class>>Set<MinerAddress>;
Many-To-One relationship from ClassDiagram.Class>>MinerAddress  to ClassDiagram.Class>>NodeAddress represented by ClassDiagram.Atrribute>>GeneratedName;
