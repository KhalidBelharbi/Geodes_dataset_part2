cacheableitem(id:Long [PK], name:String);

configurationserializationtest(files:String);

t800(targetname:String);

robot(name:String);

product();

machine(id:Integer [PK], weight:Double);

component(manufacturerpartnumber:String, manufacturerid:Long, id:Long [PK]);

discount(id:Long [PK], discount:double, owner:Customer #FK to(Customer));

flight(id:Long [PK], name:String, transientduration:Long, version:Integer, GeneratedName:Company, triggereddata:String, factor:long, departure:Date, buydate:java.sql.Timestamp, alternativedeparturedate:Calendar);

sky(id:Long [PK], color:String, day:String, month:String, area:String);

integerproperty(id:Integer [PK], name:String, value:Integer);

propertylist(id:Integer [PK], name:String, somepropery:T, generalproperties:List<T>);

propertymap(id:Integer [PK], name:String, properties:Map<String,Property>);

longproperty(id:Integer [PK], name:String, value:Long);

charproperty(id:Integer [PK], name:String, value:Character);

stringproperty(id:Integer [PK], name:String, value:String);

propertyset(id:Integer [PK], name:String, some:Property, generalproperties:List<Property>);

order(id:Integer [PK]);

tvprogram(id:TvMagazinPk, time:Date, text:String);

product(name:String [PK]);

child(id:ChildPk);

parent(id:ParentPk);

a(GeneratedName:AId);

presenter(name:String [PK]);

channel(id:Integer [PK]);

key(id:String [PK]);

card(id:String [PK]);

cardfield(GeneratedName:PrimaryKey);

tvprogramidclass(GeneratedName:Channel [PK], GeneratedName:Presenter [PK], time:Date, text:String);

orderline(GeneratedName:Order [PK], GeneratedName:Product [PK]);

c(id:Long [PK]);

someentity(id:SomeEntityId [PK], prop:String);

tvmagazin(id:TvMagazinPk, time:Date);

littlegenius(particularskill:String);

country(id:Integer [PK], name:String);

foobar(id:Integer [PK], name:String);

state(id:Integer [PK], name:String);

customer(id:Long [PK], name:String, GeneratedName:Passport);

storm(id:Integer [PK], start:Location, end:Location, stormname:String);

truck(weight:int, agreement:ProfessionalAgreement #FK to(professionalagreement));

vmtimestamped(id:int [PK], lastup:Date);

staff(id:Integer [PK], sizeininches:double, radiuss:double, diameter:double);

antenna(id:Integer [PK], longitude:String, latitude:String, power:Double);

vehicule(id:String [PK], registrationnumber:String, current:Conductor #FK to(conductor), year:Integer, previous:Conductor #FK to(conductor));

conductor(id:Integer [PK], name:String, version:Long);

dbtimestamped(id:int [PK], lastup:Date);

professionalagreement(id:Integer [PK], expiration:Date);

versionedcompiledcode(id:Integer [PK], version:Integer);

materializedblobentity(id:Long [PK], name:String, thes:byte);

longstringholder(id:Long [PK], name:char, whatever:Character, long:String);

book(id:Integer [PK]);

versionedbook(id:Integer [PK], version:Integer);

compiledcode(id:Integer [PK]);

imageholder(id:Long [PK], longarray:byte, GeneratedName:Dog, picarray:Byte);

cupholder(id:Integer [PK], radius:BigDecimal);

minmax(id:Long [PK], value:Integer);

tv(serial:String [PK], model:String, size:int, name:String, exp:Date, description:String, lifetime:BigInteger, GeneratedName:Tuner, GeneratedName:Recorder);

display(id:Integer [PK], brand:String);

color(id:Integer [PK], name:String);

screen(id:Integer [PK], stop:Button, GeneratedName:PowerSupply, connectors:Set<DisplayConnector>);

screen_set<color>(screenID:screen [PK] #FK to screen,set<color>ID:set<color> [PK] #FK to set<color>);

music(name:String [PK]);

powersupply(id:Integer [PK], power:BigDecimal, position:String);

address(blacklistedzipcode:String, line1:String, line2:String, zip:String, state:String, country:String, id:long [PK], internalvalid:boolean, floor:int);

rock(bit:Integer);

tvowner(id:Integer [PK], GeneratedName:Tv #FK to(tv));

range(id:Long [PK], value:Integer);

orderline(id:Integer [PK], item:String, GeneratedName:Order);

color(id:Integer [PK], name:String);

biggestforest(id:Integer [PK], type:ForestType #FK to(foresttype));

lotz(lotpk:LotzPK, name:String, location:String);

foresttype(id:Integer [PK], name:String, biggestrepresentative:BiggestForest #FK to(biggestforest));

deal(id:Integer [PK], userid:Customer #FK to(Customer), userid:Customer #FK to(Customer));

frame(id:Long [PK], name:String, lowername:String);

vendor();

warehouseitem(GeneratedName:Item, GeneratedName:Vendor, vendor_id:ZItemCost #FK to(Item), qtyinstock:BigDecimal);

zitemcost(GeneratedName:Item, GeneratedName:Vendor, cost:BigDecimal);

item();

lens(id:Long [PK], focal:float, length:float, name:Frame #FK to(frame));

customer(id:Integer [PK], userid:String);

user(userkey:Long [PK], start:Date [PK], end:Date [PK], createdby:Long, createdon:Date, userid:String, prefix:Integer, firstname:String, lastname1:String, lastname2:String, middlename1:String, middlename2:String, suffix:Integer, birth:Date, birthstate:Integer, birthcountry:Integer, username:String, password:String, usertype:Integer, privilege:Integer, state:Integer, country:Integer, preferredname:String, birthplace:String, school:Long, cluster:Long, ldtmm:Long, ldtmd:Long, pmtmp:Long);

districtuser(id:Long [PK], createdby:Long, createdon:Date, ctvusers_key:User #FK to(User), ldtmd:Long, pmtmp:Long);

carz(id:Integer [PK], make:String, model:String, manufactured:Date, loc_code:Lotz #FK to(lotz));

parent(id:ParentPk [PK], age:int);

node(id:NodePk [PK], description:String, parent:Node #FK to(node));

child(id:Integer [PK], ismale:Parent #FK to(Parent));

car(id:Integer [PK], body:Color, owner:Parent #FK to(Parent));

order(id:Integer [PK], ordernbr:String);

treetype(id:Integer [PK], name:String, GeneratedName:ForestType, alternative:ForestType);

dvd(id:MyOid [PK], title:String);

passport(id:Long [PK], name:String);

passport_stamp(Passport_ID:Passport [PK] #FK to Passport,collection<stamp>_ID:collection<stamp> [PK] #FK to collection<stamp>);passport_visastamp(Passport_ID:Passport [PK] #FK to Passport,collection<stamp>_ID:collection<stamp> [PK] #FK to collection<stamp>);

stamp(id:Long [PK], country:String);

ticket(id:Long [PK], number:String);

coin(id:Integer [PK], name:String, GeneratedName:Currency);

currency(id:Integer [PK], name:String);

user(id:long [PK]);

user_set<role>(userID:user [PK] #FK to user,set<role>ID:set<role> [PK] #FK to set<role>);

phone(id:Integer [PK], brandname:String, price:float);

role(id:long [PK]);

myentity(id:Long [PK], name:String);

a(id:A_PK);

classc();

classb();

d(id:D_PK);

b(id:int [PK]);

classd();

classa(id:int [PK]);

c();

country(id:Integer [PK], name:String);

rambler(id:Integer [PK], name:String);

warehouseitem(id:int [PK], GeneratedName:Item, GeneratedName:Vendor, vendor_id:ItemCost #FK to(Item), qtyinstock:BigDecimal);

inhabitant(id:Integer [PK], name:String);

clothes(id:Integer [PK], type:String, flavor:String);

itemcost(id:int [PK], GeneratedName:Item, GeneratedName:Vendor, cost:BigDecimal);

luggage(id:Integer [PK], owner:String, type:String);

bag(id:Integer [PK], serial:String, fld_name:Rambler #FK to(rambler));

house(id:Integer [PK], address:String, GeneratedName:Postman);

address(address:House [PK] #FK to House,name:set<inhabitant> [PK] #FK to set<inhabitant>);

postman(name:String, id:String [PK]);

item(id:int [PK]);

vendor(id:int [PK]);

passport(id:Long [PK], number:String, owner:Customer #FK to(Customer));

company(id:Integer [PK], name:String);

organisation(idorganisation:Long [PK], name:String);

person(idperson:Long [PK], firstname,lastname:String);

city(id:Integer [PK], name:String);

order(schoolid:String [PK], schoolidsort:Integer, academicyear:Integer [PK]);

politicalparty(name:String [PK]);

orderitem(schoolid:String [PK], academicyear:Integer [PK], dayno:Integer [PK], dayname:String, GeneratedName:Order);

child(id:Integer [PK], ismale:Parent #FK to(Parent), favoritesuperhero:String, favoritesinger:String);

organisationuser(sometext:String, GeneratedName:Organisation);

model(id:Integer [PK], GeneratedName:Manufacturer #FK to(manufacturer));

monkey(id:Integer [PK], name:String);

soldier(id:Integer [PK], name:String, GeneratedName:Troop);

parent(id:ParentPk [PK], age:int);

street(id:Integer [PK], streetname:String, streetnamecopy:String, GeneratedName:City);

troop(id:Integer [PK], name:String);

trainer(id:Integer [PK], name:String);

politician(name:String [PK], party:PoliticalParty #FK to(Part));

tiger(id:Integer [PK], name:String);

c(age:int);

life(id:Integer [PK], duration:int, fulldescription:String, owner:Cat #FK to(cat));

b(id:Integer [PK], name:String);

sysuserorm(userid:long [PK]);

sys_groups_users(userid:SysUserOrm [PK] #FK to SysUserOrm,groupid:orm [PK] #FK to orm);

cat(id:Integer [PK], name:String, secondname:String, storypart1:String, storypart2:String);

dog(id:DogPk [PK], weight:int, thoroughbredname:String);

sysgroupsorm(groupid:long [PK]);

death(id:Integer [PK], GeneratedName:Date, howdoesithappen:String);

bustrip(id:BusTripPk, status:Availability, serial:byte, terminustime:Date, players:Map<String,SocialSecurityPhysicalAccount>, roads:List);

match(competitor1point:String, version:Integer, playerassn:SocialSecurityNumber);

socialsecurityphysicalaccount(number:String, countrycode:String);

socialsecuritymoralaccount(number:String, countrycode:String);

administration(id:Integer [PK], firstname:String, lastname:String, address:String, version:Integer, transientfield:String, default:BusTrip #FK to(bustrip));

tennismatch();

jpaoverridenannotationreadertest();

addr(id:int [PK], street:String, city:String, state:String, country:String, zipcode:String);

trip();

propertyrecord(id:Long [PK], parcels:Map<Address,PropertyInfo>, legacyparcels:Map<Address,PropertyInfo>, unsortedparcels:Set<PropertyInfo>, legacyunsortedparcels:Set<PropertyInfo>);

phonenumber(id:int [PK], number:int);

employee(id:int [PK], GeneratedName:ContactInfo);

socialsite(id:int [PK], website:String);

location(name:String [PK]);

product(serialversionuid:long, id:Integer [PK], productidnf:String, description:String, product_idnf:Product #FK to(Product));

person(serialversionuid:long, id:int [PK], companyid:int, defaultflag:String);

contract(contractnumber:String, //integercompanycodeid:ContractId, GeneratedName:Manufacturer, GeneratedName:Model);

menu(serialversionuid:long, id:Integer [PK], ordernbr:String, isdefault:String);

company(serialversionuid:long, id:int [PK], GeneratedName:Person);

language(serialversionuid:long, name:String, code:String [PK]);

model(id:ModelId [PK], name:String);

manufacturer(id:ManufacturerId [PK], name:String);

message(serialversionuid:long, id:int [PK], languagecode:String, languagename:String, GeneratedName:Language);

fooditem(id:Integer [PK], item:String, order_nbr:Menu #FK to(menu));

minimalsequenceentity(seq_name:String, id:Long [PK]);

minimaltableentity(tbl_name:String, id:Long [PK]);

autoentity(id:Long [PK]);

completesequenceentity(seq_name:String, id:Long [PK]);

planetcheatsheet(GeneratedName:Planet [PK], mass:double, radius:double, numberofinhabitants:long);

firtree();

monkey(id:String [PK]);

shoe(id:Long [PK]);

ball(id:Integer [PK]);

pointytooth(id:BigInteger [PK], GeneratedName:Bunny #FK to(bunny));

home(id:Long [PK]);

dog(id:Integer [PK], name:String);

soundsystem(id:String [PK], brand:String, model:String);

computer(id:Long [PK], serialnumber:String);

footballer(firstname:String [PK], lastname:String [PK], club:String);

bunny(id:BigInteger [PK]);

department(id:Long [PK]);

twinkletoes(id:BigInteger [PK], GeneratedName:Bunny #FK to(bunny));

phone(id:Integer [PK]);

store(id:Long [PK]);

goalkeeper();

furniture(id:Integer [PK]);

breakdance(id:Integer [PK], name:String);

tower();

footballer(firstname:String [PK], lastname:String [PK], club:String);

soundsystem(id:String [PK], brand:String, model:String);

department(id:Long [PK]);

home(id:Long [PK]);

pointytooth(id:BigInteger [PK], GeneratedName:Bunny #FK to(bunny));

monkey(id:String [PK]);

computer(id:Long [PK], serialnumber:String);

goalkeeper();

shoe(id:Long [PK]);

ball(id:Integer [PK]);

breakdance(id:Integer [PK], name:String);

firtree();

dog(id:Integer [PK], name:String);

tower();

furniture(id:Integer [PK]);

store(id:Long [PK]);

planetcheatsheet(GeneratedName:Planet [PK], mass:double, radius:double, numberofinhabitants:long);

twinkletoes(id:BigInteger [PK], GeneratedName:Bunny #FK to(bunny));

phone(id:Integer [PK]);

bunny(id:BigInteger [PK]);

news(id:Integer [PK], title:String, detail:String);

trainee(id:Long [PK], name:String);

gaskey(name:String [PK]);

addressbook(id:Integer [PK], owner:String);

pressreleaseagency(id:Integer [PK], name:String);

pressreleaseagency_id(pressreleaseagency_id:PressReleaseAgency [PK] #FK to PressReleaseAgency,news_id:map<integer,news> [PK] #FK to map<integer,news>);

training(id:Long [PK]);

training_sortedmap<string,trainee>(trainingID:training [PK] #FK to training,sortedmap<string,trainee>ID:sortedmap<string,trainee> [PK] #FK to sortedmap<string,trainee>);

gas(id:Integer [PK], name:String);

dress(id:Integer [PK]);

alphabeticaldirectory(id:Integer [PK], name:String);

newspaper(id:Integer [PK], name:String);

newspaper_map<string,news>(newspaperID:newspaper [PK] #FK to newspaper,map<string,news>ID:map<string,news> [PK] #FK to map<string,news>);

drawer(id:Long [PK]);

version(id:Integer [PK], codename:String, number:String, GeneratedName:Software);

addressentry(person:AddressEntryPk, street:String, city:String, book:AddressBook #FK to(Address), directory:AlphabeticalDirectory #FK to(alphabeticaldirectory));

atmosphere(id:Integer [PK], colorperdate:Map<Date,String>, colorperlevel:Map<Level,String>, composition:Map<Gas,Double>);

atmosphere_map<string,gas>(atmosphereID:atmosphere [PK] #FK to atmosphere,map<string,gas>ID:map<string,gas> [PK] #FK to map<string,gas>);gas_per_key(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,map<gaskey,gas>_ID:map<gaskey,gas> [PK] #FK to map<gaskey,gas>);atm_gas_def(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,map<string,gas>_ID:map<string,gas> [PK] #FK to map<string,gas>);atm_gas_defleg(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,map<string,gas>_ID:map<string,gas> [PK] #FK to map<string,gas>);gas_p_key_def(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,map<gaskey,gas>_ID:map<gaskey,gas> [PK] #FK to map<gaskey,gas>);

painter(id:Integer [PK]);

wardrobe(id:Long [PK]);

generationuser(id:int [PK]);

software(name:String [PK]);

generationgroup(id:int [PK], GeneratedName:Generation);

painting(sizex:int, sizey:int, name:String [PK], painter:String [PK]);

a320b();

cuisine();

flight(id:String [PK]);

stay(//memberdeclarationid:int, GeneratedName:Person, old:Person, veryold:Person, start:Date, end:Date, vessel:String, authoriser:String, comments:String);

leaf(id:Integer [PK], GeneratedName:Branch #FK to(branch));

branch(id:Integer [PK]);

person(//memberdeclarationid:int, firstname:String, lastname:String, companyname:String);

bid(id:int [PK], itemid:long, amount:double);

item(id:long [PK], name:String);

highestbid(name:String [PK], amount:double);

customer(id:Integer [PK], serialversionuid:long);

card(primarykey:CardPrimaryKey [PK], main:CardField #FK to(cardfield));

basketitems(serialversionuid:long, basketdatetime:ShoppingBaskets [PK] #FK to(shoppingbaskets), cost:Double [PK]);

shoppingbaskets(serialversionuid:long, customerid:Customers [PK] #FK to(Customer), basketdatetime:java.util.Date [PK]);

store(id:Integer [PK], serialversionuid:long);

storecustomer(GeneratedName:Store [PK] #FK to(store), GeneratedName:Customer [PK] #FK to(Customer), serialversionuid:long);

project(id:int [PK]);

cardfield(GeneratedName:PrimaryKey [PK], tmp:Card #FK to(card));

customers(serialversionuid:long, customerid:int [PK]);

cardkey(id:int [PK]);

service(idpk:BigInteger [PK]);

benefserv(idpk:BigInteger [PK], idpkser:Service #FK to(service));

a(id:int [PK]);

droitacces(idpk:BigInteger [PK], idpkbenef:Benefserv #FK to(benefserv));

c(prent:A [PK], sequencenumber:int [PK]);

acces(idpk:BigInteger [PK], idpkdracc:Droitacces #FK to(droitacces));

b(parent:C [PK], sequencenumber:int [PK]);

contest(id:int [PK], heldin:Month);

competitor(id:int [PK], name:String);

americacupclass(GeneratedName:Country);

savingsaccount();

account();

products(id:Integer [PK], widgets:Set<Widgets>);

bugsystem(id:Integer [PK], bugs:Set<Bug>);

matrix(id:Integer [PK], mvalues:SortedMap<Integer,Float>);

sale(id:Integer [PK], contacts:List<Contact>);

c(id:int [PK], comment:String);

a(id:int [PK], listofb:List<B>);

testcourse(testcourseid:Long [PK], title:LocalizedString);

boy(id:Integer [PK], firstname:String, lastname:String, nicknames:Set<String>, hatednames:Set<String>, preferrednames:Set<String>, scorepernickname:Map<String,Integer>, scoreperpreferredname:Map<String,Integer>, favoritenumbers:int, favoritetoys:Set<Toy>, characters:Set<Character>, foods:Map<String,FavoriteFood>, countryattitudes:Set<CountryAttitude>);

widgets(name:String, id:int [PK]);

someentity(id:java.util.Date [PK], timedata:java.sql.Time, tsdata:java.sql.Timestamp, data:Byte, chardata:Character);

someotherentity(id:int [PK], data:boolean, data:byte, acterdata:char, data:short, egerdata:int, data:long, data:double, data:float, GeneratedName:Grade);

bed();

foobar(foo:String);

tourist(id:long [PK], name:String, destination:String);

rentalcar(id:int [PK], GeneratedName:Driver);

boy(id:long [PK], nicknames:Set<String>);

waiter();

driver(id:int [PK], name:String);

cook(id:int [PK], favouriteknife:Knive);

person(firstname:String, lastname:String);

course1(id:long [PK], title:String);

course5(id:long [PK], title:String);

course5_list<student>(course5ID:course5 [PK] #FK to course5,list<student>ID:list<student> [PK] #FK to list<student>);

circle(GeneratedName:Color);

chair();

animal(id:long [PK]);

student(id:long [PK], name:String);

course4(id:long [PK], title:String);

being(id:long [PK]);

course8(id:long [PK], title:String);

bigbed(size:int);

course2(id:long [PK], title:String);

square(id:long [PK], GeneratedName:Position);

course6(id:long [PK], title:String);

bed();

horse(name:String);

shape(id:long [PK]);

user();

gardenshed(id:Integer [PK], floors:long);

course3(id:long [PK], title:String);

course7(id:long [PK], title:String);

furniture(id:Integer [PK], weight:long);

gardenshed(id:Integer [PK], floors:long);

chair();

bigbed(size:int);

furniture(id:Integer [PK], weight:long);

deck(id:Integer [PK]);

card(id:Integer [PK], GeneratedName:Deck #FK to(deck));

multiple(id1:Long [PK], id2:Long [PK], id3:Long [PK], quantity:int);

simple2(id1:Long [PK], id2:Long [PK], quantity:int);

simple(id1:Long [PK], id2:Long [PK], quantity:int);

domainadmin(domainname:String [PK], adminuser:String [PK], nickname:String);

team(id:Long [PK]);

player(id:Long [PK], GeneratedName:Team, name:String);

incorrectentity(name:String);

bug(id:int [PK], title:String);

`bug_category`(Bug_ID:Bug [PK] #FK to Bug,Category_ID:Category [PK] #FK to Category);

printercable(id:Long [PK], GeneratedName:Printer);

category(id:int [PK], title:String);

printer(id:Long [PK]);

gsm(frequency:int);

voice(id:Integer [PK]);

contactimpl(id:Integer [PK], name:String);

userimpl(id:Integer [PK]);

parenthierarchy1();

parenthierarchy22();

childhierarchy22();

childhierarchy1();

spaceship(name:String [PK], model:String, speed:double, GeneratedName:Captain, GeneratedName:Dimensions);

night(id:Integer [PK], duration:long, GeneratedName:Date, GeneratedName:Area);

mark(id:int [PK], value:int);

twilight(id:int [PK]);

dictionary(id:Integer [PK], name:String, editor:String);

area(id:Integer [PK], name:String);

chaos(id:Long [PK], size:Long, name:String, nickname:String);

captain(firstname:String [PK], lastname:String [PK]);

synonymousdictionary();

casimirparticle(id:Long [PK]);

citizen(id:Integer [PK], firstname:String, lastname:String, GeneratedName:State #FK to(state), ssn:String);

naturalidonmanytoone(id:int [PK], GeneratedName:Citizen #FK to(citizen));

state(id:Integer [PK], name:String);

regionalarticle(pk:RegionalArticlePk [PK], name:String);

spreaddeal(/***withthetenor.*/long:Swap, /***withthelongertenor.*/short:Swap);

country(iso2:String [PK], name:String);

person(id:Long [PK], name:String, GeneratedName:Address);

alias(id:Long [PK], GeneratedName:Name, source:String);

person(id:Long [PK], name:PersonName);

corptype(id:Integer [PK], type:String);

person(id:Integer [PK], name:String, GeneratedName:Address, bornin:Country);

manager(id:Integer [PK], name:String, employer:InternetProvider #FK to(internetprovider));

addresstype(id:Integer [PK], name:String);

nationality(id:Integer [PK], name:String);

favoritethings(id:int [PK], web:InternetFavorites);

internetprovider(id:Integer [PK], brandname:String, owner:LegalStructure);

wealthyperson(//})vacationhomes:Set<Address>, legacyvacationhomes:Set<Address>, explicitvacationhomes:Set<Address>);

vanillaswap(/***identifieroftheinterestrateswap*/instrumentid:String, /***oftheswap(andofbothlegs).*/:Currency, /***fixedleg(cashflowswiththefixedrate).*/:FixedLeg, /***floatingleg(cashflowsboundtoafinancialindex).*/:FloatLeg);

book(isbn:String [PK], name:String, GeneratedName:Summary);

boat(id:Integer [PK], size:int, weight:int);

someguy(id:Integer [PK]);

papertype(id:Integer [PK], name:String);

price(id:Integer [PK], amount:Double, currency:String);

wildentity(serialversionuid:long, id:int [PK], property:String);

paper();

gene(id:Integer [PK], state:STE);

dummy(id:Long [PK]);

classes();

dna(id:Integer [PK]);

zimpl(serialversionuid:long, zid:Integer [PK], GeneratedName:B);

bimpl(serialversionuid:long, bid:Integer);

primeminister(id:Integer [PK], name:String, current:Government);

sky(id:Integer [PK], maincloud:CloudType #FK to(cloudtype));

sky_set<cloudtype>(skyID:sky [PK] #FK to sky,set<cloudtype>ID:set<cloudtype> [PK] #FK to set<cloudtype>);

aimpl(serialversionuid:long, aid:Integer [PK]);

manufacturer(id:Integer [PK]);

topic(id:int [PK]);

washingmachine(id:Integer [PK], transientisactive:boolean);

communitybid(communitynote:Starred);

peugot();

car(id:int [PK], name:String);

flight(id:Long [PK], maxaltitudeinmilimeter:long, maxaltitude:long);

forest(id:Integer [PK], name:String, length:long, longdescription:String, smalltext:String, bigtext:String, GeneratedName:Country, near:Set);

player(id:int [PK], name:String, team:SoccerTeam #FK to(Team), //fortheworldcupofoneversusonematches,wehave//teamswithoneplayer(1v1team).onevoneteam:SoccerTeam);

formallastname(id:Integer [PK], GeneratedName:LastName, designation:String);

bid(id:Integer [PK], description:String, note:Starred, editorsnote:Starred, approved:Boolean);

race(length:Long, id:Integer [PK]);

narrative(id:int [PK], state:String, GeneratedName:Topic);

contactdetails(id:int [PK], local:PhoneNumber, GeneratedName:OverseasPhoneNumber);

ransom(id:Integer [PK], kidnappername:String, amount:MonetaryAmount, GeneratedName:Date);

tree(id:Integer [PK], name:String);

localcontactdetails(id:int [PK], local:PhoneNumber, GeneratedName:OverseasPhoneNumber);

address(id:Integer [PK], city:String, GeneratedName:Country);

drill(id:int [PK]);

soccerteam(id:int [PK], name:String, onevone:Player #FK to(player));

name(id:Integer [PK], GeneratedName:LastName);

zipcode(code:String [PK]);

father(id:Integer [PK]);

mother(id:Integer [PK]);

son(id:Integer [PK], GeneratedName:Father, GeneratedName:Mother);

sportcar();

car(id:Integer [PK], model:String);

knownclient(id:Integer [PK], name:String);

inspectorprefixes(prefixes:String);

deserted_area(inspector_name:InspectorPrefixes [PK] #FK to InspectorPrefixes,area_id:list<zone> [PK] #FK to list<zone>);inspector_prefixes_areas(inspector_id:InspectorPrefixes [PK] #FK to InspectorPrefixes,area_id:list<zone> [PK] #FK to list<zone>);

programmanager(id:int [PK]);

building(id:Long [PK], name:BuildingCompany #FK to(Company));

employee(id:Integer [PK], name:String, GeneratedName:ContactInfo, GeneratedName:JobInfo);

store(id:Integer [PK], name:String);

store_set<knownclient>(storeID:store [PK] #FK to store,set<knownclient>ID:set<knownclient> [PK] #FK to set<knownclient>);storesupplier(store:Store [PK] #FK to Store,supplier:set<supplier> [PK] #FK to set<supplier>);store_set<city>(storeID:store [PK] #FK to store,set<city>ID:set<city> [PK] #FK to set<city>);

groupwithset(id:Integer [PK]);

groupwithset_set<permission>(groupwithsetID:groupwithset [PK] #FK to groupwithset,set<permission>ID:set<permission> [PK] #FK to set<permission>);

contractor(hourlyrate:float);

permission(permission:String [PK], expiration:Date);

woman(id:WomanPk [PK], carname:String);

man_woman(womanlastname:Woman [PK] #FK to Woman,maniselder:set<man> [PK] #FK to set<man>);

inspector(_id:Long [PK], name:String);

friend(id:Integer [PK], name:String);

friend2friend(from_fr:Friend [PK] #FK to Friend,to_fr:set<friend> [PK] #FK to set<friend>);

city(id:Integer [PK], name:String);

supplier(id:Integer [PK], name:String);

phonenumber(phnumber:int [PK]);

buildingcompany(id:Long [PK], foundedin:Date);

man(id:ManPk [PK], carname:String);

zone(id:Integer [PK]);

group(id:Integer [PK]);

group_collection<permission>(groupID:group [PK] #FK to group,collection<permission>ID:collection<permission> [PK] #FK to collection<permission>);

employer(id:Integer [PK]);

employer_employee(emper_id:Employer [PK] #FK to Employer,empee_id:collection [PK] #FK to collection);employer_contractor(employer_id:Employer [PK] #FK to Employer,contractor_id:list [PK] #FK to list);

cat(id:CatPk, age:int);

tt(Cat_ID:Cat [PK] #FK to Cat,set<woman>_ID:set<woman> [PK] #FK to set<woman>);

dependent(//idattributemappedbyjoincolumndefaultid:DependentId, GeneratedName:Employee #FK to(Employee));

medicalhistory(patient:Person [PK] #FK to(Person), xraydata:byte);

dependent(//defaultcolumnnamefor"name"attributeisoverriddenid:DependentId, firstname:Employee #FK to(Employee));

employee(empid:EmployeeId);

dependent(//defaultcolumnnameisoverriddenname:String [PK], firstname:Employee [PK] #FK to(Employee));

employee(empid:EmployeeId);

person(ssn:String [PK]);

employer(name:String [PK], GeneratedName:Employee [PK] #FK to(Employee));

financialhistory(//overridingnotallowed...//defaultjoincolumnnameisoverridden@mapsidid:String [PK], lastup:Date, patient:Person #FK to(Person));

person(ssn:String [PK]);

medicalhistory(//overridingnotallowed...//defaultjoincolumnnameisoverridden@mapsidid:String [PK], patient:Person #FK to(Person), lastup:Date);

medicalhistory(patient:Person [PK] #FK to(Person), lastup:Date);

simple(ssn:String [PK], name:String [PK]);

financialhistory(patient:Person [PK] #FK to(Person), lastup:Date);

person(ssn:String [PK]);

employee(id:long [PK], name:String);

person(id:PersonId);

medicalhistory(patient:Person [PK] #FK to(Person));

person(id:PersonId);

medicalhistory(//allattributesmaptorelationship:attributeoverridenotallowedid:PersonId, patient:Person #FK to(Person));

employee(empid:long [PK], empname:String);

dependent(name:String [PK], emp:Employee [PK] #FK to(Employee));

customerinventory(id:Integer [PK], GeneratedName:Customer [PK] #FK to(Customer), vehicle:Item #FK to(Item), totalcost:BigDecimal, quantity:int, version:int);

customer(query_all:String, query_count:String, query_by_credit:String, bad_credit:String, id:int [PK], firstname:String, lastname:String, contact:String, credit:String, creditlimit:BigDecimal, since:Calendar, balance:BigDecimal, ytdpayment:BigDecimal, version:int);

item(query_by_category:String, id:String [PK], name:String, price:BigDecimal, description:String, discount:BigDecimal, category:int, version:int);

employee(empid:long [PK], empname:String);

customer(query_all:String, query_count:String, query_by_credit:String, bad_credit:String, id:int [PK], firstname:String, lastname:String, contact:String, credit:String, creditlimit:BigDecimal, since:Calendar, balance:BigDecimal, ytdpayment:BigDecimal, version:int);

item(query_by_category:String, id:String [PK], name:String, price:BigDecimal, description:String, discount:BigDecimal, category:int, version:int);

customerinventory(id:Integer [PK], custid:int [PK], GeneratedName:Customer #FK to(Customer), vehicle:Item #FK to(Item), totalcost:BigDecimal, quantity:int, version:int);

exclusivedependent(id:DependentId, emp:Employee #FK to(Employee));

dependent(id:DependentId, //@joincolumn(name:Employee #FK to(Employee));

employee(empid:long [PK], empname:String, nickname:String);

dependent(name:String [PK], //idattributemappedbyjoincolumndefaultemp:Employee);

person(id:Integer [PK]);

medicalhistory(id:Integer [PK], patient:Person #FK to(Person));

person(firstname:String [PK], lastname:String [PK]);

medicalhistory(patient:Person [PK] #FK to(Person));

person(firstname:String [PK], lastname:String [PK]);

medicalhistory(//allattributesmaptorelationship:attributeoverridenotallowedid:PersonId, patient:Person #FK to(Person));

orderline(GeneratedName:Order [PK] #FK to(Order), GeneratedName:Product [PK] #FK to(Product), amount:Integer);

order(id:Long [PK], name:String);

dependent(emp:Employee [PK] #FK to(Employee), name:String);

product(id:Long [PK], name:String);

foo(id:Long [PK], name:String, GeneratedName:Bar #FK to(bar));

bar(GeneratedName:Foo [PK] #FK to(foo), details:String);

employee(empid:long [PK], empname:String);

employee(firstname:String [PK], lastname:String [PK]);

dependent(id:DependentId, emp:Employee #FK to(Employee));

dependent(name:String [PK], firstname:Employee [PK] #FK to(Employee));

employee(firstname:String [PK], lastname:String [PK]);

ferry(sea:String);

owner(id:Integer [PK], address:OwnerAddress #FK to(Address));

partyaffiliate(partyid:String [PK], GeneratedName:Party #FK to(Part), affiliatename:String);

serialnumber(id:SerialNumberPk [PK], value:String);

trouserszip(id:Integer [PK], GeneratedName:Trousers #FK to(User));

manageddevice(name:String, GeneratedName:Device, GeneratedName:DeviceGroupConfig);

owner(deleted:boolean, id:Long [PK], name:String, version:Integer);

devicegroupconfig(name:String);

device(GeneratedName:ManagedDevice, tag:String);

body(id:Integer [PK], GeneratedName:Heart);

owneraddress(id:Integer [PK], GeneratedName:Owner #FK to(Owner));

address(id:long [PK], GeneratedName:Person #FK to(Person));

person(id:long [PK], GeneratedName:Address #FK to(Address));

heart(id:Integer [PK]);

address(id:Integer [PK], city:String);

show(id:Integer [PK], description:ShowDescription #FK to(showdescription));

computer(id:ComputerPk, cpu:String, serial:SerialNumber #FK to(serialnumber));

client(id:Integer [PK], name:String, GeneratedName:Address);

party(partyid:String [PK], GeneratedName:PartyAffiliate #FK to(Part));

trousers(id:Integer [PK], zip:TrousersZip #FK to(User));

showdescription(id:Integer [PK], GeneratedName:Show #FK to(show));

a320(javaembeddedversion:String);

port(id:Long [PK]);

tooth(id:Integer [PK], type:String, leftneighbour:Tooth #FK to(tooth), rightneighbour:Tooth #FK to(tooth), GeneratedName:Mouth #FK to(mouth));

mouth(id:Integer [PK], size:int);

fruit(id:Integer [PK]);

house();

noise();

trash(id:Integer [PK]);

building(id:Integer [PK], street:String);

music(id:Integer [PK], avgbeat:int, type:Integer);

papertrash();

funk(starred:int);

rock();

symboliclink(target:File #FK to(file));

folder();

document(size:int);

parent(id:Integer [PK], propertyass:Set, financialass:Set);

sweater(issweat:boolean);

swimmingpool();

customer(customername:String, customercode:String);

file(name:String [PK], parent:Folder #FK to(Folder));

company(companyname:String, companyaddress:String);

document(size:int);

clothing(id:long [PK], size:int, color:String);

eventinformation(notificationid:String [PK]);

account(serialversionuid:long, id:int [PK], number:String, balance:double);

financialasset(price:double);

person(id:int [PK], name:String, firtsname:String);

client(serialversionuid:long, street:String, code:String, city:String, id:Account #FK to(Account));

propertyasset(price:double);

programexecution(id:Integer [PK], action:String, applieson:File #FK to(file));

alarm(eventinfo:EventInformation #FK to(orm));

pool(id:Integer [PK], address:String);

symboliclink(target:File #FK to(file));

folder();

asset(id:Integer [PK], GeneratedName:Parent);

carrot(length:int);

vegetable(id:VegetablePk [PK], priceincent:long);

subclass();

baseclass(id:long [PK]);

folder();

symboliclink(target:File #FK to(file));

document(size:int);

file(name:String [PK], parent:Folder #FK to(Folder));

apple();

tomato(size:int);

address(id:long [PK], GeneratedName:Person #FK to(Person));

a(id:String [PK], name:String, value:int, address:Set<AddressEntry>);

person(id:long [PK]);

supporttickets(id:long [PK], description:String, resolution:String);

customer2(id:long [PK], name:String, customernumber:long);

customer(id:long [PK], name:String, customernumber:long, last:Order #FK to(Order));

customer3(id:long [PK], name:String, customernumber:long);

customer5(id:long [PK], name:String, customernumber:long);

order(id:long [PK], ordernumber:long, delivery:Date, GeneratedName:Country #FK to(country));

customer4(id:long [PK], name:String, customernumber:long);

country(id:Integer [PK], name:String);

plane(id:Long [PK], nbrofseats:int, planetype: String);

b(id:Long [PK]);

drill(, DRILL_TYPE: String);

hardware(parent:Hardware #FK to(hardware), DeviceType: String);

file(name:String [PK], parent:Folder #FK to(Folder));



** PROGRAM TYPE: JPA+Hibernate(Hybrid)