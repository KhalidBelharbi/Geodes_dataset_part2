ClassDiagram.Class>> CheckNumber =>=>=> RelationalSchema.Table>> checknumber;
ClassDiagram.Class>> CreditCard =>=>=> RelationalSchema.Table>> creditcard;
ClassDiagram.Class>> Payment =>=>=> RelationalSchema.Table>> payment;
ClassDiagram.Class>> Programmer =>=>=> RelationalSchema.Table>> programmer;
ClassDiagram.Class>> Project =>=>=> RelationalSchema.Table>> project;
ClassDiagram.Class>> License =>=>=> RelationalSchema.Table>> license;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> PhoneNumber =>=>=> RelationalSchema.Table>> phonenumber;
ClassDiagram.Class>> Customer =>=>=> RelationalSchema.Table>> customer;
ClassDiagram.Class>> Image =>=>=> RelationalSchema.Table>> image;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> Employee2 =>=>=> RelationalSchema.Table>> employee2;
ClassDiagram.Attribut>> CheckNumber.checknumber:String =>=>=> RelationalSchema.Column>> checknumber.checknumber;
ClassDiagram.Attribut>> CreditCard.cardnumber:String =>=>=> RelationalSchema.Column>> creditcard.cardnumber;
ClassDiagram.Attribut>> Payment.id:int =>=>=> RelationalSchema.Column>> payment.id PRIMARY KEY;
ClassDiagram.Attribut>> Payment.amount:double =>=>=> RelationalSchema.Column>> payment.amount;
ClassDiagram.Attribut>> Programmer.id:int =>=>=> RelationalSchema.Column>> programmer.id PRIMARY KEY;
ClassDiagram.Attribut>> Programmer.name:String =>=>=> RelationalSchema.Column>> programmer.name;
ClassDiagram.Attribut>> Programmer.sal:int =>=>=> RelationalSchema.Column>> programmer.sal;
ClassDiagram.Attribut>> Project.id:int =>=>=> RelationalSchema.Column>> project.id PRIMARY KEY;
ClassDiagram.Attribut>> Project.name:String =>=>=> RelationalSchema.Column>> project.name;
ClassDiagram.Attribut>> License.id:Long =>=>=> RelationalSchema.Column>> license.id PRIMARY KEY;
ClassDiagram.Attribut>> License.type:String =>=>=> RelationalSchema.Column>> license.type;
ClassDiagram.Attribut>> Person.id:Long =>=>=> RelationalSchema.Column>> person.id PRIMARY KEY;
ClassDiagram.Attribut>> Person.firstname:String =>=>=> RelationalSchema.Column>> person.firstname;
ClassDiagram.Attribut>> Person.lastname:String =>=>=> RelationalSchema.Column>> person.lastname;
ClassDiagram.Attribut>> Person.age:int =>=>=> RelationalSchema.Column>> person.age;
ClassDiagram.Attribut>> PhoneNumber.id:long =>=>=> RelationalSchema.Column>> phonenumber.id PRIMARY KEY;
ClassDiagram.Attribut>> PhoneNumber.number:String =>=>=> RelationalSchema.Column>> phonenumber.number;
ClassDiagram.Attribut>> PhoneNumber.type:String =>=>=> RelationalSchema.Column>> phonenumber.type;
ClassDiagram.Attribut>> Customer.id:long =>=>=> RelationalSchema.Column>> customer.id PRIMARY KEY;
ClassDiagram.Attribut>> Customer.name:String =>=>=> RelationalSchema.Column>> customer.name;
ClassDiagram.Attribut>> Image.id:long =>=>=> RelationalSchema.Column>> image.id PRIMARY KEY;
ClassDiagram.Attribut>> Image.name:String =>=>=> RelationalSchema.Column>> image.name;
ClassDiagram.Attribut>> Image.data:byte =>=>=> RelationalSchema.Column>> image.data;
ClassDiagram.Attribut>> Employee.serialversionuid:long =>=>=> RelationalSchema.Column>> employee.serialversionuid;
ClassDiagram.Attribut>> Employee.name:String =>=>=> RelationalSchema.Column>> employee.name;
ClassDiagram.Attribut>> Employee.score:int =>=>=> RelationalSchema.Column>> employee.score;
ClassDiagram.Attribut>> Employee2.id:int =>=>=> RelationalSchema.Column>> employee2.id PRIMARY KEY;
ClassDiagram.Attribut>> Employee2.name:String =>=>=> RelationalSchema.Column>> employee2.name;
ClassDiagram.Attribut>> Employee2.GeneratedName:Address =>=>=> RelationalSchema.Column>> employee2.GeneratedName;
Many-To-Many relationship between ClassDiagram.Class>>Programmer  and ClassDiagram.Class>>set<project>: programmers_projects(programmer_id:Programmer [PK] #FK to Programmer,project_id:set<project> [PK] #FK to set<project>);
One-To-One relationship between ClassDiagram.Class>>License  to ClassDiagram.Class>>person represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Person  to ClassDiagram.Class>>license represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>PhoneNumber  to ClassDiagram.Class>>customer represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Customer  to ClassDiagram.Class>>Set<PhoneNumber>;
Inheritance based on Table-Per-Class strategy (PUSH-DOWN): ROOT>>Payment  ;
