ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> Comment =>=>=> RelationalSchema.Table>> comment;
ClassDiagram.Class>> Post =>=>=> RelationalSchema.Table>> post;
ClassDiagram.Attribut>> User.id:Integer =>=>=> RelationalSchema.Column>> user.id PRIMARY KEY;
ClassDiagram.Attribut>> User.nameuser:String =>=>=> RelationalSchema.Column>> user.nameuser;
ClassDiagram.Attribut>> User.datecreated:java.util.Date =>=>=> RelationalSchema.Column>> user.datecreated;
ClassDiagram.Attribut>> Comment.id:Integer =>=>=> RelationalSchema.Column>> comment.id PRIMARY KEY;
ClassDiagram.Attribut>> Comment.text:String =>=>=> RelationalSchema.Column>> comment.text;
ClassDiagram.Attribut>> Comment.datecreated:java.util.Date =>=>=> RelationalSchema.Column>> comment.datecreated;
ClassDiagram.Attribut>> Post.id:Integer =>=>=> RelationalSchema.Column>> post.id PRIMARY KEY;
ClassDiagram.Attribut>> Post.txt:String =>=>=> RelationalSchema.Column>> post.txt;
ClassDiagram.Attribut>> Post.datecreated:java.util.Date =>=>=> RelationalSchema.Column>> post.datecreated;
Many-To-One relationship from ClassDiagram.Class>>Comment  to ClassDiagram.Class>>user represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Comment  to ClassDiagram.Class>>post represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Post  to ClassDiagram.Class>>user represented by ClassDiagram.Atrribute>>GeneratedName;
