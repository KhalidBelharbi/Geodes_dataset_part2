ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> Credentials =>=>=> RelationalSchema.Table>> credentials;
ClassDiagram.Class>> Message =>=>=> RelationalSchema.Table>> message;
ClassDiagram.Class>> Wall =>=>=> RelationalSchema.Table>> wall;
ClassDiagram.Class>> UserRelationship =>=>=> RelationalSchema.Table>> userrelationship;
ClassDiagram.Class>> Post =>=>=> RelationalSchema.Table>> post;
ClassDiagram.Class>> Role =>=>=> RelationalSchema.Table>> role;
ClassDiagram.Class>> CommunityMessage =>=>=> RelationalSchema.Table>> communitymessage;
ClassDiagram.Class>> Community =>=>=> RelationalSchema.Table>> community;
ClassDiagram.Attribut>> User.id:Integer =>=>=> RelationalSchema.Column>> user.id PRIMARY KEY;
ClassDiagram.Attribut>> User.name:String =>=>=> RelationalSchema.Column>> user.name;
ClassDiagram.Attribut>> User.surname:String =>=>=> RelationalSchema.Column>> user.surname;
ClassDiagram.Attribut>> User.birthday:Date =>=>=> RelationalSchema.Column>> user.birthday;
ClassDiagram.Attribut>> User.email:String =>=>=> RelationalSchema.Column>> user.email;
ClassDiagram.Attribut>> User.activestatus:Boolean =>=>=> RelationalSchema.Column>> user.activestatus;
ClassDiagram.Attribut>> Credentials.id:Integer =>=>=> RelationalSchema.Column>> credentials.id PRIMARY KEY;
ClassDiagram.Attribut>> Credentials.login:String =>=>=> RelationalSchema.Column>> credentials.login;
ClassDiagram.Attribut>> Credentials.password:String =>=>=> RelationalSchema.Column>> credentials.password;
ClassDiagram.Attribut>> Message.id:Integer =>=>=> RelationalSchema.Column>> message.id PRIMARY KEY;
ClassDiagram.Attribut>> Message.GeneratedName:Date =>=>=> RelationalSchema.Column>> message.GeneratedName;
ClassDiagram.Attribut>> Message.text:String =>=>=> RelationalSchema.Column>> message.text;
ClassDiagram.Attribut>> Wall.id:Integer =>=>=> RelationalSchema.Column>> wall.id PRIMARY KEY;
ClassDiagram.Attribut>> UserRelationship.GeneratedName:UserRelationshipKey =>=>=> RelationalSchema.Column>> userrelationship.GeneratedName;
ClassDiagram.Attribut>> UserRelationship.status:UserStatus =>=>=> RelationalSchema.Column>> userrelationship.status;
ClassDiagram.Attribut>> Post.id:Integer =>=>=> RelationalSchema.Column>> post.id PRIMARY KEY;
ClassDiagram.Attribut>> Post.header:String =>=>=> RelationalSchema.Column>> post.header;
ClassDiagram.Attribut>> Post.text:String =>=>=> RelationalSchema.Column>> post.text;
ClassDiagram.Attribut>> Post.GeneratedName:Date =>=>=> RelationalSchema.Column>> post.GeneratedName;
ClassDiagram.Attribut>> Role.id:Integer =>=>=> RelationalSchema.Column>> role.id PRIMARY KEY;
ClassDiagram.Attribut>> Role.name:String =>=>=> RelationalSchema.Column>> role.name;
ClassDiagram.Attribut>> CommunityMessage.id:Integer =>=>=> RelationalSchema.Column>> communitymessage.id PRIMARY KEY;
ClassDiagram.Attribut>> CommunityMessage.GeneratedName:Date =>=>=> RelationalSchema.Column>> communitymessage.GeneratedName;
ClassDiagram.Attribut>> CommunityMessage.text:String =>=>=> RelationalSchema.Column>> communitymessage.text;
ClassDiagram.Attribut>> Community.id:Integer =>=>=> RelationalSchema.Column>> community.id PRIMARY KEY;
ClassDiagram.Attribut>> Community.name:String =>=>=> RelationalSchema.Column>> community.name;
ClassDiagram.Attribut>> Community.topic:String =>=>=> RelationalSchema.Column>> community.topic;
One-To-Many relationship from ClassDiagram.Class>>User  to ClassDiagram.Class>>Set<Message>;
One-To-Many relationship from ClassDiagram.Class>>User  to ClassDiagram.Class>>Set<Message>;
Many-To-Many relationship between ClassDiagram.Class>>User  and ClassDiagram.Class>>Role: user_has_role(user_id:User [PK] #FK to User,role_id:Role [PK] #FK to Role);
One-To-Many relationship from ClassDiagram.Class>>User  to ClassDiagram.Class>>Set<UserRelationship>;
One-To-Many relationship from ClassDiagram.Class>>User  to ClassDiagram.Class>>Set<UserRelationship>;
One-To-One relationship between ClassDiagram.Class>>User  to ClassDiagram.Class>>Credentials represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>User  to ClassDiagram.Class>>Wall represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>User  to ClassDiagram.Class>>Set<CommunityMessage>;
Many-To-Many relationship between ClassDiagram.Class>>User  and ClassDiagram.Class>>set<community>: user_has_role(user_id:User [PK] #FK to User,role_id:Role [PK] #FK to Role);community_has_user(user_id:User [PK] #FK to User,community_id:set<community> [PK] #FK to set<community>);
One-To-Many relationship from ClassDiagram.Class>>User  to ClassDiagram.Class>>Set<Post>;
One-To-One relationship between ClassDiagram.Class>>Credentials  to ClassDiagram.Class>>User represented by ClassDiagram.Atrribute>>//deletebecauseemailcannotbenull//@joincolumn(name;
Many-To-One relationship from ClassDiagram.Class>>Message  to ClassDiagram.Class>>User represented by ClassDiagram.Atrribute>>receiver;
Many-To-One relationship from ClassDiagram.Class>>Message  to ClassDiagram.Class>>User represented by ClassDiagram.Atrribute>>sender;
One-To-One relationship between ClassDiagram.Class>>Wall  to ClassDiagram.Class>>User represented by ClassDiagram.Atrribute>>//@onetoone(fetch;
One-To-Many relationship from ClassDiagram.Class>>Wall  to ClassDiagram.Class>>Set<Post>;
Many-To-One relationship from ClassDiagram.Class>>UserRelationship  to ClassDiagram.Class>>User represented by ClassDiagram.Atrribute>>id;
Many-To-One relationship from ClassDiagram.Class>>UserRelationship  to ClassDiagram.Class>>User represented by ClassDiagram.Atrribute>>friendid;
Many-To-One relationship from ClassDiagram.Class>>Post  to ClassDiagram.Class>>Wall represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Post  to ClassDiagram.Class>>User represented by ClassDiagram.Atrribute>>//@manytoone(fetch;
Many-To-One relationship from ClassDiagram.Class>>CommunityMessage  to ClassDiagram.Class>>User represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>CommunityMessage  to ClassDiagram.Class>>community represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Community  to ClassDiagram.Class>>User represented by ClassDiagram.Atrribute>>moderator;
One-To-Many relationship from ClassDiagram.Class>>Community  to ClassDiagram.Class>>List<CommunityMessage>;
