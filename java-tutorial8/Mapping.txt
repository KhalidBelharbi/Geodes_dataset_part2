ClassDiagram.Class>> TemporalValues =>=>=> RelationalSchema.Table>> temporalvalues;
ClassDiagram.Class>> Course =>=>=> RelationalSchema.Table>> course;
ClassDiagram.Class>> MyProduct =>=>=> RelationalSchema.Table>> myproduct;
ClassDiagram.Class>> Car =>=>=> RelationalSchema.Table>> car;
ClassDiagram.Class>> Pet =>=>=> RelationalSchema.Table>> pet;
ClassDiagram.Class>> MyEmployee =>=>=> RelationalSchema.Table>> myemployee;
ClassDiagram.Class>> Pen =>=>=> RelationalSchema.Table>> pen;
ClassDiagram.Class>> Book =>=>=> RelationalSchema.Table>> book;
ClassDiagram.Class>> Animal =>=>=> RelationalSchema.Table>> animal;
ClassDiagram.Class>> Vehicle =>=>=> RelationalSchema.Table>> vehicle;
ClassDiagram.Class>> Bag =>=>=> RelationalSchema.Table>> bag;
ClassDiagram.Class>> Supplier =>=>=> RelationalSchema.Table>> supplier;
ClassDiagram.Class>> UserProfile =>=>=> RelationalSchema.Table>> userprofile;
ClassDiagram.Class>> Department =>=>=> RelationalSchema.Table>> department;
ClassDiagram.Class>> Student =>=>=> RelationalSchema.Table>> student;
ClassDiagram.Class>> EntityDescription =>=>=> RelationalSchema.Table>> entitydescription;
ClassDiagram.Class>> Phone =>=>=> RelationalSchema.Table>> phone;
ClassDiagram.Class>> OrderEntryIdClass =>=>=> RelationalSchema.Table>> orderentryidclass;
ClassDiagram.Class>> Product =>=>=> RelationalSchema.Table>> product;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> OrderEntry =>=>=> RelationalSchema.Table>> orderentry;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Attribut>> TemporalValues.id:long =>=>=> RelationalSchema.Column>> temporalvalues.id PRIMARY KEY;
ClassDiagram.Attribut>> TemporalValues.sqldate:java.sql.Date =>=>=> RelationalSchema.Column>> temporalvalues.sqldate;
ClassDiagram.Attribut>> TemporalValues.sqltime:java.sql.Time =>=>=> RelationalSchema.Column>> temporalvalues.sqltime;
ClassDiagram.Attribut>> TemporalValues.sqltimestamp:java.sql.Timestamp =>=>=> RelationalSchema.Column>> temporalvalues.sqltimestamp;
ClassDiagram.Attribut>> TemporalValues.utildate:java.util.Date =>=>=> RelationalSchema.Column>> temporalvalues.utildate;
ClassDiagram.Attribut>> TemporalValues.utiltime:java.util.Date =>=>=> RelationalSchema.Column>> temporalvalues.utiltime;
ClassDiagram.Attribut>> TemporalValues.utiltimestamp:java.util.Date =>=>=> RelationalSchema.Column>> temporalvalues.utiltimestamp;
ClassDiagram.Attribut>> TemporalValues.calendardate:java.util.Calendar =>=>=> RelationalSchema.Column>> temporalvalues.calendardate;
ClassDiagram.Attribut>> TemporalValues.calendartimestamp:java.util.Calendar =>=>=> RelationalSchema.Column>> temporalvalues.calendartimestamp;
ClassDiagram.Attribut>> TemporalValues.localdate:java.time.LocalDate =>=>=> RelationalSchema.Column>> temporalvalues.localdate;
ClassDiagram.Attribut>> TemporalValues.localtime:java.time.LocalTime =>=>=> RelationalSchema.Column>> temporalvalues.localtime;
ClassDiagram.Attribut>> TemporalValues.offsettime:java.time.OffsetTime =>=>=> RelationalSchema.Column>> temporalvalues.offsettime;
ClassDiagram.Attribut>> TemporalValues.instant:java.time.Instant =>=>=> RelationalSchema.Column>> temporalvalues.instant;
ClassDiagram.Attribut>> TemporalValues.localdatetime:java.time.LocalDateTime =>=>=> RelationalSchema.Column>> temporalvalues.localdatetime;
ClassDiagram.Attribut>> TemporalValues.offsetdatetime:java.time.OffsetDateTime =>=>=> RelationalSchema.Column>> temporalvalues.offsetdatetime;
ClassDiagram.Attribut>> TemporalValues.zoneddatetime:java.time.ZonedDateTime =>=>=> RelationalSchema.Column>> temporalvalues.zoneddatetime;
ClassDiagram.Attribut>> Course.courseid:UUID =>=>=> RelationalSchema.Column>> course.courseid PRIMARY KEY;
ClassDiagram.Attribut>> MyProduct.productid:long =>=>=> RelationalSchema.Column>> myproduct.productid PRIMARY KEY;
ClassDiagram.Attribut>> MyProduct.name:String =>=>=> RelationalSchema.Column>> myproduct.name;
ClassDiagram.Attribut>> Car.engine:String =>=>=> RelationalSchema.Column>> car.engine;
ClassDiagram.Attribut>> Pet.name:String =>=>=> RelationalSchema.Column>> pet.name;
ClassDiagram.Attribut>> MyEmployee.company:String =>=>=> RelationalSchema.Column>> myemployee.company;
ClassDiagram.Attribut>> Pen.color:String =>=>=> RelationalSchema.Column>> pen.color;
ClassDiagram.Attribut>> Book.author:String =>=>=> RelationalSchema.Column>> book.author;
ClassDiagram.Attribut>> Animal.animalid:long =>=>=> RelationalSchema.Column>> animal.animalid PRIMARY KEY;
ClassDiagram.Attribut>> Animal.species:String =>=>=> RelationalSchema.Column>> animal.species;
ClassDiagram.Attribut>> Vehicle.vehicleid:long =>=>=> RelationalSchema.Column>> vehicle.vehicleid PRIMARY KEY;
ClassDiagram.Attribut>> Vehicle.manufacturer:String =>=>=> RelationalSchema.Column>> vehicle.manufacturer;
ClassDiagram.Attribut>> Bag.bagid:long =>=>=> RelationalSchema.Column>> bag.bagid PRIMARY KEY;
ClassDiagram.Attribut>> Bag.type:String =>=>=> RelationalSchema.Column>> bag.type;
ClassDiagram.Attribut>> Supplier.id:Integer =>=>=> RelationalSchema.Column>> supplier.id PRIMARY KEY;
ClassDiagram.Attribut>> Supplier.name:String =>=>=> RelationalSchema.Column>> supplier.name;
ClassDiagram.Attribut>> Supplier.country:String =>=>=> RelationalSchema.Column>> supplier.country;
ClassDiagram.Attribut>> UserProfile.profileid:long =>=>=> RelationalSchema.Column>> userprofile.profileid PRIMARY KEY;
ClassDiagram.Attribut>> Department.depid:long =>=>=> RelationalSchema.Column>> department.depid PRIMARY KEY;
ClassDiagram.Attribut>> Student.studentid:long =>=>=> RelationalSchema.Column>> student.studentid PRIMARY KEY;
ClassDiagram.Attribut>> EntityDescription.id:Integer =>=>=> RelationalSchema.Column>> entitydescription.id PRIMARY KEY;
ClassDiagram.Attribut>> EntityDescription.description:String =>=>=> RelationalSchema.Column>> entitydescription.description;
ClassDiagram.Attribut>> EntityDescription.entity:Serializable =>=>=> RelationalSchema.Column>> entitydescription.entity;
ClassDiagram.Attribut>> Phone.id:Integer =>=>=> RelationalSchema.Column>> phone.id PRIMARY KEY;
ClassDiagram.Attribut>> Phone.deleted:boolean =>=>=> RelationalSchema.Column>> phone.deleted;
ClassDiagram.Attribut>> Phone.number:String =>=>=> RelationalSchema.Column>> phone.number;
ClassDiagram.Attribut>> OrderEntryIdClass.orderid:long =>=>=> RelationalSchema.Column>> orderentryidclass.orderid PRIMARY KEY;
ClassDiagram.Attribut>> OrderEntryIdClass.productid:long =>=>=> RelationalSchema.Column>> orderentryidclass.productid PRIMARY KEY;
ClassDiagram.Attribut>> Product.prodid:String =>=>=> RelationalSchema.Column>> product.prodid PRIMARY KEY;
ClassDiagram.Attribut>> User.userid:long =>=>=> RelationalSchema.Column>> user.userid PRIMARY KEY;
ClassDiagram.Attribut>> OrderEntry.entryid:OrderEntryPK =>=>=> RelationalSchema.Column>> orderentry.entryid;
ClassDiagram.Attribut>> Employee.id:Integer =>=>=> RelationalSchema.Column>> employee.id PRIMARY KEY;
ClassDiagram.Attribut>> Employee.grossincome:long =>=>=> RelationalSchema.Column>> employee.grossincome;
ClassDiagram.Attribut>> Employee.taxinpercents:int =>=>=> RelationalSchema.Column>> employee.taxinpercents;
ClassDiagram.Attribut>> Employee.deleted:boolean =>=>=> RelationalSchema.Column>> employee.deleted;
ClassDiagram.Attribut>> Employee.tax:long =>=>=> RelationalSchema.Column>> employee.tax;
One-To-One relationship between ClassDiagram.Class>>UserProfile  to ClassDiagram.Class>>user represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Employee  to ClassDiagram.Class>>Set<Phone>;
Inheritance based on SINGLE-TABLE strategy (PUSH-UP): ROOT>>MyProduct   Descriminator>>product_type: String ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Animal  ;
Inheritance based on Table-Per-Class strategy (PUSH-DOWN): ROOT>>Vehicle  ;
