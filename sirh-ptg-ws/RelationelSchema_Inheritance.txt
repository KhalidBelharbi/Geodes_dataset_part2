
spperm(id:SppermId, tauxsalarial:Float, tauxpatronal:Float, montantforfait:Float, montantplafond:Float);

sprubr(norubr:Integer [PK], lirubr:String);

sppprm(id:SppprmId, nbprime:double);

spphre(id:SpphreId, spphrerecup:SpphreRecupEnum, nbh25:double, nbh50:double, nbhdim:double, nbhmai:double, nbhnuit:double, nbhssimple:double, nbhscomposees:double, nbhcomplementaires:double, nbhrecuperees:double);

spcarr(id:SpcarrId, datefin:Integer, cdcate:Integer, cdthor:Spbhor #FK to(spbhor), iban:Spbarem #FK to(spbarem));

spmatr(nomatr:Integer [PK], perpre:Integer, perrap:Integer, cdvali:String, typechainepaie:TypeChainePaieEnum);

spwfpaie(codechaine:TypeChainePaieEnum [PK], etat:SpWFEtat #FK to(spwfetat), maj:Date, periodepaie:Integer);

spprim(id:SpprimId, datefin:Integer, montantprime:Integer, refarr:Integer, datarr:Integer);

spchge(id:SpchgeId, datefin:Integer, codecreancier:Integer, matriculechargeemploye:String, codecharge:Integer, tauxpartsalariale:Double, montanttotalreglement:Double, numeroordre:Integer);

spwfetat(codeetat:SpWfEtatEnum [PK], libelleetat:String);

spbhor(cdthor:Integer [PK], taux:Double);

spbarem(iban:String [PK], ina:Integer);

spacti(code_activite_abs_non_concertee:String, code_activite_abs_concertee:String, code_activite_abs_immediate:String, code_activite_abs_greve:String, codeactvite:String [PK], libelleactivite:String);

spadmn(id:SpadmnId [PK], datfin:Integer, cdpadm:String);

sppact(id:SppactId, nbheures:double, service:String);

motifheuresup(idmotifhsup:Integer [PK], text:String, version:Integer);

reftypepointage(idreftypepointage:Integer [PK], label:String);

dpmindemannee(iddpmindemannee:Integer [PK], annee:Integer, debut:Date, fin:Date, version:Integer);

refetat(idrefetat:Integer [PK], label:String);

pointage(idpointage:Integer [PK], idagent:Integer, type:RefTypePointage #FK to(reftypepointage), lundi:Date, debut:Date, fin:Date, quantite:Integer, parent:Pointage #FK to(pointage), id_ref_prime:RefPrime #FK to(refprime), heuresuprecuperee:Boolean, heuresuprappelservice:Boolean, primeforfaitdpmrecup:Boolean, GeneratedName:RefTypeAbsence #FK to(reftypeabsence), motif:PtgComment #FK to(ptgcomment), motifhsup:MotifHeureSup #FK to(motifheuresup), commentaire:PtgComment #FK to(ptgcomment), idagentmodification:Integer, version:Integer);

ptg_pointage_ventil_date(id_pointage:Pointage [PK] #FK to Pointage,id_ventil_date:list<ventildate> [PK] #FK to list<ventildate>);

ventilprime(idventilprime:Integer [PK], idagent:Integer, debutmois:Date, id_ref_prime:RefPrime #FK to(refprime), etat:EtatPointageEnum, quantite:Double, id_ventil_date:VentilDate #FK to(ventildate), prime:Date, version:Integer);

titrerepasexportetatpayeurtask(idtitrerepasexportetatspayeurtask:Integer [PK], idagent:Integer, month:Date, creation:Date, export:Date, taskstatus:String, version:Integer);

titrerepasexportetatpayeurdata(idtitrerepasexportetatspayeurdata:Integer [PK], titrerepasexportetatspayeurtask:TitreRepasExportEtatPayeurTask #FK to(titrerepasexportetatpayeurtask), idagent:Integer, idtitrerepas:Integer, civilitetitrerepas:String, nomtitrerepas:String, prenomtitrerepas:String, naissancetitrerepas:Date, version:Integer);

droitsagent(iddroitsagent:Integer [PK], idagent:Integer, modification:Date, version:Integer);

ptg_droit_droits_agent(id_droit:DroitsAgent [PK] #FK to DroitsAgent,id_droit:set<droit> [PK] #FK to set<droit>);

revinfo(serialversionuid:long, rev:int [PK], timestamp:Date);

titrerepasetatprestataire(idtretatprestataire:Integer [PK], etatprestataire:Date, idagent:Integer, edition:Date, label:String, fichier:String, noderefalfresco:String, version:Integer);

pointagecalcule(idpointagecalcule:Integer [PK], idagent:Integer, type:RefTypePointage #FK to(reftypepointage), etat:EtatPointageEnum, lundi:Date, debut:Date, fin:Date, quantite:Double, id_ref_prime:RefPrime #FK to(refprime), id_ventil_date:VentilDate #FK to(ventildate), version:Integer);

ventiltask(idventiltask:Integer [PK], idagent:Integer, idagentcreation:Integer, creation:Date, typechainepaie:TypeChainePaieEnum, GeneratedName:RefTypePointage #FK to(reftypepointage), id_ventil_date:VentilDate #FK to(ventildate), id_ventil_date:VentilDate #FK to(ventildate), ventilation:Date, taskstatus:String, version:Integer);

dpmindemchoixagent(iddpmindemchoixagent:Integer [PK], id_dpm_indem_annee:DpmIndemAnnee #FK to(dpmindemannee), idagent:Integer, idagentcreation:Integer, maj:Date, ischoixrecuperation:boolean, ischoixindemnite:boolean, version:Integer);

titrerepasetatpayeur(idtretatpayeur:Integer [PK], etatpayeur:Date, idagent:Integer, edition:Date, label:String, fichier:String, noderefalfresco:String, version:Integer);

ventildate(idventildate:Integer [PK], ventilation:Date, typechainepaie:TypeChainePaieEnum, paye:boolean, version:Integer);

ptg_pointage_ventil_date(id_pointage:VentilDate [PK] #FK to VentilDate,id_pointage:set<pointage> [PK] #FK to set<pointage>);

reposcomptask(idrctask:Integer [PK], idagent:Integer, idagentcreation:Integer, creation:Date, id_ventil_date:VentilDate #FK to(ventildate), calcul:Date, taskstatus:String, version:Integer);

etatpointage(idetatpointage:Integer [PK], id_pointage:Pointage #FK to(pointage), etat:Date, maj:Date, etat:EtatPointageEnum, idagent:Integer, version:Integer);

reftypeabsence(idreftypeabsence:Integer [PK], label:String);

exportetatspayeurtask(idexportetatspayeurtask:Integer [PK], idagent:Integer, creation:Date, export:Date, typechainepaie:TypeChainePaieEnum, id_ventil_date:VentilDate #FK to(ventildate), taskstatus:String, version:Integer);

refprime(idrefprime:Integer [PK], norubr:Integer, libelle:String, description:String, typesaisie:TypeSaisieEnum, calculee:boolean, statut:AgentStatutEnum, GeneratedName:MairiePrimeTableEnum, aide:String, affichagekiosque:boolean, version:Integer);

etatpayeur(idetatpayeur:Integer [PK], statut:AgentStatutEnum, etatpayeur:Date, idagent:Integer, edition:Date, label:String, fichier:String, noderefalfresco:String, version:Integer);

ventilabsence(idventilabsence:Integer [PK], idagent:Integer, lundi:Date, minutesconcertee:int, minutesnonconcertee:int, minutesimmediat:int, minutesgreve:int, etat:EtatPointageEnum, id_ventil_date:VentilDate #FK to(ventildate), version:Integer, nombreabsenceinferieur1:int, nombreabsenceentre1et4:int, nombreabsencesuperieur1:int);

reposcomphisto(idrchisto:Integer [PK], idagent:Integer, lundi:Date, msup:Integer, mbasehoraire:Integer, version:Integer);

titrerepasetatdemande(idtretatdemande:Integer [PK], id_tr_demande:TitreRepasDemande #FK to(titrerepasdemande), maj:Date, etat:EtatPointageEnum, commentaire:String, idagent:Integer, commande:Boolean, version:Integer);

droit(iddroit:Integer [PK], idagent:Integer, modification:Date, approbateur:boolean, operateur:boolean, idagentdelegataire:Integer, id_droit:Droit #FK to(droit), version:Integer);

ptg_droit_droits_agent(id_droit:Droit [PK] #FK to Droit,id_droits_agent:set<droitsagent> [PK] #FK to set<droitsagent>);

titrerepasdemande(idtrdemande:Integer [PK], idagent:Integer, month:Date, commande:boolean, version:Integer);

exportpaietask(idexportpaietask:Integer [PK], idagent:Integer, idagentcreation:Integer, creation:Date, typechainepaie:TypeChainePaieEnum, id_ventil_date:VentilDate #FK to(ventildate), export:Date, taskstatus:String, version:Integer);

ventilhsup(idventilhsup:Integer [PK], idagent:Integer, lundi:Date, mabsences:int, mabsencesas400:int, mhorscontrat:int, msup:int, msup25:int, msup25recup:int, msup50:int, msup50recup:int, msdjf:int, msdjfrecup:int, mmai:int, mmairecup:int, msnuit:int, msnuitrecup:int, mnormales:int, mnormalesrecup:int, msimple:int, msimplerecup:int, mcomposees:int, mcomposeesrecup:int, mrecuperees:int, mrappelservice:int, mprimeforfaitdpm:int, etat:EtatPointageEnum, id_ventil_date:VentilDate #FK to(ventildate), version:Integer);

ptgcomment(idptgcomment:Integer [PK], text:String, version:Integer);


** PROGRAM TYPE: JPA+Hibernate(Hybrid)