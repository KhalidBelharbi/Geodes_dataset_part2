ClassDiagram.Class>> Product =>=>=> RelationalSchema.Table>> product;
ClassDiagram.Class>> Role =>=>=> RelationalSchema.Table>> role;
ClassDiagram.Class>> Client =>=>=> RelationalSchema.Table>> client;
ClassDiagram.Class>> Branch =>=>=> RelationalSchema.Table>> branch;
ClassDiagram.Class>> Discount =>=>=> RelationalSchema.Table>> discount;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Attribut>> Product.name:String =>=>=> RelationalSchema.Column>> product.name;
ClassDiagram.Attribut>> Product.code:long =>=>=> RelationalSchema.Column>> product.code;
ClassDiagram.Attribut>> Product.description:String =>=>=> RelationalSchema.Column>> product.description;
ClassDiagram.Attribut>> Product.author:String =>=>=> RelationalSchema.Column>> product.author;
ClassDiagram.Attribut>> Product.date:String =>=>=> RelationalSchema.Column>> product.date;
ClassDiagram.Attribut>> Product.photo:String =>=>=> RelationalSchema.Column>> product.photo;
ClassDiagram.Attribut>> Product.dataphoto:MultipartFile =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> Role.id:Long =>=>=> RelationalSchema.Column>> role.id PRIMARY KEY;
ClassDiagram.Attribut>> Role.name:String =>=>=> RelationalSchema.Column>> role.name;
ClassDiagram.Attribut>> Role.description:String =>=>=> RelationalSchema.Column>> role.description;
ClassDiagram.Attribut>> Role.users:Set<User> =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> Branch.address:String =>=>=> RelationalSchema.Column>> branch.address;
ClassDiagram.Attribut>> Branch.startwork:Long =>=>=> RelationalSchema.Column>> branch.startwork;
ClassDiagram.Attribut>> Branch.endwork:Long =>=>=> RelationalSchema.Column>> branch.endwork;
ClassDiagram.Attribut>> Branch.contactnumber:String =>=>=> RelationalSchema.Column>> branch.contactnumber;
ClassDiagram.Attribut>> Branch.employees:Set<Employee> =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> Discount.numberdiscount:String =>=>=> RelationalSchema.Column>> discount.numberdiscount;
ClassDiagram.Attribut>> Discount.active:boolean =>=>=> RelationalSchema.Column>> discount.active;
ClassDiagram.Attribut>> Discount.bonuses:int =>=>=> RelationalSchema.Column>> discount.bonuses;
ClassDiagram.Attribut>> User.login:String =>=>=> RelationalSchema.Column>> user.login;
ClassDiagram.Attribut>> User.password:String =>=>=> RelationalSchema.Column>> user.password;
ClassDiagram.Attribut>> User.birth:Date =>=>=> RelationalSchema.Column>> user.birth;
ClassDiagram.Attribut>> User.name:String =>=>=> RelationalSchema.Column>> user.name;
ClassDiagram.Attribut>> User.surname:String =>=>=> RelationalSchema.Column>> user.surname;
ClassDiagram.Attribut>> User.middlename:String =>=>=> RelationalSchema.Column>> user.middlename;
ClassDiagram.Attribut>> User.phonenumber:String =>=>=> RelationalSchema.Column>> user.phonenumber;
ClassDiagram.Attribut>> User.email:String =>=>=> RelationalSchema.Column>> user.email;
ClassDiagram.Attribut>> User.overwritepassword:Boolean =>=>=> RelationalSchema.Column>> user.overwritepassword;
One-To-One relationship between ClassDiagram.Class>>Client  to ClassDiagram.Class>>discount represented by ClassDiagram.Atrribute>>GeneratedName;
set<role>: user_set<role>(userID:user [PK] #FK to user,set<role>ID:set<role> [PK] #FK to set<role>);
list<branch>: employee_list<branch>(employeeID:employee [PK] #FK to employee,list<branch>ID:list<branch> [PK] #FK to list<branch>);
Inheritance based on SINGLE-TABLE strategy (PUSH-UP): ROOT>>User  ;
