ClassDiagram.Class>> Admin =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> Student =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> TeamStudent =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> Team =>=>=> RelationalSchema.Table>> team;
ClassDiagram.Class>> Teacher =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> Project =>=>=> RelationalSchema.Table>> project;
ClassDiagram.Class>> Subject =>=>=> RelationalSchema.Table>> subject;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Attribut>> TeamStudent.GeneratedName:Team =>=>=> RelationalSchema.Column>> person.GeneratedName PRIMARY KEY;
ClassDiagram.Attribut>> TeamStudent.GeneratedName:Student =>=>=> RelationalSchema.Column>> person.GeneratedName PRIMARY KEY;
ClassDiagram.Attribut>> TeamStudent.pos:int =>=>=> RelationalSchema.Column>> person.pos;
ClassDiagram.Attribut>> Team.id:int =>=>=> RelationalSchema.Column>> team.id PRIMARY KEY;
ClassDiagram.Attribut>> Team.name:String =>=>=> RelationalSchema.Column>> team.name;
ClassDiagram.Attribut>> Team.capacity:int =>=>=> RelationalSchema.Column>> team.capacity;
ClassDiagram.Attribut>> Project.id:int =>=>=> RelationalSchema.Column>> project.id PRIMARY KEY;
ClassDiagram.Attribut>> Project.name:String =>=>=> RelationalSchema.Column>> project.name;
ClassDiagram.Attribut>> Project.capacity:int =>=>=> RelationalSchema.Column>> project.capacity;
ClassDiagram.Attribut>> Project.teamsize:int =>=>=> RelationalSchema.Column>> project.teamsize;
ClassDiagram.Attribut>> Project.deadline:Date =>=>=> RelationalSchema.Column>> project.deadline;
ClassDiagram.Attribut>> Subject.id:int =>=>=> RelationalSchema.Column>> subject.id PRIMARY KEY;
ClassDiagram.Attribut>> Subject.name:String =>=>=> RelationalSchema.Column>> subject.name;
ClassDiagram.Attribut>> Person.id:int =>=>=> RelationalSchema.Column>> person.id PRIMARY KEY;
ClassDiagram.Attribut>> Person.login:String =>=>=> RelationalSchema.Column>> person.login;
ClassDiagram.Attribut>> Person.name:String =>=>=> RelationalSchema.Column>> person.name;
ClassDiagram.Attribut>> Person.surname:String =>=>=> RelationalSchema.Column>> person.surname;
ClassDiagram.Attribut>> Person.mail:String =>=>=> RelationalSchema.Column>> person.mail;
ClassDiagram.Attribut>> Person.password:String =>=>=> RelationalSchema.Column>> person.password;
One-To-Many relationship from ClassDiagram.Class>>Student  to ClassDiagram.Class>>List<TeamStudent>;
Many-To-One relationship from ClassDiagram.Class>>TeamStudent  to ClassDiagram.Class>>Team represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>TeamStudent  to ClassDiagram.Class>>Student represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Team  to ClassDiagram.Class>>Project represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Team  to ClassDiagram.Class>>List<TeamStudent>;
One-To-Many relationship from ClassDiagram.Class>>Project  to ClassDiagram.Class>>List<Team>;
Many-To-One relationship from ClassDiagram.Class>>Project  to ClassDiagram.Class>>Subject represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Subject  to ClassDiagram.Class>>List<Project>;
Many-To-Many relationship between ClassDiagram.Class>>Subject  and ClassDiagram.Class>>Teacher: subject_teacher(Subject_ID:Subject [PK] #FK to Subject,Teacher_ID:Teacher [PK] #FK to Teacher);
Many-To-Many relationship between ClassDiagram.Class>>Subject  and ClassDiagram.Class>>Student: subject_teacher(Subject_ID:Subject [PK] #FK to Subject,Teacher_ID:Teacher [PK] #FK to Teacher);subject_student(Subject_ID:Subject [PK] #FK to Subject,Student_ID:Student [PK] #FK to Student);
Inheritance based on SINGLE-TABLE strategy (PUSH-UP): ROOT>>Person  SubClass>>Admin SubClass>>Student SubClass>>Teacher  Descriminator>>ACC_TYPE: String ;
