ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> Manual =>=>=> RelationalSchema.Table>> manual;
ClassDiagram.Class>> Role =>=>=> RelationalSchema.Table>> role;
ClassDiagram.Class>> DomainList =>=>=> RelationalSchema.Table>> domainlist;
ClassDiagram.Class>> Status =>=>=> RelationalSchema.Table>> status;
ClassDiagram.Class>> Vendor =>=>=> RelationalSchema.Table>> vendor;
ClassDiagram.Attribut>> Employee.employee_id:Long =>=>=> RelationalSchema.Column>> employee.employee_id PRIMARY KEY;
ClassDiagram.Attribut>> Employee.email:String =>=>=> RelationalSchema.Column>> employee.email;
ClassDiagram.Attribut>> Employee.password:String =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> Employee.confirmpassword:String =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> Employee.firstname:String =>=>=> RelationalSchema.Column>> employee.firstname;
ClassDiagram.Attribut>> Employee.lastname:String =>=>=> RelationalSchema.Column>> employee.lastname;
ClassDiagram.Attribut>> Employee.active:int =>=>=> RelationalSchema.Column>> employee.active;
ClassDiagram.Attribut>> Employee.extension:String =>=>=> RelationalSchema.Column>> employee.extension;
ClassDiagram.Attribut>> Employee.cellphone:String =>=>=> RelationalSchema.Column>> employee.cellphone;
ClassDiagram.Attribut>> Employee.resettoken:String =>=>=> RelationalSchema.Column>> employee.resettoken;
ClassDiagram.Attribut>> Manual.manual_id:Long =>=>=> RelationalSchema.Column>> manual.manual_id PRIMARY KEY;
ClassDiagram.Attribut>> Manual.name:String =>=>=> RelationalSchema.Column>> manual.name;
ClassDiagram.Attribut>> Manual.type:String =>=>=> RelationalSchema.Column>> manual.type;
ClassDiagram.Attribut>> Manual.path:String =>=>=> RelationalSchema.Column>> manual.path;
ClassDiagram.Attribut>> Role.id:Long =>=>=> RelationalSchema.Column>> role.id PRIMARY KEY;
ClassDiagram.Attribut>> Role.role:String =>=>=> RelationalSchema.Column>> role.role;
ClassDiagram.Attribut>> DomainList.domain_id:Long =>=>=> RelationalSchema.Column>> domainlist.domain_id PRIMARY KEY;
ClassDiagram.Attribut>> DomainList.domaintype:String =>=>=> RelationalSchema.Column>> domainlist.domaintype;
ClassDiagram.Attribut>> DomainList.domainvalue:String =>=>=> RelationalSchema.Column>> domainlist.domainvalue;
ClassDiagram.Attribut>> DomainList.active:int =>=>=> RelationalSchema.Column>> domainlist.active;
ClassDiagram.Attribut>> Status.status_id:Long =>=>=> RelationalSchema.Column>> status.status_id PRIMARY KEY;
ClassDiagram.Attribut>> Status.status:String =>=>=> RelationalSchema.Column>> status.status;
ClassDiagram.Attribut>> Vendor.vendor_id:Long =>=>=> RelationalSchema.Column>> vendor.vendor_id PRIMARY KEY;
ClassDiagram.Attribut>> Vendor.vendorname:String =>=>=> RelationalSchema.Column>> vendor.vendorname;
ClassDiagram.Attribut>> Vendor.vendortype:String =>=>=> RelationalSchema.Column>> vendor.vendortype;
ClassDiagram.Attribut>> Vendor.vendorurl:String =>=>=> RelationalSchema.Column>> vendor.vendorurl;
Many-To-Many relationship between ClassDiagram.Class>>Employee  and ClassDiagram.Class>>set<role>: employee_role(employee_id:Employee [PK] #FK to Employee,role_id:set<role> [PK] #FK to set<role>);
