ClassDiagram.Class>> AuditPerson =>=>=> RelationalSchema.Table>> auditperson;
ClassDiagram.Class>> AuditUser =>=>=> RelationalSchema.Table>> audituser;
ClassDiagram.Class>> Book =>=>=> RelationalSchema.Table>> book;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> IdClassDemo =>=>=> RelationalSchema.Table>> idclassdemo;
ClassDiagram.Class>> Author =>=>=> RelationalSchema.Table>> author;
ClassDiagram.Class>> Organization =>=>=> RelationalSchema.Table>> organization;
ClassDiagram.Class>> JpaAnnotationDemo =>=>=> RelationalSchema.Table>> jpaannotationdemo;
ClassDiagram.Class>> EBook =>=>=> RelationalSchema.Table>> ebook;
ClassDiagram.Class>> Category =>=>=> RelationalSchema.Table>> category;
ClassDiagram.Class>> AbstractAuditDomain =>=>=> RelationalSchema.Table>> abstractauditdomain;
ClassDiagram.Class>> Order =>=>=> RelationalSchema.Table>> order;
ClassDiagram.Class>> PrintBook =>=>=> RelationalSchema.Table>> printbook;
ClassDiagram.Class>> Student =>=>=> RelationalSchema.Table>> student;
ClassDiagram.Class>> Role =>=>=> RelationalSchema.Table>> role;
ClassDiagram.Class>> AuthorInfo =>=>=> RelationalSchema.Table>> authorinfo;
ClassDiagram.Class>> Account =>=>=> RelationalSchema.Table>> account;
ClassDiagram.Class>> Admin =>=>=> RelationalSchema.Table>> admin;
ClassDiagram.Class>> BookAuthor =>=>=> RelationalSchema.Table>> bookauthor;
ClassDiagram.Class>> UserOrder =>=>=> RelationalSchema.Table>> userorder;
ClassDiagram.Attribut>> AuditPerson.personname:String =>=>=> RelationalSchema.Column>> auditperson.personname;
ClassDiagram.Attribut>> AuditUser.id:Long =>=>=> RelationalSchema.Column>> audituser.id PRIMARY KEY;
ClassDiagram.Attribut>> AuditUser.name:String =>=>=> RelationalSchema.Column>> audituser.name;
ClassDiagram.Attribut>> AuditUser.createddate:LocalDateTime =>=>=> RelationalSchema.Column>> audituser.createddate;
ClassDiagram.Attribut>> AuditUser.lastmodifieddate:LocalDateTime =>=>=> RelationalSchema.Column>> audituser.lastmodifieddate;
ClassDiagram.Attribut>> Book.id:Long =>=>=> RelationalSchema.Column>> book.id PRIMARY KEY;
ClassDiagram.Attribut>> Book.bookname:String =>=>=> RelationalSchema.Column>> book.bookname;
ClassDiagram.Attribut>> Book.publishdate:LocalDate =>=>=> RelationalSchema.Column>> book.publishdate;
ClassDiagram.Attribut>> User.id:Long =>=>=> RelationalSchema.Column>> user.id PRIMARY KEY;
ClassDiagram.Attribut>> User.username:String =>=>=> RelationalSchema.Column>> user.username;
ClassDiagram.Attribut>> User.password:String =>=>=> RelationalSchema.Column>> user.password;
ClassDiagram.Attribut>> User.GeneratedName:Sex =>=>=> RelationalSchema.Column>> user.GeneratedName;
ClassDiagram.Attribut>> User.age:int =>=>=> RelationalSchema.Column>> user.age;
ClassDiagram.Attribut>> User.birthday:LocalDate =>=>=> RelationalSchema.Column>> user.birthday;
ClassDiagram.Attribut>> User.phone:String =>=>=> RelationalSchema.Column>> user.phone;
ClassDiagram.Attribut>> User.email:String =>=>=> RelationalSchema.Column>> user.email;
ClassDiagram.Attribut>> IdClassDemo.idone:String =>=>=> RelationalSchema.Column>> idclassdemo.idone PRIMARY KEY;
ClassDiagram.Attribut>> IdClassDemo.idtwo:String =>=>=> RelationalSchema.Column>> idclassdemo.idtwo PRIMARY KEY;
ClassDiagram.Attribut>> IdClassDemo.context:String =>=>=> RelationalSchema.Column>> idclassdemo.context;
ClassDiagram.Attribut>> Author.id:Long =>=>=> RelationalSchema.Column>> author.id PRIMARY KEY;
ClassDiagram.Attribut>> Author.authorname:String =>=>=> RelationalSchema.Column>> author.authorname;
ClassDiagram.Attribut>> Author.birthday:LocalDate =>=>=> RelationalSchema.Column>> author.birthday;
ClassDiagram.Attribut>> Author.GeneratedName:Sex =>=>=> RelationalSchema.Column>> author.GeneratedName;
ClassDiagram.Attribut>> Author.email:String =>=>=> RelationalSchema.Column>> author.email;
ClassDiagram.Attribut>> Author.phone:String =>=>=> RelationalSchema.Column>> author.phone;
ClassDiagram.Attribut>> Author./***使用两个双向一对多/多对一来替代多对多*///@onetomany(mappedby:Map<String,Address> =>=>=> RelationalSchema.Column>> author./***使用两个双向一对多/多对一来替代多对多*///@onetomany(mappedby;
ClassDiagram.Attribut>> Organization.code:String =>=>=> RelationalSchema.Column>> organization.code;
ClassDiagram.Attribut>> Organization.name:String =>=>=> RelationalSchema.Column>> organization.name;
ClassDiagram.Attribut>> JpaAnnotationDemo./***&#064id定义属性为数据库中的主键列，一个实体里面必须有一个。**&#064generatedvalue,主键生成策略。*属性strategy，id的生成策略，generationtype.table，通过表产生主键，框架由表模拟序列产生主键，使用该策略可以使应用更易于数据库移植；*generationtype.sequence，通过序列产生主键，通过@sequencegenerator注解指定序列名，mysql不支持这种方式；*generationtype.identity,数据库id自增长，多用于mysql；*generationtype.auto,jpa自动选择合适的策略，默认选项。*属性generator：通过sequence生成id，常见orcale数据库id生成，需要配合@sequencegenerator使用。*/id:Long =>=>=> RelationalSchema.Column>> jpaannotationdemo./***&#064id定义属性为数据库中的主键列，一个实体里面必须有一个。**&#064generatedvalue,主键生成策略。*属性strategy，id的生成策略，generationtype.table，通过表产生主键，框架由表模拟序列产生主键，使用该策略可以使应用更易于数据库移植；*generationtype.sequence，通过序列产生主键，通过@sequencegenerator注解指定序列名，mysql不支持这种方式；*generationtype.identity,数据库id自增长，多用于mysql；*generationtype.auto,jpa自动选择合适的策略，默认选项。*属性generator：通过sequence生成id，常见orcale数据库id生成，需要配合@sequencegenerator使用。*/id PRIMARY KEY;
ClassDiagram.Attribut>> JpaAnnotationDemo./***&#064basic，表示属性是到数据库表字段的映射。如果实体的字段上没有任何注解，默认即为；*属性fetch，抓取方式，默认fetchtype.eager(立即加载)，fetchtype.lazy(延迟加载，主要应用在大字段上面)；*属性optional，设置这个字段是否可以为null，默认是true。*/name:String =>=>=> RelationalSchema.Column>> jpaannotationdemo./***&#064basic，表示属性是到数据库表字段的映射。如果实体的字段上没有任何注解，默认即为；*属性fetch，抓取方式，默认fetchtype.eager(立即加载)，fetchtype.lazy(延迟加载，主要应用在大字段上面)；*属性optional，设置这个字段是否可以为null，默认是true。*/name;
ClassDiagram.Attribut>> JpaAnnotationDemo.xxx:String =>=>=> RelationalSchema.Column>> jpaannotationdemo.xxx;
ClassDiagram.Attribut>> JpaAnnotationDemo./***&#064transient,非持久化属性，表示该属性并非是一个到数据库表的字段的映射，与@basic作用相反。jpa映射数据库的时候忽略它。*/yyy:String =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> JpaAnnotationDemo./***&#064column,定义该属性对应数据库中的列名。*属性name，数据库中的列名。如果不写默认和实体属性名一致；*属性unique，是否唯一。默认false；*属性nullable，是否允许为空。默认为true；*属性insertable，执行insert操作的时候是否包含此字段，默认为true；*属性updatable，执行updatable操作的时候是否包含此字段，默认为true；*属性columndefinition，表示该字段在数据库中的实际类型。*属性length，数据库字段的长度，默认255；*属性table,precision，scale，一般不设置。*/ddd:Integer =>=>=> RelationalSchema.Column>> jpaannotationdemo./***&#064column,定义该属性对应数据库中的列名。*属性name，数据库中的列名。如果不写默认和实体属性名一致；*属性unique，是否唯一。默认false；*属性nullable，是否允许为空。默认为true；*属性insertable，执行insert操作的时候是否包含此字段，默认为true；*属性updatable，执行updatable操作的时候是否包含此字段，默认为true；*属性columndefinition，表示该字段在数据库中的实际类型。*属性length，数据库字段的长度，默认255；*属性table,precision，scale，一般不设置。*/ddd;
ClassDiagram.Attribut>> JpaAnnotationDemo./***&#064temporal:用来设置类型的属性映射到对应精度的字段。temporaltype.，映射为数据库，temporaltype.time映射为数据库time，temporaltype.timestamp，映射为time。*/create:Date =>=>=> RelationalSchema.Column>> jpaannotationdemo./***&#064temporal:用来设置类型的属性映射到对应精度的字段。temporaltype.，映射为数据库，temporaltype.time映射为数据库time，temporaltype.timestamp，映射为time。*/create;
ClassDiagram.Attribut>> JpaAnnotationDemo.createtime:Date =>=>=> RelationalSchema.Column>> jpaannotationdemo.createtime;
ClassDiagram.Attribut>> JpaAnnotationDemo.createtime:Date =>=>=> RelationalSchema.Column>> jpaannotationdemo.createtime;
ClassDiagram.Attribut>> JpaAnnotationDemo./***jdk8可以使用以下新的时间类型替代date*/:LocalDate =>=>=> RelationalSchema.Column>> jpaannotationdemo./***jdk8可以使用以下新的时间类型替代date*/;
ClassDiagram.Attribut>> JpaAnnotationDemo.GeneratedName:LocalTime =>=>=> RelationalSchema.Column>> jpaannotationdemo.GeneratedName;
ClassDiagram.Attribut>> JpaAnnotationDemo.GeneratedName:LocalDateTime =>=>=> RelationalSchema.Column>> jpaannotationdemo.GeneratedName;
ClassDiagram.Attribut>> JpaAnnotationDemo./***&#064enumerated：映射枚举字段。属性value，默认是enumtype.ordinal(枚举字段的下标)，enumtype.string枚举字段的name；*/:Sex =>=>=> RelationalSchema.Column>> jpaannotationdemo./***&#064enumerated：映射枚举字段。属性value，默认是enumtype.ordinal(枚举字段的下标)，enumtype.string枚举字段的name；*/;
ClassDiagram.Attribut>> JpaAnnotationDemo.、char和将被映射成clob类型。*blob（binarylargeobjects）类型是字节类型，java.sql.blob、byte、byte和实现了serializable接口的类型将被映射为blob类型。*clob、blob占用内存空间较大，一般配合@basic(fetch:String =>=>=> RelationalSchema.Column>> jpaannotationdemo.、char和将被映射成clob类型。*blob（binarylargeobjects）类型是字节类型，java.sql.blob、byte、byte和实现了serializable接口的类型将被映射为blob类型。*clob、blob占用内存空间较大，一般配合@basic(fetch;
ClassDiagram.Attribut>> EBook./***格式*/format:String =>=>=> RelationalSchema.Column>> ebook./***格式*/format;
ClassDiagram.Attribut>> Category.id:Long =>=>=> RelationalSchema.Column>> category.id PRIMARY KEY;
ClassDiagram.Attribut>> Category.categoryname:String =>=>=> RelationalSchema.Column>> category.categoryname;
ClassDiagram.Attribut>> AbstractAuditDomain.createddate:LocalDateTime =>=>=> RelationalSchema.Column>> abstractauditdomain.createddate;
ClassDiagram.Attribut>> AbstractAuditDomain.lastmodifieddate:LocalDateTime =>=>=> RelationalSchema.Column>> abstractauditdomain.lastmodifieddate;
ClassDiagram.Attribut>> AbstractAuditDomain.createdbyuserid:Long =>=>=> RelationalSchema.Column>> abstractauditdomain.createdbyuserid;
ClassDiagram.Attribut>> AbstractAuditDomain.lastmodifieduserby:Long =>=>=> RelationalSchema.Column>> abstractauditdomain.lastmodifieduserby;
ClassDiagram.Attribut>> Order.orderno:String =>=>=> RelationalSchema.Column>> order.orderno;
ClassDiagram.Attribut>> Order.GeneratedName:OrderStatus =>=>=> RelationalSchema.Column>> order.GeneratedName;
ClassDiagram.Attribut>> Order.price:BigDecimal =>=>=> RelationalSchema.Column>> order.price;
ClassDiagram.Attribut>> PrintBook./***印刷时间*/printdate:LocalDate =>=>=> RelationalSchema.Column>> printbook./***印刷时间*/printdate;
ClassDiagram.Attribut>> Student.id:Long =>=>=> RelationalSchema.Column>> student.id PRIMARY KEY;
ClassDiagram.Attribut>> Student.name:String =>=>=> RelationalSchema.Column>> student.name;
ClassDiagram.Attribut>> Student.age:Integer =>=>=> RelationalSchema.Column>> student.age;
ClassDiagram.Attribut>> Role.id:Long =>=>=> RelationalSchema.Column>> role.id PRIMARY KEY;
ClassDiagram.Attribut>> Role.rolename:String =>=>=> RelationalSchema.Column>> role.rolename;
ClassDiagram.Attribut>> Role.GeneratedName:RoleCode =>=>=> RelationalSchema.Column>> role.GeneratedName;
ClassDiagram.Attribut>> AuthorInfo.id:Long =>=>=> RelationalSchema.Column>> authorinfo.id PRIMARY KEY;
ClassDiagram.Attribut>> AuthorInfo.idcardnumber:String =>=>=> RelationalSchema.Column>> authorinfo.idcardnumber;
ClassDiagram.Attribut>> Account./***简单代表一下账户所属人*/accountname:String =>=>=> RelationalSchema.Column>> account./***简单代表一下账户所属人*/accountname;
ClassDiagram.Attribut>> Account.balance:BigDecimal =>=>=> RelationalSchema.Column>> account.balance;
ClassDiagram.Attribut>> Account./***乐观锁version*///@versionversion:Integer =>=>=> RelationalSchema.Column>> account./***乐观锁version*///@versionversion;
ClassDiagram.Attribut>> Admin.id:Long =>=>=> RelationalSchema.Column>> admin.id PRIMARY KEY;
ClassDiagram.Attribut>> Admin.username:String =>=>=> RelationalSchema.Column>> admin.username;
ClassDiagram.Attribut>> Admin.password:String =>=>=> RelationalSchema.Column>> admin.password;
ClassDiagram.Attribut>> Admin.phone:String =>=>=> RelationalSchema.Column>> admin.phone;
ClassDiagram.Attribut>> Admin.createtime:LocalDate =>=>=> RelationalSchema.Column>> admin.createtime;
ClassDiagram.Attribut>> Admin.age:Integer =>=>=> RelationalSchema.Column>> admin.age;
ClassDiagram.Attribut>> Admin.GeneratedName:Address =>=>=> RelationalSchema.Column>> admin.GeneratedName;
ClassDiagram.Attribut>> UserOrder.id:Long =>=>=> RelationalSchema.Column>> userorder.id PRIMARY KEY;
ClassDiagram.Attribut>> UserOrder.ordername:String =>=>=> RelationalSchema.Column>> userorder.ordername;
ClassDiagram.Attribut>> UserOrder.userid:Long =>=>=> RelationalSchema.Column>> userorder.userid;
ClassDiagram.Attribut>> UserOrder.createtime:LocalDate =>=>=> RelationalSchema.Column>> userorder.createtime;
Many-To-One relationship from ClassDiagram.Class>>AuditUser  to ClassDiagram.Class>>audituser represented by ClassDiagram.Atrribute>>createdby;
Many-To-One relationship from ClassDiagram.Class>>AuditUser  to ClassDiagram.Class>>audituser represented by ClassDiagram.Atrribute>>lastmodifiedby;
Many-To-One relationship from ClassDiagram.Class>>Book  to ClassDiagram.Class>>category represented by ClassDiagram.Atrribute>>id;
Many-To-Many relationship between ClassDiagram.Class>>Book  and ClassDiagram.Class>>list<author>: jpa_book_author(book_id:Book [PK] #FK to Book,author_id:list<author> [PK] #FK to list<author>);
One-To-One relationship between ClassDiagram.Class>>Author  to ClassDiagram.Class>>authorinfo represented by ClassDiagram.Atrribute>>/***&#064onetoone指定一对一关联关系*&#064joincolumnname本表中外键列的列名，referencedcolumnname，关联表中与name进行对应的列名*/;
Many-To-One relationship from ClassDiagram.Class>>Category  to ClassDiagram.Class>>category represented by ClassDiagram.Atrribute>>id;
One-To-Many relationship from ClassDiagram.Class>>Category  to ClassDiagram.Class>>List<Category>;
One-To-Many relationship from ClassDiagram.Class>>Category  to ClassDiagram.Class>>List<Book>;
One-To-Many relationship from ClassDiagram.Class>>Role  to ClassDiagram.Class>>List<Admin>;
One-To-One relationship between ClassDiagram.Class>>AuthorInfo  to ClassDiagram.Class>>author represented by ClassDiagram.Atrribute>>/***如果在详情方需要获取作者，也添加@onetoone，并指定mappedby*/;
Many-To-One relationship from ClassDiagram.Class>>Admin  to ClassDiagram.Class>>role represented by ClassDiagram.Atrribute>>GeneratedName;
Inheritance based on Table-Per-Class strategy (PUSH-DOWN): ROOT>>Book  ;
