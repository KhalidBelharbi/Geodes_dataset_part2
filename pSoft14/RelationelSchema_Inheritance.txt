person(id:Long [PK], name:String, nickname:String, address:String, createdon:Date, addresses:Map<AddressType,String>, version:int);

payment(id:Long [PK], amount:BigDecimal, completed:boolean, GeneratedName:Person #FK to(Person));

creditcardpayment(id:Long [PK] #FK to Payment, );

partner(id:Long [PK], name:String, version:int);

call(id:Long [PK], GeneratedName:Phone #FK to(Phone), timestamp:Date, duration:int);

wiretransferpayment();

image(id:Long [PK], content:byte);

phone(id:Long [PK] #FK to Payment, id:Long [PK], GeneratedName:Person #FK to(id:Long [PK] #FK to Payment, Person), number:String, type:PhoneType, repairtimestamps:List<Date>);

event(id:Long [PK], title:String, GeneratedName:Date);

event(id:Long [PK], title:String, GeneratedName:Date);

event(id:Long [PK], title:String, GeneratedName:Date);

datapoint(id:long [PK], name:String);

datapoint(id:long [PK], name:String);

datapoint(id:long [PK], name:String);

jmxtest();

spatialtest(GeneratedName:GeometryFactory);

embeddabletypeelementcollectiontest();

mapkeytypetest();

ordercolumnlistindexbasetest();

unidirectionalsettest();

bidirectionalbagorphanremovaltest();

bidirectionalmaptest();

mapkeyclasstest();

bidirectionalsettest();

bidirectionalordercolumnlisttest();

queuetest();

unidirectionalsortedsettest();

unidirectionalmaptest();

basictypecollectiontest();

basictypeordercolumnelementcollectiontest();

bidirectionalorderbylisttest();

unidirectionalbagtest();

bidirectionalcomparatorsortedsettest();

unidirectionalcomparatorsortedsettest();

elementcollectionmaptest();

orderedbysqltest();

basictypeelementcollectiontest();

bidirectionalbagtest();

arraytest();

unidirectionalorderedbylisttest();

unidirectionalordercolumnlisttest();

bidirectionalsortedsettest();

transactionstest();

databasetimezonemultitenancytest(front_end_tenant:String, back_end_tenant:String, connectionprovidermap:Map<String,ConnectionProvider>, timezonetenantmap:Map<String,TimeZone>, GeneratedName:SessionFactory);

abstractmultitenancytest(front_end_tenant:String, back_end_tenant:String, connectionprovidermap:Map<String,ConnectionProvider>, GeneratedName:SessionFactory);

author(id:Integer [PK]);

book(id:Integer [PK], title:String, GeneratedName:Author #FK to(author));

collectionimmutabilitytest();

entityimmutabilitytest();

criteriatest();

nonstrictreadwritecachetest();

secondlevelcachetest();

firstlevelcachetest();

cuisine();

proxyinterfacetest();

singletabletest();

jointabletest();

discriminatoroptionsnotnullsingletabletest();

mappedsuperclasstest();

singletablediscriminatorformulatest();

tableperclasstest();

explicitpolymorphismtest();

discriminatornotnullsingletabletest();

jointableprimarykeyjoincolumntest();

uniqueconstrainttest();

checktest();

indextest();

columndefaulttest();

schemagenerationtest();

queryaudittest();

customrevisionentitytest();

validitystrategyaudittest();

entitytypechangeaudittrackingrevisionlistenertest();

entitytypechangeauditdefaulttrackingtest();

entitytypechangeaudittest();

defaultaudittest();

modifiedflagsaudittest();

queryauditadresscountrytest();

queryauditwithmodifiedflagtest();

captain(id:Identity);

customsqltest();

customsqlsecondarytabletest();

spaceship(name:String [PK], model:String, speed:double, firstname:Captain #FK to(captain), GeneratedName:Dimensions);

oraclecustomsqlwithstoredproceduretest();

collectionloadertest();

listenertest();

interceptortest(GeneratedName:Logger);

defaultentitylistenertest();

postgresqlfunctionselectclausetest();

postgresqlfunctionwhereclausetest();

selectdistincttest();

bootstraptest(emf:EntityManagerFactory, //tag::bootstrap-jpa-compliant-persistenceunit-configurable-example:EntityManagerFactory, //tag::bootstrap-jpa-compliant-persistencecontext-exampleem:EntityManager, //tag::bootstrap-jpa-compliant-persistencecontext-configurable-example:EntityManager);

hibernateautoflushtest();

manualflushtest();

autoflushtest();

commitflushtest();

alwaysflushtest();

flushordertest();

batchfetchingtest();

fetchmodeselecttest();

graphfetchingtest();

profilefetchingtest();

lazycollectiontest();

fetchmodesubselecttest();

directvsqueryfetchingtest();

fetchmodejointest();

fetchingtest();

graphparsingtest();

cascadeondeletecollectiontest();

persistencecontexttest();

wherejointabletest();

phone(id:Long [PK], number:String, owner:Person #FK to(Person));

multiloadidtest(GeneratedName:SQLStatementInterceptor);

bytecodeenhancementtest();

cascadeondeletetest();

filtersqlfragementaliastest();

filtertest();

person(id:Long [PK], name:String);

dynamicupdatetest();

nodynamicupdatetest();

filterjointabletest();

wheretest();

derivedidentifiertest();

onetooneprimarykeyjoincolumntest();

compositeidassociationtest();

onetooneunidirectionaltest();

onetomanyunidirectionaltest();

onetoonebidirectionaltest();

onetoonemapsidtest();

stringproperty(id:Long [PK], name:String, value:String);

integerproperty(id:Long [PK], name:String, value:Integer);

propertyrepository(id:Long [PK], properties:List<Property<?>>);

propertyholder(id:Long [PK], GeneratedName:Property);

bidirectionaltwoonetomanymapsidtest();

joinformulatest();

notfoundtest();

onetoonebidirectionallazytest();

manytomanybidirectionaltest();

derivedidentifierprimarykeyjoincolumntest();

manytoonetest();

manytomanybidirectionalwithlinkentitytest();

joincolumnorformulatest();

manytomanyunidirectionaltest();

unidirectionalmanytomanyremovetest();

onetomanybidirectionaltest();

periodstringtest(GeneratedName:Period);

moneyconvertertest();

parenttest();

simpleembeddabletest();

nestedembeddabletest();

embeddableimplicitoverridetest();

embeddableoverridetest();

simpleembeddableequivalenttest();

targettest();

uuidgeneratedvaluetest();

sequencegeneratorconfiguredtest();

book(id:Long [PK], title:String, author:String);

naiveequalshashcodeentitytest();

assignedidentifiertest();

tablegeneratorconfiguredtest();

idclassgeneratedvaluetest();

entitytablecatalogtest();

sequencegeneratornamedtest();

generatedidentifiertest();

cacheablenaturalidtest();

tablegeneratorunnamedtest();

idmanytoonetest();

multiplenaturalidtest();

compositenaturalidtest();

simplenaturalidtest();

rowidtest();

embeddedidmanytoonetest();

entitytableschematest();

event(id:EventId [PK], key:String, value:String);

embeddedidtest();

uuidcustomgeneratedvaluetest();

idclasstest();

naturalidequalshashcodeentitytest();

mutablenaturalidtest();

simpleentitytest();

simpleentitytabletest();

sequencegeneratorunnamedtest();

pooledoptimizertest();

idclassmanytoonetest();

embeddableaccesstest();

fieldaccesstest();

propertyaccessoverridetest();

elementcollectionaccesstest();

propertyaccesstest();

generatortypetest();

databasevaluegenerationtest();

updatetimestamptest();

inmemoryvaluegenerationtest();

creationtimestamptest();

generatedtest();

book(id:Long [PK], title:String, author:String);

calendarwithtemporaltimestamptest();

nclobchararraytest();

nclobtest();

quotingtest();

datewithtemporaltimetest();

clobstringtest();

instantliteraltest();

clobtest();

bitsetusertypetest();

formulatest();

parenttest();

datewithtemporaltimestamptest();

clobchararraytest();

explicitcolumnnamingtest();

implicitbasictypetest();

bitsettypetest();

columntransformertest();

explicittypetest();

bitsettypedeftest();

autoquotingtest();

phonetypeenumeratedstringtest();

nclobstringtest();

phonetypeenumeratedordinaltest();

enumerationcustomtypetest();

nationalizedtest();

datewithtemporaldatetest();

enumerationconvertertest();

targettest();

jpaquotingtest();

explicitbasictypetest();

typecategorytest();

blobbytearraytest();

subselecttest();

localdatetimewithtemporaltimetest();

blobtest();

optimisticlockinginstanttest();

optimisticlockingtest();

optimisticlocktest();

optimisticlocktypealltest();

versionsourcetest();

explicitlockingtest();

optimisticlockingtimestamptest();

optimisticlocktypedirtytest();



** PROGRAM TYPE: JPA+Hibernate(Hybrid)