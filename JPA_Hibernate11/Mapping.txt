ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> License =>=>=> RelationalSchema.Table>> license;
ClassDiagram.Class>> Programmer =>=>=> RelationalSchema.Table>> programmer;
ClassDiagram.Class>> Project =>=>=> RelationalSchema.Table>> project;
ClassDiagram.Class>> PhoneNumber =>=>=> RelationalSchema.Table>> phonenumber;
ClassDiagram.Class>> Actor =>=>=> RelationalSchema.Table>> actor;
ClassDiagram.Attribut>> Person.id:int =>=>=> RelationalSchema.Column>> person.id PRIMARY KEY;
ClassDiagram.Attribut>> Person.first_name:String =>=>=> RelationalSchema.Column>> person.first_name;
ClassDiagram.Attribut>> Person.last_name:String =>=>=> RelationalSchema.Column>> person.last_name;
ClassDiagram.Attribut>> Person.age:int =>=>=> RelationalSchema.Column>> person.age;
ClassDiagram.Attribut>> License.id:int =>=>=> RelationalSchema.Column>> license.id PRIMARY KEY;
ClassDiagram.Attribut>> License.type:String =>=>=> RelationalSchema.Column>> license.type;
ClassDiagram.Attribut>> License.valid_from:Date =>=>=> RelationalSchema.Column>> license.valid_from;
ClassDiagram.Attribut>> License.valid_to:Date =>=>=> RelationalSchema.Column>> license.valid_to;
ClassDiagram.Attribut>> Programmer.id:int =>=>=> RelationalSchema.Column>> programmer.id PRIMARY KEY;
ClassDiagram.Attribut>> Programmer.name:String =>=>=> RelationalSchema.Column>> programmer.name;
ClassDiagram.Attribut>> Programmer.salary:int =>=>=> RelationalSchema.Column>> programmer.salary;
ClassDiagram.Attribut>> Project.id:int =>=>=> RelationalSchema.Column>> project.id PRIMARY KEY;
ClassDiagram.Attribut>> Project.name:String =>=>=> RelationalSchema.Column>> project.name;
ClassDiagram.Attribut>> PhoneNumber.id:long =>=>=> RelationalSchema.Column>> phonenumber.id PRIMARY KEY;
ClassDiagram.Attribut>> PhoneNumber.number:String =>=>=> RelationalSchema.Column>> phonenumber.number;
ClassDiagram.Attribut>> PhoneNumber.type:String =>=>=> RelationalSchema.Column>> phonenumber.type;
ClassDiagram.Attribut>> Actor.id:long =>=>=> RelationalSchema.Column>> actor.id PRIMARY KEY;
ClassDiagram.Attribut>> Actor.name:String =>=>=> RelationalSchema.Column>> actor.name;
One-To-One relationship between ClassDiagram.Class>>Person  to ClassDiagram.Class>>License represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>License  to ClassDiagram.Class>>Person represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-Many relationship between ClassDiagram.Class>>Programmer  and ClassDiagram.Class>>Project: programmers_projects(programmer_id:Programmer [PK] #FK to Programmer,project_id:Project [PK] #FK to Project);
Many-To-One relationship from ClassDiagram.Class>>PhoneNumber  to ClassDiagram.Class>>actor represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Actor  to ClassDiagram.Class>>Set<PhoneNumber>;
