ClassDiagram.Class>> Photo =>=>=> RelationalSchema.Table>> photo;
ClassDiagram.Class>> Appointment =>=>=> RelationalSchema.Table>> appointment;
ClassDiagram.Class>> ProjectManager =>=>=> RelationalSchema.Table>> projectmanager;
ClassDiagram.Class>> Position =>=>=> RelationalSchema.Table>> position;
ClassDiagram.Class>> Visit =>=>=> RelationalSchema.Table>> visit;
ClassDiagram.Class>> Room =>=>=> RelationalSchema.Table>> room;
ClassDiagram.Class>> Address =>=>=> RelationalSchema.Table>> address;
ClassDiagram.Class>> Category =>=>=> RelationalSchema.Table>> category;
ClassDiagram.Class>> SalesItemLine =>=>=> RelationalSchema.Table>> salesitemline;
ClassDiagram.Class>> Upload =>=>=> RelationalSchema.Table>> upload;
ClassDiagram.Class>> Model =>=>=> RelationalSchema.Table>> model;
ClassDiagram.Class>> File =>=>=> RelationalSchema.Table>> file;
ClassDiagram.Class>> Event =>=>=> RelationalSchema.Table>> event;
ClassDiagram.Class>> Product =>=>=> RelationalSchema.Table>> product;
ClassDiagram.Class>> Contact =>=>=> RelationalSchema.Table>> contact;
ClassDiagram.Class>> Manager =>=>=> RelationalSchema.Table>> manager;
ClassDiagram.Class>> Expertise =>=>=> RelationalSchema.Table>> expertise;
ClassDiagram.Class>> Role =>=>=> RelationalSchema.Table>> role;
ClassDiagram.Class>> Order =>=>=> RelationalSchema.Table>> order;
ClassDiagram.Class>> Project =>=>=> RelationalSchema.Table>> project;
ClassDiagram.Class>> Post =>=>=> RelationalSchema.Table>> post;
ClassDiagram.Class>> Office =>=>=> RelationalSchema.Table>> office;
ClassDiagram.Class>> Tutorial =>=>=> RelationalSchema.Table>> tutorial;
ClassDiagram.Class>> TaskDetail =>=>=> RelationalSchema.Table>> taskdetail;
ClassDiagram.Class>> Article =>=>=> RelationalSchema.Table>> article;
ClassDiagram.Class>> SalesOrder =>=>=> RelationalSchema.Table>> salesorder;
ClassDiagram.Class>> Report =>=>=> RelationalSchema.Table>> report;
ClassDiagram.Class>> RoomOption =>=>=> RelationalSchema.Table>> roomoption;
ClassDiagram.Class>> ProjectReview =>=>=> RelationalSchema.Table>> projectreview;
ClassDiagram.Class>> Department =>=>=> RelationalSchema.Table>> department;
ClassDiagram.Class>> Balance =>=>=> RelationalSchema.Table>> balance;
ClassDiagram.Class>> Booking =>=>=> RelationalSchema.Table>> booking;
ClassDiagram.Class>> Task =>=>=> RelationalSchema.Table>> task;
ClassDiagram.Class>> UserRank =>=>=> RelationalSchema.Table>> userrank;
ClassDiagram.Class>> Topic =>=>=> RelationalSchema.Table>> topic;
ClassDiagram.Class>> RestaurantTable =>=>=> RelationalSchema.Table>> restauranttable;
ClassDiagram.Class>> Customer =>=>=> RelationalSchema.Table>> customer;
ClassDiagram.Class>> Meeting =>=>=> RelationalSchema.Table>> meeting;
ClassDiagram.Class>> Relationship =>=>=> RelationalSchema.Table>> relationship;
ClassDiagram.Class>> Subcategory =>=>=> RelationalSchema.Table>> subcategory;
ClassDiagram.Class>> Guest =>=>=> RelationalSchema.Table>> guest;
ClassDiagram.Class>> WorkSchedule =>=>=> RelationalSchema.Table>> workschedule;
ClassDiagram.Class>> GuestBranch =>=>=> RelationalSchema.Table>> guestbranch;
ClassDiagram.Class>> CommentChild =>=>=> RelationalSchema.Table>> commentchild;
ClassDiagram.Class>> Course =>=>=> RelationalSchema.Table>> course;
ClassDiagram.Class>> Company =>=>=> RelationalSchema.Table>> company;
ClassDiagram.Class>> EmployeeKin =>=>=> RelationalSchema.Table>> employeekin;
ClassDiagram.Class>> Ranking =>=>=> RelationalSchema.Table>> ranking;
ClassDiagram.Class>> ProductImage =>=>=> RelationalSchema.Table>> productimage;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> Car =>=>=> RelationalSchema.Table>> car;
ClassDiagram.Class>> Node =>=>=> RelationalSchema.Table>> node;
ClassDiagram.Class>> Comment =>=>=> RelationalSchema.Table>> comment;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> Meetup =>=>=> RelationalSchema.Table>> meetup;
ClassDiagram.Class>> MenuItem =>=>=> RelationalSchema.Table>> menuitem;
ClassDiagram.Class>> Education =>=>=> RelationalSchema.Table>> education;
ClassDiagram.Class>> Message =>=>=> RelationalSchema.Table>> message;
ClassDiagram.Class>> Tag =>=>=> RelationalSchema.Table>> tag;
ClassDiagram.Class>> Admin =>=>=> RelationalSchema.Table>> admin;
ClassDiagram.Class>> HibernateConfiguration =>=>=> RelationalSchema.Table>> hibernateconfiguration;
ClassDiagram.Class>> AuditInfo =>=>=> RelationalSchema.Table>> auditinfo;
ClassDiagram.Attribut>> Photo.photo_id:long =>=>=> RelationalSchema.Column>> photo.photo_id PRIMARY KEY;
ClassDiagram.Attribut>> Photo.photo_name:String =>=>=> RelationalSchema.Column>> photo.photo_name;
ClassDiagram.Attribut>> Photo.photo_description:String =>=>=> RelationalSchema.Column>> photo.photo_description;
ClassDiagram.Attribut>> Photo.photo_likes:long =>=>=> RelationalSchema.Column>> photo.photo_likes;
ClassDiagram.Attribut>> Photo.photo_views:long =>=>=> RelationalSchema.Column>> photo.photo_views;
ClassDiagram.Attribut>> Photo.upload_data:Date =>=>=> RelationalSchema.Column>> photo.upload_data;
ClassDiagram.Attribut>> Photo.photo_file:String =>=>=> RelationalSchema.Column>> photo.photo_file;
ClassDiagram.Attribut>> Appointment.appomentid:int =>=>=> RelationalSchema.Column>> appointment.appomentid PRIMARY KEY;
ClassDiagram.Attribut>> Appointment.GeneratedName:Date =>=>=> RelationalSchema.Column>> appointment.GeneratedName;
ClassDiagram.Attribut>> Appointment.location:String =>=>=> RelationalSchema.Column>> appointment.location;
ClassDiagram.Attribut>> Appointment.description:String =>=>=> RelationalSchema.Column>> appointment.description;
ClassDiagram.Attribut>> Appointment.confirmed:boolean =>=>=> RelationalSchema.Column>> appointment.confirmed;
ClassDiagram.Attribut>> ProjectManager.projectmanagerid:String =>=>=> RelationalSchema.Column>> projectmanager.projectmanagerid PRIMARY KEY;
ClassDiagram.Attribut>> ProjectManager.username:String =>=>=> RelationalSchema.Column>> projectmanager.username;
ClassDiagram.Attribut>> ProjectManager.firstname:String =>=>=> RelationalSchema.Column>> projectmanager.firstname;
ClassDiagram.Attribut>> ProjectManager.lastname:String =>=>=> RelationalSchema.Column>> projectmanager.lastname;
ClassDiagram.Attribut>> Position.id:int =>=>=> RelationalSchema.Column>> position.id PRIMARY KEY;
ClassDiagram.Attribut>> Visit.id:int =>=>=> RelationalSchema.Column>> visit.id PRIMARY KEY;
ClassDiagram.Attribut>> Visit.//privateemployeeemployee//@basic:Date =>=>=> RelationalSchema.Column>> visit.//privateemployeeemployee//@basic;
ClassDiagram.Attribut>> Visit.//@basicstatus:Boolean =>=>=> RelationalSchema.Column>> visit.//@basicstatus;
ClassDiagram.Attribut>> Room.id:Integer =>=>=> RelationalSchema.Column>> room.id PRIMARY KEY;
ClassDiagram.Attribut>> Room.roomcategory:String =>=>=> RelationalSchema.Column>> room.roomcategory;
ClassDiagram.Attribut>> Room.price:Integer =>=>=> RelationalSchema.Column>> room.price;
ClassDiagram.Attribut>> Address.id:int =>=>=> RelationalSchema.Column>> address.id PRIMARY KEY;
ClassDiagram.Attribut>> Address.street:String =>=>=> RelationalSchema.Column>> address.street;
ClassDiagram.Attribut>> Address.housenumber:String =>=>=> RelationalSchema.Column>> address.housenumber;
ClassDiagram.Attribut>> Address.zipcode:String =>=>=> RelationalSchema.Column>> address.zipcode;
ClassDiagram.Attribut>> Address.//creationcreatedat:Date =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> Category.//id//@fieldcategoryid:int =>=>=> RelationalSchema.Column>> category.//id//@fieldcategoryid PRIMARY KEY;
ClassDiagram.Attribut>> Category.//@field(type:String =>=>=> RelationalSchema.Column>> category.//@field(type;
ClassDiagram.Attribut>> Category.//@fielddescription:String =>=>=> RelationalSchema.Column>> category.//@fielddescription;
ClassDiagram.Attribut>> Category.//@timeformat(pattern:Date =>=>=> RelationalSchema.Column>> category.//@timeformat(pattern;
ClassDiagram.Attribut>> SalesItemLine.salesitemid:SalesItemLineId =>=>=> RelationalSchema.Column>> salesitemline.salesitemid;
ClassDiagram.Attribut>> SalesItemLine.quantity:int =>=>=> RelationalSchema.Column>> salesitemline.quantity;
ClassDiagram.Attribut>> Upload.id:int =>=>=> RelationalSchema.Column>> upload.id PRIMARY KEY;
ClassDiagram.Attribut>> Upload.data:String =>=>=> RelationalSchema.Column>> upload.data;
ClassDiagram.Attribut>> Model.id:Long =>=>=> RelationalSchema.Column>> model.id PRIMARY KEY;
ClassDiagram.Attribut>> File.fileid:int =>=>=> RelationalSchema.Column>> file.fileid PRIMARY KEY;
ClassDiagram.Attribut>> File.file:byte =>=>=> RelationalSchema.Column>> file.file;
ClassDiagram.Attribut>> File.custom:String =>=>=> RelationalSchema.Column>> file.custom;
ClassDiagram.Attribut>> File.make:String =>=>=> RelationalSchema.Column>> file.make;
ClassDiagram.Attribut>> File.year:int =>=>=> RelationalSchema.Column>> file.year;
ClassDiagram.Attribut>> File.redlinespeed:int =>=>=> RelationalSchema.Column>> file.redlinespeed;
ClassDiagram.Attribut>> File.maxcapacity:float =>=>=> RelationalSchema.Column>> file.maxcapacity;
ClassDiagram.Attribut>> File.lastmodified:Date =>=>=> RelationalSchema.Column>> file.lastmodified;
ClassDiagram.Attribut>> Event.GeneratedName:Location =>=>=> RelationalSchema.Column>> event.GeneratedName;
ClassDiagram.Attribut>> Event.alternativelocations:List<Location> =>=>=> RelationalSchema.Column>> event.alternativelocations;
ClassDiagram.Attribut>> Product.id:int =>=>=> RelationalSchema.Column>> product.id PRIMARY KEY;
ClassDiagram.Attribut>> Product.name:String =>=>=> RelationalSchema.Column>> product.name;
ClassDiagram.Attribut>> Product.description:String =>=>=> RelationalSchema.Column>> product.description;
ClassDiagram.Attribut>> Product.cost:Double =>=>=> RelationalSchema.Column>> product.cost;
ClassDiagram.Attribut>> Contact.contactid:int =>=>=> RelationalSchema.Column>> contact.contactid PRIMARY KEY;
ClassDiagram.Attribut>> Contact.//@field(analyze:String =>=>=> RelationalSchema.Column>> contact.//@field(analyze;
ClassDiagram.Attribut>> Contact.firstname:String =>=>=> RelationalSchema.Column>> contact.firstname;
ClassDiagram.Attribut>> Contact.lastname:String =>=>=> RelationalSchema.Column>> contact.lastname;
ClassDiagram.Attribut>> Contact.email:String =>=>=> RelationalSchema.Column>> contact.email;
ClassDiagram.Attribut>> Contact.phone:String =>=>=> RelationalSchema.Column>> contact.phone;
ClassDiagram.Attribut>> Contact.image:String =>=>=> RelationalSchema.Column>> contact.image;
ClassDiagram.Attribut>> Contact.birthday:Date =>=>=> RelationalSchema.Column>> contact.birthday;
ClassDiagram.Attribut>> Manager.carallowance:int =>=>=> RelationalSchema.Column>> manager.carallowance;
ClassDiagram.Attribut>> Manager.bonusallowance:int =>=>=> RelationalSchema.Column>> manager.bonusallowance;
ClassDiagram.Attribut>> Role.id:Integer =>=>=> RelationalSchema.Column>> role.id PRIMARY KEY;
ClassDiagram.Attribut>> Role.rolename:String =>=>=> RelationalSchema.Column>> role.rolename;
ClassDiagram.Attribut>> Order.id:int =>=>=> RelationalSchema.Column>> order.id PRIMARY KEY;
ClassDiagram.Attribut>> Order.firstname:String =>=>=> RelationalSchema.Column>> order.firstname;
ClassDiagram.Attribut>> Order.lastname:String =>=>=> RelationalSchema.Column>> order.lastname;
ClassDiagram.Attribut>> Order.birthday:Date =>=>=> RelationalSchema.Column>> order.birthday;
ClassDiagram.Attribut>> Order.deliveryaddress:String =>=>=> RelationalSchema.Column>> order.deliveryaddress;
ClassDiagram.Attribut>> Order.delivery:Date =>=>=> RelationalSchema.Column>> order.delivery;
ClassDiagram.Attribut>> Order.totalcost:Double =>=>=> RelationalSchema.Column>> order.totalcost;
ClassDiagram.Attribut>> Order.GeneratedName:OrderStatus =>=>=> RelationalSchema.Column>> order.GeneratedName;
ClassDiagram.Attribut>> Project.id:Integer =>=>=> RelationalSchema.Column>> project.id PRIMARY KEY;
ClassDiagram.Attribut>> Project.name:String =>=>=> RelationalSchema.Column>> project.name;
ClassDiagram.Attribut>> Project.content:String =>=>=> RelationalSchema.Column>> project.content;
ClassDiagram.Attribut>> Project.////departmentdepartmentdeadline:Date =>=>=> RelationalSchema.Column>> project.////departmentdepartmentdeadline;
ClassDiagram.Attribut>> Project.status:String =>=>=> RelationalSchema.Column>> project.status;
ClassDiagram.Attribut>> Project.title:String =>=>=> RelationalSchema.Column>> project.title;
ClassDiagram.Attribut>> Project.nosprints:Integer =>=>=> RelationalSchema.Column>> project.nosprints;
ClassDiagram.Attribut>> Project.sprintlengthdays:Integer =>=>=> RelationalSchema.Column>> project.sprintlengthdays;
ClassDiagram.Attribut>> Post.//@generatedvalue(strategy:Integer =>=>=> RelationalSchema.Column>> post.//@generatedvalue(strategy PRIMARY KEY;
ClassDiagram.Attribut>> Post.title:String =>=>=> RelationalSchema.Column>> post.title;
ClassDiagram.Attribut>> Post.body:String =>=>=> RelationalSchema.Column>> post.body;
ClassDiagram.Attribut>> Post.//transientfieldshorttext:String =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> Post.create:Date =>=>=> RelationalSchema.Column>> post.create;
ClassDiagram.Attribut>> Post.modify:Date =>=>=> RelationalSchema.Column>> post.modify;
ClassDiagram.Attribut>> Post.imageurl:String =>=>=> RelationalSchema.Column>> post.imageurl;
ClassDiagram.Attribut>> Office.id:int =>=>=> RelationalSchema.Column>> office.id PRIMARY KEY;
ClassDiagram.Attribut>> Office.name:String =>=>=> RelationalSchema.Column>> office.name;
ClassDiagram.Attribut>> Tutorial.serialversionuid:long =>=>=> RelationalSchema.Column>> tutorial.serialversionuid;
ClassDiagram.Attribut>> Tutorial.tutorialid:int =>=>=> RelationalSchema.Column>> tutorial.tutorialid PRIMARY KEY;
ClassDiagram.Attribut>> Tutorial.title:String =>=>=> RelationalSchema.Column>> tutorial.title;
ClassDiagram.Attribut>> Tutorial.category:String =>=>=> RelationalSchema.Column>> tutorial.category;
ClassDiagram.Attribut>> TaskDetail.id:Long =>=>=> RelationalSchema.Column>> taskdetail.id PRIMARY KEY;
ClassDiagram.Attribut>> TaskDetail.message:String =>=>=> RelationalSchema.Column>> taskdetail.message;
ClassDiagram.Attribut>> TaskDetail.GeneratedName:Date =>=>=> RelationalSchema.Column>> taskdetail.GeneratedName;
ClassDiagram.Attribut>> TaskDetail.time:int =>=>=> RelationalSchema.Column>> taskdetail.time;
ClassDiagram.Attribut>> Article.serialversionuid:long =>=>=> RelationalSchema.Column>> article.serialversionuid;
ClassDiagram.Attribut>> Article.articleid:int =>=>=> RelationalSchema.Column>> article.articleid PRIMARY KEY;
ClassDiagram.Attribut>> Article.//@fieldtitle:String =>=>=> RelationalSchema.Column>> article.//@fieldtitle;
ClassDiagram.Attribut>> Article.//@fieldcategory:String =>=>=> RelationalSchema.Column>> article.//@fieldcategory;
ClassDiagram.Attribut>> Article.//@fieldcontent:String =>=>=> RelationalSchema.Column>> article.//@fieldcontent;
ClassDiagram.Attribut>> Article./*@field*/description:String =>=>=> RelationalSchema.Column>> article./*@field*/description;
ClassDiagram.Attribut>> Article.//@fieldcreatedat:Date =>=>=> RelationalSchema.Column>> article.//@fieldcreatedat;
ClassDiagram.Attribut>> SalesOrder.salesorderid:int =>=>=> RelationalSchema.Column>> salesorder.salesorderid PRIMARY KEY;
ClassDiagram.Attribut>> SalesOrder./**theonwhichtheorderwasplaced*/order:Date =>=>=> RelationalSchema.Column>> salesorder./**theonwhichtheorderwasplaced*/order;
ClassDiagram.Attribut>> SalesOrder./**timeatwhichtheorderwasrecorded*/ordertime:Date =>=>=> RelationalSchema.Column>> salesorder./**timeatwhichtheorderwasrecorded*/ordertime;
ClassDiagram.Attribut>> SalesOrder.//totalcostofthesalesordertotalcost:int =>=>=> RelationalSchema.Column>> salesorder.//totalcostofthesalesordertotalcost;
ClassDiagram.Attribut>> Report.id:int =>=>=> RelationalSchema.Column>> report.id PRIMARY KEY;
ClassDiagram.Attribut>> Report.start:Date =>=>=> RelationalSchema.Column>> report.start;
ClassDiagram.Attribut>> Report.end:Date =>=>=> RelationalSchema.Column>> report.end;
ClassDiagram.Attribut>> Report.performer:String =>=>=> RelationalSchema.Column>> report.performer;
ClassDiagram.Attribut>> Report.activity:String =>=>=> RelationalSchema.Column>> report.activity;
ClassDiagram.Attribut>> RoomOption.id:Integer =>=>=> RelationalSchema.Column>> roomoption.id PRIMARY KEY;
ClassDiagram.Attribut>> RoomOption.name:String =>=>=> RelationalSchema.Column>> roomoption.name;
ClassDiagram.Attribut>> RoomOption.price:Integer =>=>=> RelationalSchema.Column>> roomoption.price;
ClassDiagram.Attribut>> ProjectReview.projectreviewid:int =>=>=> RelationalSchema.Column>> projectreview.projectreviewid PRIMARY KEY;
ClassDiagram.Attribut>> ProjectReview.title:String =>=>=> RelationalSchema.Column>> projectreview.title;
ClassDiagram.Attribut>> ProjectReview.description:String =>=>=> RelationalSchema.Column>> projectreview.description;
ClassDiagram.Attribut>> ProjectReview.GeneratedName:EditionType =>=>=> RelationalSchema.Column>> projectreview.GeneratedName;
ClassDiagram.Attribut>> ProjectReview.release:Date =>=>=> RelationalSchema.Column>> projectreview.release;
ClassDiagram.Attribut>> Department.id:long =>=>=> RelationalSchema.Column>> department.id PRIMARY KEY;
ClassDiagram.Attribut>> Department.name:String =>=>=> RelationalSchema.Column>> department.name;
ClassDiagram.Attribut>> Department.contactemail:String =>=>=> RelationalSchema.Column>> department.contactemail;
ClassDiagram.Attribut>> Department.contactphone:String =>=>=> RelationalSchema.Column>> department.contactphone;
ClassDiagram.Attribut>> Department.created:Date =>=>=> RelationalSchema.Column>> department.created;
ClassDiagram.Attribut>> Balance.id:int =>=>=> RelationalSchema.Column>> balance.id PRIMARY KEY;
ClassDiagram.Attribut>> Balance.balanceamount:int =>=>=> RelationalSchema.Column>> balance.balanceamount;
ClassDiagram.Attribut>> Booking.id:Long =>=>=> RelationalSchema.Column>> booking.id PRIMARY KEY;
ClassDiagram.Attribut>> Booking.start:Date =>=>=> RelationalSchema.Column>> booking.start;
ClassDiagram.Attribut>> Booking.end:Date =>=>=> RelationalSchema.Column>> booking.end;
ClassDiagram.Attribut>> Booking.cost:int =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> Task.id:Long =>=>=> RelationalSchema.Column>> task.id PRIMARY KEY;
ClassDiagram.Attribut>> Task.name:String =>=>=> RelationalSchema.Column>> task.name;
ClassDiagram.Attribut>> Task.description:String =>=>=> RelationalSchema.Column>> task.description;
ClassDiagram.Attribut>> Task.iscomplete:boolean =>=>=> RelationalSchema.Column>> task.iscomplete;
ClassDiagram.Attribut>> Task.start:Date =>=>=> RelationalSchema.Column>> task.start;
ClassDiagram.Attribut>> Task.end:Date =>=>=> RelationalSchema.Column>> task.end;
ClassDiagram.Attribut>> UserRank.id:int =>=>=> RelationalSchema.Column>> userrank.id PRIMARY KEY;
ClassDiagram.Attribut>> UserRank.name:String =>=>=> RelationalSchema.Column>> userrank.name;
ClassDiagram.Attribut>> Topic.id:int =>=>=> RelationalSchema.Column>> topic.id PRIMARY KEY;
ClassDiagram.Attribut>> Topic.name:String =>=>=> RelationalSchema.Column>> topic.name;
ClassDiagram.Attribut>> Topic.description:String =>=>=> RelationalSchema.Column>> topic.description;
ClassDiagram.Attribut>> RestaurantTable.id:int =>=>=> RelationalSchema.Column>> restauranttable.id PRIMARY KEY;
ClassDiagram.Attribut>> RestaurantTable.seats:int =>=>=> RelationalSchema.Column>> restauranttable.seats;
ClassDiagram.Attribut>> RestaurantTable.isreserved:int =>=>=> RelationalSchema.Column>> restauranttable.isreserved;
ClassDiagram.Attribut>> RestaurantTable.invoiceid:int =>=>=> RelationalSchema.Column>> restauranttable.invoiceid;
ClassDiagram.Attribut>> RestaurantTable.totaltablecount:int =>=>=> RelationalSchema.Column>> restauranttable.totaltablecount;
ClassDiagram.Attribut>> RestaurantTable.max_table_count:int =>=>=> RelationalSchema.Column>> restauranttable.max_table_count;
ClassDiagram.Attribut>> Customer.serialversionuid:long =>=>=> RelationalSchema.Column>> customer.serialversionuid;
ClassDiagram.Attribut>> Customer.id:Long =>=>=> RelationalSchema.Column>> customer.id PRIMARY KEY;
ClassDiagram.Attribut>> Customer.firstname:String =>=>=> RelationalSchema.Column>> customer.firstname;
ClassDiagram.Attribut>> Customer.lastname:String =>=>=> RelationalSchema.Column>> customer.lastname;
ClassDiagram.Attribut>> Customer.//versionversion:int =>=>=> RelationalSchema.Column>> customer.//versionversion;
ClassDiagram.Attribut>> Meeting.id:int =>=>=> RelationalSchema.Column>> meeting.id PRIMARY KEY;
ClassDiagram.Attribut>> Meeting.name:String =>=>=> RelationalSchema.Column>> meeting.name;
ClassDiagram.Attribut>> Relationship.id:long =>=>=> RelationalSchema.Column>> relationship.id PRIMARY KEY;
ClassDiagram.Attribut>> Subcategory.id:int =>=>=> RelationalSchema.Column>> subcategory.id PRIMARY KEY;
ClassDiagram.Attribut>> Subcategory.name:String =>=>=> RelationalSchema.Column>> subcategory.name;
ClassDiagram.Attribut>> Guest.id:Integer =>=>=> RelationalSchema.Column>> guest.id PRIMARY KEY;
ClassDiagram.Attribut>> Guest.modification:Date =>=>=> RelationalSchema.Column>> guest.modification;
ClassDiagram.Attribut>> Guest.creation:Date =>=>=> RelationalSchema.Column>> guest.creation;
ClassDiagram.Attribut>> Guest.version:Integer =>=>=> RelationalSchema.Column>> guest.version;
ClassDiagram.Attribut>> Guest.name:String =>=>=> RelationalSchema.Column>> guest.name;
ClassDiagram.Attribut>> Guest.address:String =>=>=> RelationalSchema.Column>> guest.address;
ClassDiagram.Attribut>> Guest.phone:String =>=>=> RelationalSchema.Column>> guest.phone;
ClassDiagram.Attribut>> WorkSchedule.id:long =>=>=> RelationalSchema.Column>> workschedule.id PRIMARY KEY;
ClassDiagram.Attribut>> WorkSchedule.starttime:Timestamp =>=>=> RelationalSchema.Column>> workschedule.starttime;
ClassDiagram.Attribut>> WorkSchedule.endtime:Timestamp =>=>=> RelationalSchema.Column>> workschedule.endtime;
ClassDiagram.Attribut>> WorkSchedule.workday:WeekDay =>=>=> RelationalSchema.Column>> workschedule.workday;
ClassDiagram.Attribut>> GuestBranch.serialversionuid:long =>=>=> RelationalSchema.Column>> guestbranch.serialversionuid;
ClassDiagram.Attribut>> GuestBranch.guestbranchid:int =>=>=> RelationalSchema.Column>> guestbranch.guestbranchid PRIMARY KEY;
ClassDiagram.Attribut>> GuestBranch.branchno:String =>=>=> RelationalSchema.Column>> guestbranch.branchno;
ClassDiagram.Attribut>> GuestBranch.name:String =>=>=> RelationalSchema.Column>> guestbranch.name;
ClassDiagram.Attribut>> CommentChild.id:int =>=>=> RelationalSchema.Column>> commentchild.id PRIMARY KEY;
ClassDiagram.Attribut>> CommentChild.comment:String =>=>=> RelationalSchema.Column>> commentchild.comment;
ClassDiagram.Attribut>> CommentChild.idcomment:int =>=>=> RelationalSchema.Column>> commentchild.idcomment;
ClassDiagram.Attribut>> CommentChild.user:String =>=>=> RelationalSchema.Column>> commentchild.user;
ClassDiagram.Attribut>> CommentChild.date:String =>=>=> RelationalSchema.Column>> commentchild.date;
ClassDiagram.Attribut>> Course.courseid:int =>=>=> RelationalSchema.Column>> course.courseid PRIMARY KEY;
ClassDiagram.Attribut>> Course.name:String =>=>=> RelationalSchema.Column>> course.name;
ClassDiagram.Attribut>> Company.id:int =>=>=> RelationalSchema.Column>> company.id PRIMARY KEY;
ClassDiagram.Attribut>> Company.name:String =>=>=> RelationalSchema.Column>> company.name;
ClassDiagram.Attribut>> Company.logourl:String =>=>=> RelationalSchema.Column>> company.logourl;
ClassDiagram.Attribut>> Company.location:String =>=>=> RelationalSchema.Column>> company.location;
ClassDiagram.Attribut>> Company.description:String =>=>=> RelationalSchema.Column>> company.description;
ClassDiagram.Attribut>> Company.website:String =>=>=> RelationalSchema.Column>> company.website;
ClassDiagram.Attribut>> EmployeeKin.id:int =>=>=> RelationalSchema.Column>> employeekin.id PRIMARY KEY;
ClassDiagram.Attribut>> EmployeeKin.firstname:String =>=>=> RelationalSchema.Column>> employeekin.firstname;
ClassDiagram.Attribut>> EmployeeKin.lastname:String =>=>=> RelationalSchema.Column>> employeekin.lastname;
ClassDiagram.Attribut>> EmployeeKin.streetaddress:String =>=>=> RelationalSchema.Column>> employeekin.streetaddress;
ClassDiagram.Attribut>> EmployeeKin.cityaddress:String =>=>=> RelationalSchema.Column>> employeekin.cityaddress;
ClassDiagram.Attribut>> EmployeeKin.zipcode:String =>=>=> RelationalSchema.Column>> employeekin.zipcode;
ClassDiagram.Attribut>> ProductImage.pk:Long =>=>=> RelationalSchema.Column>> productimage.pk PRIMARY KEY;
ClassDiagram.Attribut>> ProductImage.name:String =>=>=> RelationalSchema.Column>> productimage.name;
ClassDiagram.Attribut>> ProductImage.description:String =>=>=> RelationalSchema.Column>> productimage.description;
ClassDiagram.Attribut>> ProductImage.contenttype:String =>=>=> RelationalSchema.Column>> productimage.contenttype;
ClassDiagram.Attribut>> ProductImage.lob:byte =>=>=> RelationalSchema.Column>> productimage.lob;
ClassDiagram.Attribut>> ProductImage.created:Date =>=>=> RelationalSchema.Column>> productimage.created;
ClassDiagram.Attribut>> Employee.id:int =>=>=> RelationalSchema.Column>> employee.id PRIMARY KEY;
ClassDiagram.Attribut>> Employee.ssn:String =>=>=> RelationalSchema.Column>> employee.ssn;
ClassDiagram.Attribut>> Employee.firstname:String =>=>=> RelationalSchema.Column>> employee.firstname;
ClassDiagram.Attribut>> Employee.lastname:String =>=>=> RelationalSchema.Column>> employee.lastname;
ClassDiagram.Attribut>> Employee.ofbirth:Date =>=>=> RelationalSchema.Column>> employee.ofbirth;
ClassDiagram.Attribut>> Employee.GeneratedName:JobTitle =>=>=> RelationalSchema.Column>> employee.GeneratedName;
ClassDiagram.Attribut>> Employee.joining:Date =>=>=> RelationalSchema.Column>> employee.joining;
ClassDiagram.Attribut>> Employee.salary:int =>=>=> RelationalSchema.Column>> employee.salary;
ClassDiagram.Attribut>> Employee.aptno:String =>=>=> RelationalSchema.Column>> employee.aptno;
ClassDiagram.Attribut>> Employee.streetname:String =>=>=> RelationalSchema.Column>> employee.streetname;
ClassDiagram.Attribut>> Employee.city:String =>=>=> RelationalSchema.Column>> employee.city;
ClassDiagram.Attribut>> Employee.zipcode:String =>=>=> RelationalSchema.Column>> employee.zipcode;
ClassDiagram.Attribut>> Car.id:int =>=>=> RelationalSchema.Column>> car.id PRIMARY KEY;
ClassDiagram.Attribut>> Car.registrationnumber:String =>=>=> RelationalSchema.Column>> car.registrationnumber;
ClassDiagram.Attribut>> Node.id:long =>=>=> RelationalSchema.Column>> node.id PRIMARY KEY;
ClassDiagram.Attribut>> Node.name:String =>=>=> RelationalSchema.Column>> node.name;
ClassDiagram.Attribut>> Comment.id:int =>=>=> RelationalSchema.Column>> comment.id PRIMARY KEY;
ClassDiagram.Attribut>> Comment.postid:Long =>=>=> RelationalSchema.Column>> comment.postid;
ClassDiagram.Attribut>> Comment.content:String =>=>=> RelationalSchema.Column>> comment.content;
ClassDiagram.Attribut>> Comment.author:String =>=>=> RelationalSchema.Column>> comment.author;
ClassDiagram.Attribut>> Comment.creation:Date =>=>=> RelationalSchema.Column>> comment.creation;
ClassDiagram.Attribut>> Comment.user:String =>=>=> RelationalSchema.Column>> comment.user;
ClassDiagram.Attribut>> User.serialversionuid:long =>=>=> RelationalSchema.Column>> user.serialversionuid;
ClassDiagram.Attribut>> User.//////egeriduserid:int =>=>=> RelationalSchema.Column>> user.//////egeriduserid PRIMARY KEY;
ClassDiagram.Attribut>> User.username:String =>=>=> RelationalSchema.Column>> user.username;
ClassDiagram.Attribut>> User.firstname:String =>=>=> RelationalSchema.Column>> user.firstname;
ClassDiagram.Attribut>> User.lastname:String =>=>=> RelationalSchema.Column>> user.lastname;
ClassDiagram.Attribut>> User.password:String =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> User.email:String =>=>=> RelationalSchema.Column>> user.email;
ClassDiagram.Attribut>> User.//@basic(optional:String =>=>=> RelationalSchema.Column>> user.//@basic(optional;
ClassDiagram.Attribut>> User._of_birth:Date =>=>=> RelationalSchema.Column>> user._of_birth;
ClassDiagram.Attribut>> User.registered:Date =>=>=> RelationalSchema.Column>> user.registered;
ClassDiagram.Attribut>> User.description:String =>=>=> RelationalSchema.Column>> user.description;
ClassDiagram.Attribut>> User.website:String =>=>=> RelationalSchema.Column>> user.website;
ClassDiagram.Attribut>> Meetup.id:Integer =>=>=> RelationalSchema.Column>> meetup.id PRIMARY KEY;
ClassDiagram.Attribut>> Meetup.location:String =>=>=> RelationalSchema.Column>> meetup.location;
ClassDiagram.Attribut>> Meetup.date:LocalDate =>=>=> RelationalSchema.Column>> meetup.date;
ClassDiagram.Attribut>> Meetup.time:LocalTime =>=>=> RelationalSchema.Column>> meetup.time;
ClassDiagram.Attribut>> Meetup.topic:String =>=>=> RelationalSchema.Column>> meetup.topic;
ClassDiagram.Attribut>> Meetup.description:String =>=>=> RelationalSchema.Column>> meetup.description;
ClassDiagram.Attribut>> MenuItem.id:int =>=>=> RelationalSchema.Column>> menuitem.id PRIMARY KEY;
ClassDiagram.Attribut>> MenuItem.itemname:String =>=>=> RelationalSchema.Column>> menuitem.itemname;
ClassDiagram.Attribut>> MenuItem.itemprice:int =>=>=> RelationalSchema.Column>> menuitem.itemprice;
ClassDiagram.Attribut>> MenuItem.decription:String =>=>=> RelationalSchema.Column>> menuitem.decription;
ClassDiagram.Attribut>> MenuItem.itemtype:MenuItemType =>=>=> RelationalSchema.Column>> menuitem.itemtype;
ClassDiagram.Attribut>> Education.id:int =>=>=> RelationalSchema.Column>> education.id PRIMARY KEY;
ClassDiagram.Attribut>> Education.schoolname:String =>=>=> RelationalSchema.Column>> education.schoolname;
ClassDiagram.Attribut>> Education.degree:String =>=>=> RelationalSchema.Column>> education.degree;
ClassDiagram.Attribut>> Education.field:String =>=>=> RelationalSchema.Column>> education.field;
ClassDiagram.Attribut>> Message.id:Integer =>=>=> RelationalSchema.Column>> message.id PRIMARY KEY;
ClassDiagram.Attribut>> Message.body:String =>=>=> RelationalSchema.Column>> message.body;
ClassDiagram.Attribut>> Message.created:Date =>=>=> RelationalSchema.Column>> message.created;
ClassDiagram.Attribut>> Message.senderid:String =>=>=> RelationalSchema.Column>> message.senderid;
ClassDiagram.Attribut>> Message.receiverid:String =>=>=> RelationalSchema.Column>> message.receiverid;
ClassDiagram.Attribut>> Message.messageid:String =>=>=> RelationalSchema.Column>> message.messageid;
ClassDiagram.Attribut>> Tag.id:int =>=>=> RelationalSchema.Column>> tag.id PRIMARY KEY;
ClassDiagram.Attribut>> Tag.name:String =>=>=> RelationalSchema.Column>> tag.name;
ClassDiagram.Attribut>> Admin.adminid:int =>=>=> RelationalSchema.Column>> admin.adminid PRIMARY KEY;
ClassDiagram.Attribut>> Admin.firstname:String =>=>=> RelationalSchema.Column>> admin.firstname;
ClassDiagram.Attribut>> Admin.lastname:String =>=>=> RelationalSchema.Column>> admin.lastname;
ClassDiagram.Attribut>> Admin.username:String =>=>=> RelationalSchema.Column>> admin.username;
ClassDiagram.Attribut>> Admin.password:String =>=>=> RelationalSchema.Column>> admin.password;
ClassDiagram.Attribut>> Admin.email:String =>=>=> RelationalSchema.Column>> admin.email;
ClassDiagram.Attribut>> Admin.phone:long =>=>=> RelationalSchema.Column>> admin.phone;
ClassDiagram.Attribut>> AuditInfo./***/serialversionuid:long =>=>=> RelationalSchema.Column>> auditinfo./***/serialversionuid;
ClassDiagram.Attribut>> AuditInfo.createdon:Date =>=>=> RelationalSchema.Column>> auditinfo.createdon;
ClassDiagram.Attribut>> AuditInfo.createdby:String =>=>=> RelationalSchema.Column>> auditinfo.createdby;
ClassDiagram.Attribut>> AuditInfo.updon:Date =>=>=> RelationalSchema.Column>> auditinfo.updon;
ClassDiagram.Attribut>> AuditInfo.updatedby:String =>=>=> RelationalSchema.Column>> auditinfo.updatedby;
Many-To-One relationship from ClassDiagram.Class>>Photo  to ClassDiagram.Class>>user represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Photo  to ClassDiagram.Class>>Category represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Appointment  to ClassDiagram.Class>>user represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Position  to ClassDiagram.Class>>Set<User>;
Many-To-One relationship from ClassDiagram.Class>>Visit  to ClassDiagram.Class>>Guest represented by ClassDiagram.Atrribute>>//refreplationship;
Many-To-Many relationship between ClassDiagram.Class>>Room  and ClassDiagram.Class>>Room: room_options(room_id:Room [PK] #FK to Room,option_id:Room [PK] #FK to Room);
One-To-Many relationship from ClassDiagram.Class>>Room  to ClassDiagram.Class>>List<Booking>;
One-To-Many relationship from ClassDiagram.Class>>Category  to ClassDiagram.Class>>List<Photo>;
Many-To-One relationship from ClassDiagram.Class>>SalesItemLine  to ClassDiagram.Class>>Order represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>SalesItemLine  to ClassDiagram.Class>>menuitem represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Product  to ClassDiagram.Class>>List<ProductImage>;
One-To-One relationship between ClassDiagram.Class>>Contact  to ClassDiagram.Class>>user represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-Many relationship between ClassDiagram.Class>>Order  and ClassDiagram.Class>>Product: orders_products(order_id:Order [PK] #FK to Order,product_id:Product [PK] #FK to Product);
One-To-One relationship between ClassDiagram.Class>>Project  to ClassDiagram.Class>>ProjectManager represented by ClassDiagram.Atrribute>>//entityrelationship;
Many-To-One relationship from ClassDiagram.Class>>Post  to ClassDiagram.Class>>user represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-Many relationship between ClassDiagram.Class>>Post  and ClassDiagram.Class>>list<tag>: post_tags(post_id:Post [PK] #FK to Post,tag_id:list<tag> [PK] #FK to list<tag>);
Many-To-Many relationship between ClassDiagram.Class>>Post  and ClassDiagram.Class>>list<tag>: post_tags(post_id:Post [PK] #FK to Post,tag_id:list<tag> [PK] #FK to list<tag>);post_categorization(post_id:Post [PK] #FK to Post,tag_id:list<tag> [PK] #FK to list<tag>);
Many-To-One relationship from ClassDiagram.Class>>Post  to ClassDiagram.Class>>Department represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Office  to ClassDiagram.Class>>Address represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Office  to ClassDiagram.Class>>Department represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>SalesOrder  to ClassDiagram.Class>>employee represented by ClassDiagram.Atrribute>>/*	*thisfieldmapscustomertoitssalesorder	*asalesorderwillhaveonecustomer,butacustomercanhave	*multiplesalesorder	*//*	@joincolumn(name;
Many-To-Many relationship between ClassDiagram.Class>>ProjectReview  and ClassDiagram.Class>>Category: projectreview_category(projectreview_id:ProjectReview [PK] #FK to ProjectReview,category_id:Category [PK] #FK to Category);
Many-To-One relationship from ClassDiagram.Class>>ProjectReview  to ClassDiagram.Class>>user represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Department  to ClassDiagram.Class>>List<Post>;
One-To-Many relationship from ClassDiagram.Class>>Department  to ClassDiagram.Class>>Set<User>;
One-To-Many relationship from ClassDiagram.Class>>Department  to ClassDiagram.Class>>Set<Office>;
Many-To-One relationship from ClassDiagram.Class>>Department  to ClassDiagram.Class>>company represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Balance  to ClassDiagram.Class>>user represented by ClassDiagram.Atrribute>>//relationshipref;
Many-To-One relationship from ClassDiagram.Class>>Booking  to ClassDiagram.Class>>Room represented by ClassDiagram.Atrribute>>//relationshiptable;
Many-To-One relationship from ClassDiagram.Class>>Booking  to ClassDiagram.Class>>user represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Task  to ClassDiagram.Class>>List<TaskDetail>;
Many-To-Many relationship between ClassDiagram.Class>>Task  and ClassDiagram.Class>>list<user>: task_user(task_id:Task [PK] #FK to Task,user_id:list<user> [PK] #FK to list<user>);
One-To-Many relationship from ClassDiagram.Class>>UserRank  to ClassDiagram.Class>>List<User>;
Many-To-Many relationship between ClassDiagram.Class>>Meeting  and ClassDiagram.Class>>Department: meeting_department(meeting_id:Meeting [PK] #FK to Meeting,department_id:Department [PK] #FK to Department);
Many-To-One relationship from ClassDiagram.Class>>Relationship  to ClassDiagram.Class>>user represented by ClassDiagram.Atrribute>>//relationshiptable//-followfollower;
Many-To-One relationship from ClassDiagram.Class>>Relationship  to ClassDiagram.Class>>user represented by ClassDiagram.Atrribute>>//followedfollowed;
Many-To-One relationship from ClassDiagram.Class>>Subcategory  to ClassDiagram.Class>>Category represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Guest  to ClassDiagram.Class>>List<Visit>;
Many-To-One relationship from ClassDiagram.Class>>Course  to ClassDiagram.Class>>Category represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Course  to ClassDiagram.Class>>Topic represented by ClassDiagram.Atrribute>>//;
One-To-Many relationship from ClassDiagram.Class>>Company  to ClassDiagram.Class>>Set<Department>;
One-To-Many relationship from ClassDiagram.Class>>Company  to ClassDiagram.Class>>Set<Car>;
One-To-One relationship between ClassDiagram.Class>>Company  to ClassDiagram.Class>>user represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>EmployeeKin  to ClassDiagram.Class>>employee represented by ClassDiagram.Atrribute>>//thefieldtracksstotheirkinparent;
Many-To-One relationship from ClassDiagram.Class>>ProductImage  to ClassDiagram.Class>>Product represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Employee  to ClassDiagram.Class>>Set<EmployeeKin>;
Many-To-One relationship from ClassDiagram.Class>>Employee  to ClassDiagram.Class>>Department represented by ClassDiagram.Atrribute>>//fortestingpurpose//string;
Many-To-One relationship from ClassDiagram.Class>>Car  to ClassDiagram.Class>>company represented by ClassDiagram.Atrribute>>//relationship;
Many-To-One relationship from ClassDiagram.Class>>Node  to ClassDiagram.Class>>node represented by ClassDiagram.Atrribute>>parent;
One-To-Many relationship from ClassDiagram.Class>>Node  to ClassDiagram.Class>>Collection<Node>;
Many-To-Many relationship between ClassDiagram.Class>>User  and ClassDiagram.Class>>Role: user_role(user_id:User [PK] #FK to User,role_id:Role [PK] #FK to Role);
One-To-One relationship between ClassDiagram.Class>>User  to ClassDiagram.Class>>Contact represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>User  to ClassDiagram.Class>>List<Meetup>;
null: user_role(user_id:User [PK] #FK to User,role_id:Role [PK] #FK to Role);
One-To-Many relationship from ClassDiagram.Class>>User  to ClassDiagram.Class>>Set<ProjectReview>;
One-To-One relationship between ClassDiagram.Class>>User  to ClassDiagram.Class>>Address represented by ClassDiagram.Atrribute>>//;
One-To-Many relationship from ClassDiagram.Class>>User  to ClassDiagram.Class>>List<Photo>;
One-To-Many relationship from ClassDiagram.Class>>User  to ClassDiagram.Class>>List<Post>;
Many-To-One relationship from ClassDiagram.Class>>User  to ClassDiagram.Class>>Position represented by ClassDiagram.Atrribute>>GeneratedName;
null: user_role(user_id:User [PK] #FK to User,role_id:Role [PK] #FK to Role);
One-To-Many relationship from ClassDiagram.Class>>User  to ClassDiagram.Class>>Collection<Relationship>;
One-To-Many relationship from ClassDiagram.Class>>User  to ClassDiagram.Class>>List<Booking>;
Many-To-One relationship from ClassDiagram.Class>>Meetup  to ClassDiagram.Class>>user represented by ClassDiagram.Atrribute>>//entityrelationship//organiserorganizer;
Many-To-Many relationship between ClassDiagram.Class>>Meetup  and ClassDiagram.Class>>list<user>: user_meetups_attending(meetup_id:Meetup [PK] #FK to Meetup,user_id:list<user> [PK] #FK to list<user>);
Many-To-One relationship from ClassDiagram.Class>>Tag  to ClassDiagram.Class>>Category represented by ClassDiagram.Atrribute>>GeneratedName;
Photo: tag_Photo(tagID:tag [PK] #FK to tag,PhotoID:Photo [PK] #FK to Photo);
