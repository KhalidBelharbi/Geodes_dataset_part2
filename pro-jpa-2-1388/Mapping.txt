ClassDiagram.Class>> Address =>=>=> RelationalSchema.Table>> address;
ClassDiagram.Class>> DesignProject =>=>=> RelationalSchema.Table>> designproject;
ClassDiagram.Class>> Project =>=>=> RelationalSchema.Table>> project;
ClassDiagram.Class>> Department =>=>=> RelationalSchema.Table>> department;
ClassDiagram.Class>> Phone =>=>=> RelationalSchema.Table>> phone;
ClassDiagram.Class>> QualityProject =>=>=> RelationalSchema.Table>> qualityproject;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Attribut>> Address.id:int =>=>=> RelationalSchema.Column>> address.id PRIMARY KEY;
ClassDiagram.Attribut>> Address.street:String =>=>=> RelationalSchema.Column>> address.street;
ClassDiagram.Attribut>> Address.city:String =>=>=> RelationalSchema.Column>> address.city;
ClassDiagram.Attribut>> Address.state:String =>=>=> RelationalSchema.Column>> address.state;
ClassDiagram.Attribut>> Address.zip:String =>=>=> RelationalSchema.Column>> address.zip;
ClassDiagram.Attribut>> Project.id:int =>=>=> RelationalSchema.Column>> project.id PRIMARY KEY;
ClassDiagram.Attribut>> Project.name:String =>=>=> RelationalSchema.Column>> project.name;
ClassDiagram.Attribut>> Department.id:int =>=>=> RelationalSchema.Column>> department.id PRIMARY KEY;
ClassDiagram.Attribut>> Department.name:String =>=>=> RelationalSchema.Column>> department.name;
ClassDiagram.Attribut>> Phone.id:long =>=>=> RelationalSchema.Column>> phone.id PRIMARY KEY;
ClassDiagram.Attribut>> Phone.number:String =>=>=> RelationalSchema.Column>> phone.number;
ClassDiagram.Attribut>> Phone.type:String =>=>=> RelationalSchema.Column>> phone.type;
ClassDiagram.Attribut>> QualityProject.qa_rating:int =>=>=> RelationalSchema.Column>> qualityproject.qa_rating;
ClassDiagram.Attribut>> Employee.id:int =>=>=> RelationalSchema.Column>> employee.id PRIMARY KEY;
ClassDiagram.Attribut>> Employee.name:EmployeeName =>=>=> RelationalSchema.Column>> employee.name;
ClassDiagram.Attribut>> Employee.salary:long =>=>=> RelationalSchema.Column>> employee.salary;
ClassDiagram.Attribut>> Employee.start:Date =>=>=> RelationalSchema.Column>> employee.start;
collection<employee>: project_collection<employee>(projectID:project [PK] #FK to project,collection<employee>ID:collection<employee> [PK] #FK to collection<employee>);
One-To-Many relationship from ClassDiagram.Class>>Department  to ClassDiagram.Class>>Map<EmployeeName,Employee>;
One-To-One relationship between ClassDiagram.Class>>Phone  to ClassDiagram.Class>>employee represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Employee  to ClassDiagram.Class>>Address represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Employee  to ClassDiagram.Class>>Collection<Phone>;
Many-To-One relationship from ClassDiagram.Class>>Employee  to ClassDiagram.Class>>Department represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Employee  to ClassDiagram.Class>>employee represented by ClassDiagram.Atrribute>>manager;
One-To-Many relationship from ClassDiagram.Class>>Employee  to ClassDiagram.Class>>Collection<Employee>;
Inheritance based on SINGLE-TABLE strategy (PUSH-UP): ROOT>>Project  ;
