ClassDiagram.Class>> Listing =>=>=> RelationalSchema.Table>> listing;
ClassDiagram.Class>> Renter =>=>=> RelationalSchema.Table>> renter;
ClassDiagram.Class>> RenterCommentListing =>=>=> RelationalSchema.Table>> rentercommentlisting;
ClassDiagram.Class>> RenterCommentHost =>=>=> RelationalSchema.Table>> rentercommenthost;
ClassDiagram.Class>> Availability =>=>=> RelationalSchema.Table>> availability;
ClassDiagram.Class>> Booking =>=>=> RelationalSchema.Table>> booking;
ClassDiagram.Class>> HostCommentRenter =>=>=> RelationalSchema.Table>> hostcommentrenter;
ClassDiagram.Class>> Host =>=>=> RelationalSchema.Table>> host;
ClassDiagram.Class>> Amenity =>=>=> RelationalSchema.Table>> amenity;
ClassDiagram.Attribut>> Listing.id:int =>=>=> RelationalSchema.Column>> listing.id PRIMARY KEY;
ClassDiagram.Attribut>> Listing.longitude:double =>=>=> RelationalSchema.Column>> listing.longitude;
ClassDiagram.Attribut>> Listing.latitude:double =>=>=> RelationalSchema.Column>> listing.latitude;
ClassDiagram.Attribut>> Listing.type:String =>=>=> RelationalSchema.Column>> listing.type;
ClassDiagram.Attribut>> Listing.street_num:int =>=>=> RelationalSchema.Column>> listing.street_num;
ClassDiagram.Attribut>> Listing.street_name:String =>=>=> RelationalSchema.Column>> listing.street_name;
ClassDiagram.Attribut>> Listing.unit:String =>=>=> RelationalSchema.Column>> listing.unit;
ClassDiagram.Attribut>> Listing.city:String =>=>=> RelationalSchema.Column>> listing.city;
ClassDiagram.Attribut>> Listing.postal_code_area:String =>=>=> RelationalSchema.Column>> listing.postal_code_area;
ClassDiagram.Attribut>> Listing.postal_code_num:String =>=>=> RelationalSchema.Column>> listing.postal_code_num;
ClassDiagram.Attribut>> Listing.country:String =>=>=> RelationalSchema.Column>> listing.country;
ClassDiagram.Attribut>> Listing.listed_on:Date =>=>=> RelationalSchema.Column>> listing.listed_on;
ClassDiagram.Attribut>> Listing.active:boolean =>=>=> RelationalSchema.Column>> listing.active;
ClassDiagram.Attribut>> Listing.name:String =>=>=> RelationalSchema.Column>> listing.name;
ClassDiagram.Attribut>> Renter.card_num:Long =>=>=> RelationalSchema.Column>> renter.card_num;
ClassDiagram.Attribut>> Renter.exp_:Date =>=>=> RelationalSchema.Column>> renter.exp_;
ClassDiagram.Attribut>> Availability.GeneratedName:Date =>=>=> RelationalSchema.Column>> availability.GeneratedName PRIMARY KEY;
ClassDiagram.Attribut>> Availability.price:double =>=>=> RelationalSchema.Column>> availability.price;
ClassDiagram.Attribut>> Availability.GeneratedName:Listing =>=>=> RelationalSchema.Column>> availability.GeneratedName PRIMARY KEY;
ClassDiagram.Attribut>> Booking.id:int =>=>=> RelationalSchema.Column>> booking.id PRIMARY KEY;
ClassDiagram.Attribut>> Booking.GeneratedName:Status =>=>=> RelationalSchema.Column>> booking.GeneratedName;
ClassDiagram.Attribut>> Booking.start_:Date =>=>=> RelationalSchema.Column>> booking.start_;
ClassDiagram.Attribut>> Booking.end_:Date =>=>=> RelationalSchema.Column>> booking.end_;
ClassDiagram.Attribut>> Booking.cost:double =>=>=> RelationalSchema.Column>> booking.cost;
ClassDiagram.Attribut>> Booking.cancelled_by:String =>=>=> RelationalSchema.Column>> booking.cancelled_by;
ClassDiagram.Attribut>> Amenity.GeneratedName:Name =>=>=> RelationalSchema.Column>> amenity.GeneratedName PRIMARY KEY;
Many-To-One relationship from ClassDiagram.Class>>Listing  to ClassDiagram.Class>>host represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Listing  to ClassDiagram.Class>>List<Booking>;
One-To-Many relationship from ClassDiagram.Class>>Listing  to ClassDiagram.Class>>List<Availability>;
list<amenity>: listing_list<amenity>(listingID:listing [PK] #FK to listing,list<amenity>ID:list<amenity> [PK] #FK to list<amenity>);
One-To-Many relationship from ClassDiagram.Class>>Renter  to ClassDiagram.Class>>List<Booking>;
One-To-One relationship between ClassDiagram.Class>>RenterCommentListing  to ClassDiagram.Class>>booking represented by ClassDiagram.Atrribute>>//;
One-To-One relationship between ClassDiagram.Class>>RenterCommentHost  to ClassDiagram.Class>>booking represented by ClassDiagram.Atrribute>>////;
Many-To-One relationship from ClassDiagram.Class>>Availability  to ClassDiagram.Class>>listing represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Booking  to ClassDiagram.Class>>renter represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Booking  to ClassDiagram.Class>>listing represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Booking  to ClassDiagram.Class>>host represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Booking  to ClassDiagram.Class>>renter represented by ClassDiagram.Atrribute>>rch;
One-To-One relationship between ClassDiagram.Class>>Booking  to ClassDiagram.Class>>renter represented by ClassDiagram.Atrribute>>rcl;
One-To-One relationship between ClassDiagram.Class>>Booking  to ClassDiagram.Class>>renter represented by ClassDiagram.Atrribute>>hcr;
One-To-One relationship between ClassDiagram.Class>>HostCommentRenter  to ClassDiagram.Class>>booking represented by ClassDiagram.Atrribute>>//;
One-To-Many relationship from ClassDiagram.Class>>Host  to ClassDiagram.Class>>List<Listing>;
One-To-Many relationship from ClassDiagram.Class>>Host  to ClassDiagram.Class>>List<Booking>;
