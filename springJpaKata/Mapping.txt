ClassDiagram.Class>> Bid =>=>=> RelationalSchema.Table>> bid;
ClassDiagram.Class>> Item =>=>=> RelationalSchema.Table>> item;
ClassDiagram.Class>> Cat =>=>=> RelationalSchema.Table>> cat;
ClassDiagram.Class>> Item =>=>=> RelationalSchema.Table>> item;
ClassDiagram.Class>> Offer =>=>=> RelationalSchema.Table>> offer;
ClassDiagram.Class>> Address =>=>=> RelationalSchema.Table>> address;
ClassDiagram.Class>> ProductCustomer =>=>=> RelationalSchema.Table>> productcustomer;
ClassDiagram.Class>> ProductResource =>=>=> RelationalSchema.Table>> productresource;
ClassDiagram.Class>> Part =>=>=> RelationalSchema.Table>> part;
ClassDiagram.Class>> Product =>=>=> RelationalSchema.Table>> product;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> Cart =>=>=> RelationalSchema.Table>> cart;
ClassDiagram.Class>> Skill =>=>=> RelationalSchema.Table>> skill;
ClassDiagram.Class>> JobCandidate =>=>=> RelationalSchema.Table>> jobcandidate;
ClassDiagram.Class>> Address =>=>=> RelationalSchema.Table>> address;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> SimpleProduct =>=>=> RelationalSchema.Table>> simpleproduct;
ClassDiagram.Class>> Address =>=>=> RelationalSchema.Table>> address;
ClassDiagram.Class>> Item =>=>=> RelationalSchema.Table>> item;
ClassDiagram.Class>> EmbeddedUser =>=>=> RelationalSchema.Table>> embeddeduser;
ClassDiagram.Class>> UserColl =>=>=> RelationalSchema.Table>> usercoll;
ClassDiagram.Class>> UserMap =>=>=> RelationalSchema.Table>> usermap;
ClassDiagram.Class>> Repository =>=>=> RelationalSchema.Table>> repository;
ClassDiagram.Class>> Commit =>=>=> RelationalSchema.Table>> commit;
ClassDiagram.Class>> Item =>=>=> RelationalSchema.Table>> item;
ClassDiagram.Class>> Offer =>=>=> RelationalSchema.Table>> offer;
ClassDiagram.Class>> Book =>=>=> RelationalSchema.Table>> book;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> Address =>=>=> RelationalSchema.Table>> address;
ClassDiagram.Class>> EmailMessage =>=>=> RelationalSchema.Table>> emailmessage;
ClassDiagram.Class>> Address =>=>=> RelationalSchema.Table>> address;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> EmailMessage =>=>=> RelationalSchema.Table>> emailmessage;
ClassDiagram.Class>> Email =>=>=> RelationalSchema.Table>> email;
ClassDiagram.Class>> EmailMessage =>=>=> RelationalSchema.Table>> emailmessage;
ClassDiagram.Class>> Email =>=>=> RelationalSchema.Table>> email;
ClassDiagram.Class>> Company =>=>=> RelationalSchema.Table>> company;
ClassDiagram.Class>> Category =>=>=> RelationalSchema.Table>> category;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> UserConstraintTwo =>=>=> RelationalSchema.Table>> userconstrainttwo;
ClassDiagram.Class>> UserTableConstraint =>=>=> RelationalSchema.Table>> usertableconstraint;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> BidCheck =>=>=> RelationalSchema.Table>> bidcheck;
ClassDiagram.Class>> Trip =>=>=> RelationalSchema.Table>> trip;
ClassDiagram.Class>> Travel =>=>=> RelationalSchema.Table>> travel;
ClassDiagram.Class>> Item =>=>=> RelationalSchema.Table>> item;
ClassDiagram.Class>> Address =>=>=> RelationalSchema.Table>> address;
ClassDiagram.Class>> Email_BI =>=>=> RelationalSchema.Table>> email_bi;
ClassDiagram.Class>> EmailMessage_BI =>=>=> RelationalSchema.Table>> emailmessage_bi;
ClassDiagram.Class>> Address =>=>=> RelationalSchema.Table>> address;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> Phone =>=>=> RelationalSchema.Table>> phone;
ClassDiagram.Class>> Account =>=>=> RelationalSchema.Table>> account;
ClassDiagram.Class>> Customer =>=>=> RelationalSchema.Table>> customer;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> Customer =>=>=> RelationalSchema.Table>> customer;
ClassDiagram.Class>> Location =>=>=> RelationalSchema.Table>> location;
ClassDiagram.Class>> Job =>=>=> RelationalSchema.Table>> job;
ClassDiagram.Class>> CustomSkill =>=>=> RelationalSchema.Table>> customskill;
ClassDiagram.Class>> Book =>=>=> RelationalSchema.Table>> book;
ClassDiagram.Class>> Task =>=>=> RelationalSchema.Table>> task;
ClassDiagram.Class>> Department =>=>=> RelationalSchema.Table>> department;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> Phone =>=>=> RelationalSchema.Table>> phone;
ClassDiagram.Class>> Company =>=>=> RelationalSchema.Table>> company;
ClassDiagram.Class>> Country =>=>=> RelationalSchema.Table>> country;
ClassDiagram.Class>> State =>=>=> RelationalSchema.Table>> state;
ClassDiagram.Class>> BookStore =>=>=> RelationalSchema.Table>> bookstore;
ClassDiagram.Class>> Book =>=>=> RelationalSchema.Table>> book;
ClassDiagram.Class>> CustomPeference =>=>=> RelationalSchema.Table>> custompeference;
ClassDiagram.Class>> Part =>=>=> RelationalSchema.Table>> part;
ClassDiagram.Class>> Weapon =>=>=> RelationalSchema.Table>> weapon;
ClassDiagram.Class>> Book =>=>=> RelationalSchema.Table>> book;
ClassDiagram.Class>> Project =>=>=> RelationalSchema.Table>> project;
ClassDiagram.Class>> Phone =>=>=> RelationalSchema.Table>> phone;
ClassDiagram.Class>> Address =>=>=> RelationalSchema.Table>> address;
ClassDiagram.Class>> Department =>=>=> RelationalSchema.Table>> department;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> CreditAccountJoin =>=>=> RelationalSchema.Table>> creditaccountjoin;
ClassDiagram.Class>> DebitAccountJoin =>=>=> RelationalSchema.Table>> debitaccountjoin;
ClassDiagram.Class>> AccountJoin =>=>=> RelationalSchema.Table>> accountjoin;
ClassDiagram.Class>> DebitAccount =>=>=> RelationalSchema.Table>> debitaccount;
ClassDiagram.Class>> CreditAccount =>=>=> RelationalSchema.Table>> creditaccount;
ClassDiagram.Class>> DetailProduct =>=>=> RelationalSchema.Table>> detailproduct;
ClassDiagram.Class>> Product =>=>=> RelationalSchema.Table>> product;
ClassDiagram.Class>> StockProduct =>=>=> RelationalSchema.Table>> stockproduct;
ClassDiagram.Class>> HPerson =>=>=> RelationalSchema.Table>> hperson;
ClassDiagram.Class>> JavaTask =>=>=> RelationalSchema.Table>> javatask;
ClassDiagram.Class>> GroovyTask =>=>=> RelationalSchema.Table>> groovytask;
ClassDiagram.Class>> JpaTask =>=>=> RelationalSchema.Table>> jpatask;
ClassDiagram.Class>> Task =>=>=> RelationalSchema.Table>> task;
ClassDiagram.Class>> Crew =>=>=> RelationalSchema.Table>> crew;
ClassDiagram.Class>> CrewBi =>=>=> RelationalSchema.Table>> crewbi;
ClassDiagram.Class>> Tank =>=>=> RelationalSchema.Table>> tank;
ClassDiagram.Class>> TankBi =>=>=> RelationalSchema.Table>> tankbi;
ClassDiagram.Class>> Address =>=>=> RelationalSchema.Table>> address;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> UsersAddress =>=>=> RelationalSchema.Table>> usersaddress;
ClassDiagram.Class>> Dog =>=>=> RelationalSchema.Table>> dog;
ClassDiagram.Class>> PersonDog =>=>=> RelationalSchema.Table>> persondog;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> TableGeneratorEntity =>=>=> RelationalSchema.Table>> tablegeneratorentity;
ClassDiagram.Class>> GeneratorOne =>=>=> RelationalSchema.Table>> generatorone;
ClassDiagram.Class>> AssignedEntity =>=>=> RelationalSchema.Table>> assignedentity;
ClassDiagram.Class>> HiloEntity =>=>=> RelationalSchema.Table>> hiloentity;
ClassDiagram.Class>> Note =>=>=> RelationalSchema.Table>> note;
ClassDiagram.Class>> Item =>=>=> RelationalSchema.Table>> item;
ClassDiagram.Class>> Offer =>=>=> RelationalSchema.Table>> offer;
ClassDiagram.Class>> StringProperty =>=>=> RelationalSchema.Table>> stringproperty;
ClassDiagram.Class>> CharProperty =>=>=> RelationalSchema.Table>> charproperty;
ClassDiagram.Class>> PropertyMap =>=>=> RelationalSchema.Table>> propertymap;
ClassDiagram.Class>> LongProperty =>=>=> RelationalSchema.Table>> longproperty;
ClassDiagram.Class>> Pupil =>=>=> RelationalSchema.Table>> pupil;
ClassDiagram.Class>> Address =>=>=> RelationalSchema.Table>> address;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> Company =>=>=> RelationalSchema.Table>> company;
ClassDiagram.Class>> Department =>=>=> RelationalSchema.Table>> department;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> Todo =>=>=> RelationalSchema.Table>> todo;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> PersonView =>=>=> RelationalSchema.Table>> personview;
ClassDiagram.Attribut>> Bid.name:String =>=>=> RelationalSchema.Column>> bid.name;
ClassDiagram.Attribut>> Bid.account:BigDecimal =>=>=> RelationalSchema.Column>> bid.account;
ClassDiagram.Attribut>> Cat.name:String =>=>=> RelationalSchema.Column>> cat.name;
ClassDiagram.Attribut>> Item.serialversionuid:long =>=>=> RelationalSchema.Column>> item.serialversionuid;
ClassDiagram.Attribut>> Item.name:String =>=>=> RelationalSchema.Column>> item.name;
ClassDiagram.Attribut>> Item.price:BigDecimal =>=>=> RelationalSchema.Column>> item.price;
ClassDiagram.Attribut>> Offer.serialversionuid:long =>=>=> RelationalSchema.Column>> offer.serialversionuid;
ClassDiagram.Attribut>> Offer.value:BigDecimal =>=>=> RelationalSchema.Column>> offer.value;
ClassDiagram.Attribut>> Address.serialversionuid:long =>=>=> RelationalSchema.Column>> address.serialversionuid;
ClassDiagram.Attribut>> Address.street:String =>=>=> RelationalSchema.Column>> address.street;
ClassDiagram.Attribut>> ProductCustomer.serialversionuid:long =>=>=> RelationalSchema.Column>> productcustomer.serialversionuid;
ClassDiagram.Attribut>> ProductCustomer.name:String =>=>=> RelationalSchema.Column>> productcustomer.name;
ClassDiagram.Attribut>> ProductResource.serialversionuid:long =>=>=> RelationalSchema.Column>> productresource.serialversionuid;
ClassDiagram.Attribut>> ProductResource.name:String =>=>=> RelationalSchema.Column>> productresource.name;
ClassDiagram.Attribut>> Part.serialversionuid:long =>=>=> RelationalSchema.Column>> part.serialversionuid;
ClassDiagram.Attribut>> Part.name:String =>=>=> RelationalSchema.Column>> part.name;
ClassDiagram.Attribut>> Part.active:Boolean =>=>=> RelationalSchema.Column>> part.active;
ClassDiagram.Attribut>> Product.serialversionuid:long =>=>=> RelationalSchema.Column>> product.serialversionuid;
ClassDiagram.Attribut>> Product.serialnumber:String =>=>=> RelationalSchema.Column>> product.serialnumber;
ClassDiagram.Attribut>> User.serialversionuid:long =>=>=> RelationalSchema.Column>> user.serialversionuid;
ClassDiagram.Attribut>> User.login:String =>=>=> RelationalSchema.Column>> user.login;
ClassDiagram.Attribut>> Cart.name:String =>=>=> RelationalSchema.Column>> cart.name;
ClassDiagram.Attribut>> Skill.serialversionuid:long =>=>=> RelationalSchema.Column>> skill.serialversionuid;
ClassDiagram.Attribut>> Skill.name:String =>=>=> RelationalSchema.Column>> skill.name;
ClassDiagram.Attribut>> Skill.candidateid:Integer =>=>=> RelationalSchema.Column>> skill.candidateid;
ClassDiagram.Attribut>> JobCandidate.serialversionuid:long =>=>=> RelationalSchema.Column>> jobcandidate.serialversionuid;
ClassDiagram.Attribut>> JobCandidate.fullname:String =>=>=> RelationalSchema.Column>> jobcandidate.fullname;
ClassDiagram.Attribut>> JobCandidate.age:Integer =>=>=> RelationalSchema.Column>> jobcandidate.age;
ClassDiagram.Attribut>> JobCandidate.salary:BigDecimal =>=>=> RelationalSchema.Column>> jobcandidate.salary;
ClassDiagram.Attribut>> JobCandidate.a,b,c,w,r,t,y,u:String =>=>=> RelationalSchema.Column>> jobcandidate.a,b,c,w,r,t,y,u;
ClassDiagram.Attribut>> Address.serialversionuid:long =>=>=> RelationalSchema.Column>> address.serialversionuid;
ClassDiagram.Attribut>> Address.street:String =>=>=> RelationalSchema.Column>> address.street;
ClassDiagram.Attribut>> User.serialversionuid:long =>=>=> RelationalSchema.Column>> user.serialversionuid;
ClassDiagram.Attribut>> User.login:String =>=>=> RelationalSchema.Column>> user.login;
ClassDiagram.Attribut>> SimpleProduct.name:String =>=>=> RelationalSchema.Column>> simpleproduct.name;
ClassDiagram.Attribut>> SimpleProduct.price:Money =>=>=> RelationalSchema.Column>> simpleproduct.price;
ClassDiagram.Attribut>> Address.serialversionuid:long =>=>=> RelationalSchema.Column>> address.serialversionuid;
ClassDiagram.Attribut>> Address.street:String =>=>=> RelationalSchema.Column>> address.street;
ClassDiagram.Attribut>> Address.city:String =>=>=> RelationalSchema.Column>> address.city;
ClassDiagram.Attribut>> Address.state:String =>=>=> RelationalSchema.Column>> address.state;
ClassDiagram.Attribut>> Address.zipcode:String =>=>=> RelationalSchema.Column>> address.zipcode;
ClassDiagram.Attribut>> Address.country:String =>=>=> RelationalSchema.Column>> address.country;
ClassDiagram.Attribut>> Item.images:Collection<String> =>=>=> RelationalSchema.Column>> item.images;
ClassDiagram.Attribut>> EmbeddedUser.serialversionuid:long =>=>=> RelationalSchema.Column>> embeddeduser.serialversionuid;
ClassDiagram.Attribut>> EmbeddedUser.images:Set<Address> =>=>=> RelationalSchema.Column>> embeddeduser.images;
ClassDiagram.Attribut>> UserColl.serialversionuid:long =>=>=> RelationalSchema.Column>> usercoll.serialversionuid;
ClassDiagram.Attribut>> UserColl.//@ordercolumnphones:Set<String> =>=>=> RelationalSchema.Column>> usercoll.//@ordercolumnphones;
ClassDiagram.Attribut>> UserMap.phones:Map<String,String> =>=>=> RelationalSchema.Column>> usermap.phones;
ClassDiagram.Attribut>> UserMap.name:String =>=>=> RelationalSchema.Column>> usermap.name;
ClassDiagram.Attribut>> Repository.name:String =>=>=> RelationalSchema.Column>> repository.name;
ClassDiagram.Attribut>> Commit.review:boolean =>=>=> RelationalSchema.Column>> commit.review;
ClassDiagram.Attribut>> Commit.changes:List<Change> =>=>=> RelationalSchema.Column>> commit.changes;
ClassDiagram.Attribut>> Item.serialversionuid:long =>=>=> RelationalSchema.Column>> item.serialversionuid;
ClassDiagram.Attribut>> Item.name:String =>=>=> RelationalSchema.Column>> item.name;
ClassDiagram.Attribut>> Item.price:BigDecimal =>=>=> RelationalSchema.Column>> item.price;
ClassDiagram.Attribut>> Offer.serialversionuid:long =>=>=> RelationalSchema.Column>> offer.serialversionuid;
ClassDiagram.Attribut>> Offer.value:BigDecimal =>=>=> RelationalSchema.Column>> offer.value;
ClassDiagram.Attribut>> Book.id:Long =>=>=> RelationalSchema.Column>> book.id PRIMARY KEY;
ClassDiagram.Attribut>> Book.name:String =>=>=> RelationalSchema.Column>> book.name;
ClassDiagram.Attribut>> User.serialversionuid:long =>=>=> RelationalSchema.Column>> user.serialversionuid;
ClassDiagram.Attribut>> User.login:String =>=>=> RelationalSchema.Column>> user.login;
ClassDiagram.Attribut>> Address.serialversionuid:long =>=>=> RelationalSchema.Column>> address.serialversionuid;
ClassDiagram.Attribut>> Address.street:String =>=>=> RelationalSchema.Column>> address.street;
ClassDiagram.Attribut>> EmailMessage.serialversionuid:long =>=>=> RelationalSchema.Column>> emailmessage.serialversionuid;
ClassDiagram.Attribut>> EmailMessage.content:String =>=>=> RelationalSchema.Column>> emailmessage.content;
ClassDiagram.Attribut>> Address.serialversionuid:long =>=>=> RelationalSchema.Column>> address.serialversionuid;
ClassDiagram.Attribut>> Address.street:String =>=>=> RelationalSchema.Column>> address.street;
ClassDiagram.Attribut>> User.login:String =>=>=> RelationalSchema.Column>> user.login;
ClassDiagram.Attribut>> EmailMessage.serialversionuid:long =>=>=> RelationalSchema.Column>> emailmessage.serialversionuid;
ClassDiagram.Attribut>> EmailMessage.content:String =>=>=> RelationalSchema.Column>> emailmessage.content;
ClassDiagram.Attribut>> Email.id:Long =>=>=> RelationalSchema.Column>> email.id PRIMARY KEY;
ClassDiagram.Attribut>> Email.from:String =>=>=> RelationalSchema.Column>> email.from;
ClassDiagram.Attribut>> Email.to:String =>=>=> RelationalSchema.Column>> email.to;
ClassDiagram.Attribut>> Email.topic:String =>=>=> RelationalSchema.Column>> email.topic;
ClassDiagram.Attribut>> Email.time:LocalDateTime =>=>=> RelationalSchema.Column>> email.time;
ClassDiagram.Attribut>> EmailMessage.serialversionuid:long =>=>=> RelationalSchema.Column>> emailmessage.serialversionuid;
ClassDiagram.Attribut>> EmailMessage.id:Long =>=>=> RelationalSchema.Column>> emailmessage.id PRIMARY KEY;
ClassDiagram.Attribut>> EmailMessage.content:String =>=>=> RelationalSchema.Column>> emailmessage.content;
ClassDiagram.Attribut>> Email.serialversionuid:long =>=>=> RelationalSchema.Column>> email.serialversionuid;
ClassDiagram.Attribut>> Email.from:String =>=>=> RelationalSchema.Column>> email.from;
ClassDiagram.Attribut>> Email.to:String =>=>=> RelationalSchema.Column>> email.to;
ClassDiagram.Attribut>> Email.topic:String =>=>=> RelationalSchema.Column>> email.topic;
ClassDiagram.Attribut>> Email.time:LocalDateTime =>=>=> RelationalSchema.Column>> email.time;
ClassDiagram.Attribut>> Company.serialversionuid:long =>=>=> RelationalSchema.Column>> company.serialversionuid;
ClassDiagram.Attribut>> Company.nip:String =>=>=> RelationalSchema.Column>> company.nip;
ClassDiagram.Attribut>> Category.serialversionuid:long =>=>=> RelationalSchema.Column>> category.serialversionuid;
ClassDiagram.Attribut>> Category.name:String =>=>=> RelationalSchema.Column>> category.name;
ClassDiagram.Attribut>> Employee.serialversionuid:long =>=>=> RelationalSchema.Column>> employee.serialversionuid;
ClassDiagram.Attribut>> Employee.firstname:String =>=>=> RelationalSchema.Column>> employee.firstname;
ClassDiagram.Attribut>> Employee.lastname:String =>=>=> RelationalSchema.Column>> employee.lastname;
ClassDiagram.Attribut>> Employee.managerid:Long =>=>=> RelationalSchema.Column>> employee.managerid;
ClassDiagram.Attribut>> Person.serialversionuid:long =>=>=> RelationalSchema.Column>> person.serialversionuid;
ClassDiagram.Attribut>> Person.id:Long =>=>=> RelationalSchema.Column>> person.id PRIMARY KEY;
ClassDiagram.Attribut>> Person.firstname:String =>=>=> RelationalSchema.Column>> person.firstname;
ClassDiagram.Attribut>> Person.email:String =>=>=> RelationalSchema.Column>> person.email;
ClassDiagram.Attribut>> Person.modify:LocalDate =>=>=> RelationalSchema.Column>> person.modify;
ClassDiagram.Attribut>> Person.effectivemodify:LocalDate =>=>=> RelationalSchema.Column>> person.effectivemodify;
ClassDiagram.Attribut>> Person.disable:Boolean =>=>=> RelationalSchema.Column>> person.disable;
ClassDiagram.Attribut>> Person.//todo//@formula("concat(disable,':',active)")///?filterproblemoverview:String =>=>=> RelationalSchema.Column>> person.//todo//@formula("concat(disable,':',active)")///?filterproblemoverview;
ClassDiagram.Attribut>> Person.alluser:int =>=>=> RelationalSchema.Column>> person.alluser;
ClassDiagram.Attribut>> Person.km:Double =>=>=> RelationalSchema.Column>> person.km;
ClassDiagram.Attribut>> Person.active:Boolean =>=>=> RelationalSchema.Column>> person.active;
ClassDiagram.Attribut>> Person.//@pastbirthday:ZonedDateTime =>=>=> RelationalSchema.Column>> person.//@pastbirthday;
ClassDiagram.Attribut>> Person.//todo//monetaryamountbasepriceversion:long =>=>=> RelationalSchema.Column>> person.//todo//monetaryamountbasepriceversion;
ClassDiagram.Attribut>> UserConstraintTwo.serialversionuid:long =>=>=> RelationalSchema.Column>> userconstrainttwo.serialversionuid;
ClassDiagram.Attribut>> UserConstraintTwo.username:String =>=>=> RelationalSchema.Column>> userconstrainttwo.username;
ClassDiagram.Attribut>> UserTableConstraint.serialversionuid:long =>=>=> RelationalSchema.Column>> usertableconstraint.serialversionuid;
ClassDiagram.Attribut>> UserTableConstraint.email:String =>=>=> RelationalSchema.Column>> usertableconstraint.email;
ClassDiagram.Attribut>> UserTableConstraint.username:String =>=>=> RelationalSchema.Column>> usertableconstraint.username;
ClassDiagram.Attribut>> User.serialversionuid:long =>=>=> RelationalSchema.Column>> user.serialversionuid;
ClassDiagram.Attribut>> User.email:String =>=>=> RelationalSchema.Column>> user.email;
ClassDiagram.Attribut>> BidCheck.serialversionuid:long =>=>=> RelationalSchema.Column>> bidcheck.serialversionuid;
ClassDiagram.Attribut>> BidCheck.bidstart:Date =>=>=> RelationalSchema.Column>> bidcheck.bidstart;
ClassDiagram.Attribut>> BidCheck.bidend:Date =>=>=> RelationalSchema.Column>> bidcheck.bidend;
ClassDiagram.Attribut>> Trip.id:int =>=>=> RelationalSchema.Column>> trip.id PRIMARY KEY;
ClassDiagram.Attribut>> Trip.name:String =>=>=> RelationalSchema.Column>> trip.name;
ClassDiagram.Attribut>> Travel.id:int =>=>=> RelationalSchema.Column>> travel.id PRIMARY KEY;
ClassDiagram.Attribut>> Travel.name:String =>=>=> RelationalSchema.Column>> travel.name;
ClassDiagram.Attribut>> Item.id:Long =>=>=> RelationalSchema.Column>> item.id PRIMARY KEY;
ClassDiagram.Attribut>> Item.name:String =>=>=> RelationalSchema.Column>> item.name;
ClassDiagram.Attribut>> Item.price:BigDecimal =>=>=> RelationalSchema.Column>> item.price;
ClassDiagram.Attribut>> Address.serialversionuid:long =>=>=> RelationalSchema.Column>> address.serialversionuid;
ClassDiagram.Attribut>> Address.city:String =>=>=> RelationalSchema.Column>> address.city;
ClassDiagram.Attribut>> Address.disable:Boolean =>=>=> RelationalSchema.Column>> address.disable;
ClassDiagram.Attribut>> Email_BI.serialversionuid:long =>=>=> RelationalSchema.Column>> email_bi.serialversionuid;
ClassDiagram.Attribut>> Email_BI.from:String =>=>=> RelationalSchema.Column>> email_bi.from;
ClassDiagram.Attribut>> Email_BI.to:String =>=>=> RelationalSchema.Column>> email_bi.to;
ClassDiagram.Attribut>> Email_BI.topic:String =>=>=> RelationalSchema.Column>> email_bi.topic;
ClassDiagram.Attribut>> Email_BI.time:LocalDateTime =>=>=> RelationalSchema.Column>> email_bi.time;
ClassDiagram.Attribut>> EmailMessage_BI.serialversionuid:long =>=>=> RelationalSchema.Column>> emailmessage_bi.serialversionuid;
ClassDiagram.Attribut>> EmailMessage_BI.content:String =>=>=> RelationalSchema.Column>> emailmessage_bi.content;
ClassDiagram.Attribut>> Address.serialversionuid:long =>=>=> RelationalSchema.Column>> address.serialversionuid;
ClassDiagram.Attribut>> Address.city:String =>=>=> RelationalSchema.Column>> address.city;
ClassDiagram.Attribut>> Person.serialversionuid:long =>=>=> RelationalSchema.Column>> person.serialversionuid;
ClassDiagram.Attribut>> Person.firstname:String =>=>=> RelationalSchema.Column>> person.firstname;
ClassDiagram.Attribut>> Person.lastname:String =>=>=> RelationalSchema.Column>> person.lastname;
ClassDiagram.Attribut>> Phone.phonenumber:String =>=>=> RelationalSchema.Column>> phone.phonenumber;
ClassDiagram.Attribut>> Account.topicmap:Map<String,String> =>=>=> RelationalSchema.Column>> account.topicmap;
ClassDiagram.Attribut>> Account.emailaddresses:List<String> =>=>=> RelationalSchema.Column>> account.emailaddresses;
ClassDiagram.Attribut>> Customer.GeneratedName:UserId =>=>=> RelationalSchema.Column>> customer.GeneratedName PRIMARY KEY;
ClassDiagram.Attribut>> User.id:UserId =>=>=> RelationalSchema.Column>> user.id;
ClassDiagram.Attribut>> User.age:Integer =>=>=> RelationalSchema.Column>> user.age;
ClassDiagram.Attribut>> Customer.name:String =>=>=> RelationalSchema.Column>> customer.name;
ClassDiagram.Attribut>> Location.name:String =>=>=> RelationalSchema.Column>> location.name;
ClassDiagram.Attribut>> Job.name:String =>=>=> RelationalSchema.Column>> job.name;
ClassDiagram.Attribut>> CustomSkill.name:String =>=>=> RelationalSchema.Column>> customskill.name;
ClassDiagram.Attribut>> Book.serialversionuid:long =>=>=> RelationalSchema.Column>> book.serialversionuid;
ClassDiagram.Attribut>> Book.title:String =>=>=> RelationalSchema.Column>> book.title;
ClassDiagram.Attribut>> Book.indexmap:Map<String,String> =>=>=> RelationalSchema.Column>> book.indexmap;
ClassDiagram.Attribut>> Task.serialversionuid:long =>=>=> RelationalSchema.Column>> task.serialversionuid;
ClassDiagram.Attribut>> Task.name:String =>=>=> RelationalSchema.Column>> task.name;
ClassDiagram.Attribut>> Department.serialversionuid:long =>=>=> RelationalSchema.Column>> department.serialversionuid;
ClassDiagram.Attribut>> Department.name:String =>=>=> RelationalSchema.Column>> department.name;
ClassDiagram.Attribut>> Department.ids:Long =>=>=> RelationalSchema.Column>> department.ids;
ClassDiagram.Attribut>> Department.subdepts:Map<String,String> =>=>=> RelationalSchema.Column>> department.subdepts;
ClassDiagram.Attribut>> Department.tasks:Map<Responsibility,Task> =>=>=> RelationalSchema.Column>> department.tasks;
ClassDiagram.Attribut>> Person.serialversionuid:long =>=>=> RelationalSchema.Column>> person.serialversionuid;
ClassDiagram.Attribut>> Person.name:String =>=>=> RelationalSchema.Column>> person.name;
ClassDiagram.Attribut>> Person.age:int =>=>=> RelationalSchema.Column>> person.age;
ClassDiagram.Attribut>> Person.phonenumbers:Map<String,String> =>=>=> RelationalSchema.Column>> person.phonenumbers;
ClassDiagram.Attribut>> Phone.serialversionuid:long =>=>=> RelationalSchema.Column>> phone.serialversionuid;
ClassDiagram.Attribut>> Phone.phonenumber:String =>=>=> RelationalSchema.Column>> phone.phonenumber;
ClassDiagram.Attribut>> Company.serialversionuid:long =>=>=> RelationalSchema.Column>> company.serialversionuid;
ClassDiagram.Attribut>> Company.name:String =>=>=> RelationalSchema.Column>> company.name;
ClassDiagram.Attribut>> Country.serialversionuid:long =>=>=> RelationalSchema.Column>> country.serialversionuid;
ClassDiagram.Attribut>> Country.name:String =>=>=> RelationalSchema.Column>> country.name;
ClassDiagram.Attribut>> State.serialversionuid:long =>=>=> RelationalSchema.Column>> state.serialversionuid;
ClassDiagram.Attribut>> State.name:String =>=>=> RelationalSchema.Column>> state.name;
ClassDiagram.Attribut>> BookStore.address:String =>=>=> RelationalSchema.Column>> bookstore.address;
ClassDiagram.Attribut>> BookStore.invertory:Map<Book,Long> =>=>=> RelationalSchema.Column>> bookstore.invertory;
ClassDiagram.Attribut>> Book.name:String =>=>=> RelationalSchema.Column>> book.name;
ClassDiagram.Attribut>> Book.isbn:String =>=>=> RelationalSchema.Column>> book.isbn;
ClassDiagram.Attribut>> CustomPeference.name:String =>=>=> RelationalSchema.Column>> custompeference.name;
ClassDiagram.Attribut>> Part.serialversionuid:long =>=>=> RelationalSchema.Column>> part.serialversionuid;
ClassDiagram.Attribut>> Part.name:String =>=>=> RelationalSchema.Column>> part.name;
ClassDiagram.Attribut>> Part.active:Boolean =>=>=> RelationalSchema.Column>> part.active;
ClassDiagram.Attribut>> Weapon.serialversionuid:long =>=>=> RelationalSchema.Column>> weapon.serialversionuid;
ClassDiagram.Attribut>> Weapon.quantity:Long =>=>=> RelationalSchema.Column>> weapon.quantity;
ClassDiagram.Attribut>> Weapon.name:String =>=>=> RelationalSchema.Column>> weapon.name;
ClassDiagram.Attribut>> Weapon.symbol:String =>=>=> RelationalSchema.Column>> weapon.symbol;
ClassDiagram.Attribut>> Book.serialversionuid:long =>=>=> RelationalSchema.Column>> book.serialversionuid;
ClassDiagram.Attribut>> Book.title:String =>=>=> RelationalSchema.Column>> book.title;
ClassDiagram.Attribut>> Book.name:String =>=>=> RelationalSchema.Column>> book.name;
ClassDiagram.Attribut>> Project.name:String =>=>=> RelationalSchema.Column>> project.name;
ClassDiagram.Attribut>> Phone.serialversionuid:long =>=>=> RelationalSchema.Column>> phone.serialversionuid;
ClassDiagram.Attribut>> Phone.number:String =>=>=> RelationalSchema.Column>> phone.number;
ClassDiagram.Attribut>> Phone.type:PhoneType =>=>=> RelationalSchema.Column>> phone.type;
ClassDiagram.Attribut>> Address.serialversionuid:long =>=>=> RelationalSchema.Column>> address.serialversionuid;
ClassDiagram.Attribut>> Address.street:String =>=>=> RelationalSchema.Column>> address.street;
ClassDiagram.Attribut>> Address.city:String =>=>=> RelationalSchema.Column>> address.city;
ClassDiagram.Attribut>> Department.name:String =>=>=> RelationalSchema.Column>> department.name;
ClassDiagram.Attribut>> Employee.serialversionuid:long =>=>=> RelationalSchema.Column>> employee.serialversionuid;
ClassDiagram.Attribut>> Employee.name:String =>=>=> RelationalSchema.Column>> employee.name;
ClassDiagram.Attribut>> Employee.salary:long =>=>=> RelationalSchema.Column>> employee.salary;
ClassDiagram.Attribut>> Employee.start:Date =>=>=> RelationalSchema.Column>> employee.start;
ClassDiagram.Attribut>> CreditAccountJoin.creditlimit:BigDecimal =>=>=> RelationalSchema.Column>> creditaccountjoin.creditlimit;
ClassDiagram.Attribut>> DebitAccountJoin.overdraftfee:BigDecimal =>=>=> RelationalSchema.Column>> debitaccountjoin.overdraftfee;
ClassDiagram.Attribut>> AccountJoin.id:Long =>=>=> RelationalSchema.Column>> accountjoin.id PRIMARY KEY;
ClassDiagram.Attribut>> AccountJoin.owner:String =>=>=> RelationalSchema.Column>> accountjoin.owner;
ClassDiagram.Attribut>> AccountJoin.balance:BigDecimal =>=>=> RelationalSchema.Column>> accountjoin.balance;
ClassDiagram.Attribut>> AccountJoin.interestrate:BigDecimal =>=>=> RelationalSchema.Column>> accountjoin.interestrate;
ClassDiagram.Attribut>> DebitAccount.serialversionuid:long =>=>=> RelationalSchema.Column>> debitaccount.serialversionuid;
ClassDiagram.Attribut>> DebitAccount.overdraftfee:BigDecimal =>=>=> RelationalSchema.Column>> debitaccount.overdraftfee;
ClassDiagram.Attribut>> CreditAccount.serialversionuid:long =>=>=> RelationalSchema.Column>> creditaccount.serialversionuid;
ClassDiagram.Attribut>> CreditAccount.creditlimit:BigDecimal =>=>=> RelationalSchema.Column>> creditaccount.creditlimit;
ClassDiagram.Attribut>> DetailProduct.price:Money =>=>=> RelationalSchema.Column>> detailproduct.price;
ClassDiagram.Attribut>> Product.serialversionuid:long =>=>=> RelationalSchema.Column>> product.serialversionuid;
ClassDiagram.Attribut>> Product.id:Long =>=>=> RelationalSchema.Column>> product.id PRIMARY KEY;
ClassDiagram.Attribut>> Product.code:String =>=>=> RelationalSchema.Column>> product.code;
ClassDiagram.Attribut>> Product.name:String =>=>=> RelationalSchema.Column>> product.name;
ClassDiagram.Attribut>> StockProduct.serialversionuid:long =>=>=> RelationalSchema.Column>> stockproduct.serialversionuid;
ClassDiagram.Attribut>> StockProduct.currency:String =>=>=> RelationalSchema.Column>> stockproduct.currency;
ClassDiagram.Attribut>> HPerson.serialversionuid:long =>=>=> RelationalSchema.Column>> hperson.serialversionuid;
ClassDiagram.Attribut>> HPerson.id:Long =>=>=> RelationalSchema.Column>> hperson.id PRIMARY KEY;
ClassDiagram.Attribut>> HPerson.firstname:String =>=>=> RelationalSchema.Column>> hperson.firstname;
ClassDiagram.Attribut>> HPerson.email:String =>=>=> RelationalSchema.Column>> hperson.email;
ClassDiagram.Attribut>> JavaTask.refactoringname:String =>=>=> RelationalSchema.Column>> javatask.refactoringname;
ClassDiagram.Attribut>> GroovyTask.writenewrule:String =>=>=> RelationalSchema.Column>> groovytask.writenewrule;
ClassDiagram.Attribut>> JpaTask.additionalaction:String =>=>=> RelationalSchema.Column>> jpatask.additionalaction;
ClassDiagram.Attribut>> Task.name:String =>=>=> RelationalSchema.Column>> task.name;
ClassDiagram.Attribut>> Task.hourscost:int =>=>=> RelationalSchema.Column>> task.hourscost;
ClassDiagram.Attribut>> Crew./***/serialversionuid:long =>=>=> RelationalSchema.Column>> crew./***/serialversionuid;
ClassDiagram.Attribut>> Crew.count:int =>=>=> RelationalSchema.Column>> crew.count;
ClassDiagram.Attribut>> CrewBi.serialversionuid:long =>=>=> RelationalSchema.Column>> crewbi.serialversionuid;
ClassDiagram.Attribut>> CrewBi.count:int =>=>=> RelationalSchema.Column>> crewbi.count;
ClassDiagram.Attribut>> Tank./***/serialversionuid:long =>=>=> RelationalSchema.Column>> tank./***/serialversionuid;
ClassDiagram.Attribut>> Tank.name:String =>=>=> RelationalSchema.Column>> tank.name;
ClassDiagram.Attribut>> Tank.serialnumber:String =>=>=> RelationalSchema.Column>> tank.serialnumber;
ClassDiagram.Attribut>> TankBi./***/serialversionuid:long =>=>=> RelationalSchema.Column>> tankbi./***/serialversionuid;
ClassDiagram.Attribut>> TankBi.name:String =>=>=> RelationalSchema.Column>> tankbi.name;
ClassDiagram.Attribut>> TankBi.serialnumber:String =>=>=> RelationalSchema.Column>> tankbi.serialnumber;
ClassDiagram.Attribut>> Address.serialversionuid:long =>=>=> RelationalSchema.Column>> address.serialversionuid;
ClassDiagram.Attribut>> Address.street:String =>=>=> RelationalSchema.Column>> address.street;
ClassDiagram.Attribut>> User.serialversionuid:long =>=>=> RelationalSchema.Column>> user.serialversionuid;
ClassDiagram.Attribut>> User.login:String =>=>=> RelationalSchema.Column>> user.login;
ClassDiagram.Attribut>> UsersAddress.GeneratedName:Id =>=>=> RelationalSchema.Column>> usersaddress.GeneratedName;
ClassDiagram.Attribut>> UsersAddress.addedby:String =>=>=> RelationalSchema.Column>> usersaddress.addedby;
ClassDiagram.Attribut>> UsersAddress.addedon:Date =>=>=> RelationalSchema.Column>> usersaddress.addedon;
ClassDiagram.Attribut>> Dog.name:String =>=>=> RelationalSchema.Column>> dog.name;
ClassDiagram.Attribut>> PersonDog.GeneratedName:Person =>=>=> RelationalSchema.Column>> persondog.GeneratedName PRIMARY KEY;
ClassDiagram.Attribut>> PersonDog.GeneratedName:Dog =>=>=> RelationalSchema.Column>> persondog.GeneratedName PRIMARY KEY;
ClassDiagram.Attribut>> PersonDog.adoption:Date =>=>=> RelationalSchema.Column>> persondog.adoption;
ClassDiagram.Attribut>> Person.serialversionuid:long =>=>=> RelationalSchema.Column>> person.serialversionuid;
ClassDiagram.Attribut>> Person.name:String =>=>=> RelationalSchema.Column>> person.name;
ClassDiagram.Attribut>> TableGeneratorEntity.tablegenname:String =>=>=> RelationalSchema.Column>> tablegeneratorentity.tablegenname;
ClassDiagram.Attribut>> GeneratorOne.go:String =>=>=> RelationalSchema.Column>> generatorone.go;
ClassDiagram.Attribut>> AssignedEntity.id:Long =>=>=> RelationalSchema.Column>> assignedentity.id PRIMARY KEY;
ClassDiagram.Attribut>> AssignedEntity.name:String =>=>=> RelationalSchema.Column>> assignedentity.name;
ClassDiagram.Attribut>> HiloEntity.hiloname:String =>=>=> RelationalSchema.Column>> hiloentity.hiloname;
ClassDiagram.Attribut>> Note.id:String =>=>=> RelationalSchema.Column>> note.id PRIMARY KEY;
ClassDiagram.Attribut>> Note.title:String =>=>=> RelationalSchema.Column>> note.title;
ClassDiagram.Attribut>> Item.serialversionuid:long =>=>=> RelationalSchema.Column>> item.serialversionuid;
ClassDiagram.Attribut>> Item.name:String =>=>=> RelationalSchema.Column>> item.name;
ClassDiagram.Attribut>> Item.owner:String =>=>=> RelationalSchema.Column>> item.owner;
ClassDiagram.Attribut>> Item.price:BigDecimal =>=>=> RelationalSchema.Column>> item.price;
ClassDiagram.Attribut>> Offer.serialversionuid:long =>=>=> RelationalSchema.Column>> offer.serialversionuid;
ClassDiagram.Attribut>> Offer.value:BigDecimal =>=>=> RelationalSchema.Column>> offer.value;
ClassDiagram.Attribut>> Offer.auctionstart:LocalDate =>=>=> RelationalSchema.Column>> offer.auctionstart;
ClassDiagram.Attribut>> Offer.auctionend:LocalDate =>=>=> RelationalSchema.Column>> offer.auctionend;
ClassDiagram.Attribut>> StringProperty.serialversionuid:long =>=>=> RelationalSchema.Column>> stringproperty.serialversionuid;
ClassDiagram.Attribut>> StringProperty.name:String =>=>=> RelationalSchema.Column>> stringproperty.name;
ClassDiagram.Attribut>> StringProperty.value:String =>=>=> RelationalSchema.Column>> stringproperty.value;
ClassDiagram.Attribut>> CharProperty.name:String =>=>=> RelationalSchema.Column>> charproperty.name;
ClassDiagram.Attribut>> CharProperty.value:Character =>=>=> RelationalSchema.Column>> charproperty.value;
ClassDiagram.Attribut>> PropertyMap.serialversionuid:long =>=>=> RelationalSchema.Column>> propertymap.serialversionuid;
ClassDiagram.Attribut>> PropertyMap.name:String =>=>=> RelationalSchema.Column>> propertymap.name;
ClassDiagram.Attribut>> PropertyMap.properties:List<Property> =>=>=> RelationalSchema.Column>> propertymap.properties;
ClassDiagram.Attribut>> LongProperty.serialversionuid:long =>=>=> RelationalSchema.Column>> longproperty.serialversionuid;
ClassDiagram.Attribut>> LongProperty.name:String =>=>=> RelationalSchema.Column>> longproperty.name;
ClassDiagram.Attribut>> LongProperty.value:Long =>=>=> RelationalSchema.Column>> longproperty.value;
ClassDiagram.Attribut>> Pupil.serialversionuid:long =>=>=> RelationalSchema.Column>> pupil.serialversionuid;
ClassDiagram.Attribut>> Pupil.age:Integer =>=>=> RelationalSchema.Column>> pupil.age;
ClassDiagram.Attribut>> Pupil.name:String =>=>=> RelationalSchema.Column>> pupil.name;
ClassDiagram.Attribut>> Pupil.number:Integer =>=>=> RelationalSchema.Column>> pupil.number;
ClassDiagram.Attribut>> Address.city:String =>=>=> RelationalSchema.Column>> address.city;
ClassDiagram.Attribut>> Address.personid:Long =>=>=> RelationalSchema.Column>> address.personid;
ClassDiagram.Attribut>> Person.serialversionuid:long =>=>=> RelationalSchema.Column>> person.serialversionuid;
ClassDiagram.Attribut>> Person.firstname:String =>=>=> RelationalSchema.Column>> person.firstname;
ClassDiagram.Attribut>> Person.lastname:String =>=>=> RelationalSchema.Column>> person.lastname;
ClassDiagram.Attribut>> Person.email:String =>=>=> RelationalSchema.Column>> person.email;
ClassDiagram.Attribut>> Company.serialversionuid:long =>=>=> RelationalSchema.Column>> company.serialversionuid;
ClassDiagram.Attribut>> Company.name:String =>=>=> RelationalSchema.Column>> company.name;
ClassDiagram.Attribut>> Company.GeneratedName:Address =>=>=> RelationalSchema.Column>> company.GeneratedName;
ClassDiagram.Attribut>> Department.serialversionuid:long =>=>=> RelationalSchema.Column>> department.serialversionuid;
ClassDiagram.Attribut>> Department.name:String =>=>=> RelationalSchema.Column>> department.name;
ClassDiagram.Attribut>> Employee.serialversionuid:long =>=>=> RelationalSchema.Column>> employee.serialversionuid;
ClassDiagram.Attribut>> Employee.firstname:String =>=>=> RelationalSchema.Column>> employee.firstname;
ClassDiagram.Attribut>> Employee.lastname:String =>=>=> RelationalSchema.Column>> employee.lastname;
ClassDiagram.Attribut>> Employee.salary:BigDecimal =>=>=> RelationalSchema.Column>> employee.salary;
ClassDiagram.Attribut>> Employee.age:int =>=>=> RelationalSchema.Column>> employee.age;
ClassDiagram.Attribut>> Employee.pesel:String =>=>=> RelationalSchema.Column>> employee.pesel;
ClassDiagram.Attribut>> Todo.serialversionuid:long =>=>=> RelationalSchema.Column>> todo.serialversionuid;
ClassDiagram.Attribut>> Todo.summary:String =>=>=> RelationalSchema.Column>> todo.summary;
ClassDiagram.Attribut>> Todo.description:String =>=>=> RelationalSchema.Column>> todo.description;
ClassDiagram.Attribut>> Person.serialversionuid:long =>=>=> RelationalSchema.Column>> person.serialversionuid;
ClassDiagram.Attribut>> Person.id:Long =>=>=> RelationalSchema.Column>> person.id PRIMARY KEY;
ClassDiagram.Attribut>> Person.firstname:String =>=>=> RelationalSchema.Column>> person.firstname;
ClassDiagram.Attribut>> Person.email:String =>=>=> RelationalSchema.Column>> person.email;
ClassDiagram.Attribut>> Person.modify:LocalDate =>=>=> RelationalSchema.Column>> person.modify;
ClassDiagram.Attribut>> Person.effectivemodify:LocalDate =>=>=> RelationalSchema.Column>> person.effectivemodify;
ClassDiagram.Attribut>> Person.disable:Boolean =>=>=> RelationalSchema.Column>> person.disable;
ClassDiagram.Attribut>> PersonView.serialversionuid:long =>=>=> RelationalSchema.Column>> personview.serialversionuid;
ClassDiagram.Attribut>> PersonView.id:Long =>=>=> RelationalSchema.Column>> personview.id PRIMARY KEY;
ClassDiagram.Attribut>> PersonView.email:String =>=>=> RelationalSchema.Column>> personview.email;
ClassDiagram.Attribut>> PersonView.disable:Boolean =>=>=> RelationalSchema.Column>> personview.disable;
Many-To-One relationship from ClassDiagram.Class>>Bid  to ClassDiagram.Class>>Item represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Item  to ClassDiagram.Class>>Map<Long,Bid>;
One-To-Many relationship from ClassDiagram.Class>>Item  to ClassDiagram.Class>>List<Offer>;
Many-To-One relationship from ClassDiagram.Class>>Address  to ClassDiagram.Class>>user represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Product  to ClassDiagram.Class>>Set<Part>;
Many-To-One relationship from ClassDiagram.Class>>Product  to ClassDiagram.Class>>productcustomer represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Product  to ClassDiagram.Class>>productresource represented by ClassDiagram.Atrribute>>resource;
One-To-Many relationship from ClassDiagram.Class>>User  to ClassDiagram.Class>>Collection<Address>;
One-To-Many relationship from ClassDiagram.Class>>Cart  to ClassDiagram.Class>>List<SimpleProduct>;
Many-To-One relationship from ClassDiagram.Class>>Skill  to ClassDiagram.Class>>jobcandidate represented by ClassDiagram.Atrribute>>candidate;
Many-To-One relationship from ClassDiagram.Class>>Address  to ClassDiagram.Class>>user represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>User  to ClassDiagram.Class>>List<Address>;
One-To-Many relationship from ClassDiagram.Class>>Repository  to ClassDiagram.Class>>List<Commit>;
Many-To-One relationship from ClassDiagram.Class>>Commit  to ClassDiagram.Class>>repository represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Item  to ClassDiagram.Class>>List<Offer>;
One-To-One relationship between ClassDiagram.Class>>User  to ClassDiagram.Class>>address represented by ClassDiagram.Atrribute>>//todo???all;
One-To-One relationship between ClassDiagram.Class>>EmailMessage  to ClassDiagram.Class>>email represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Address  to ClassDiagram.Class>>user represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>User  to ClassDiagram.Class>>address represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>EmailMessage  to ClassDiagram.Class>>email represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>EmailMessage  to ClassDiagram.Class>>email represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Category  to ClassDiagram.Class>>category represented by ClassDiagram.Atrribute>>parent;
Many-To-One relationship from ClassDiagram.Class>>Employee  to ClassDiagram.Class>>employee represented by ClassDiagram.Atrribute>>manager;
One-To-Many relationship from ClassDiagram.Class>>Employee  to ClassDiagram.Class>>Set<Employee>;
One-To-One relationship between ClassDiagram.Class>>Email_BI  to ClassDiagram.Class>>emailmessage_bi represented by ClassDiagram.Atrribute>>email;
One-To-One relationship between ClassDiagram.Class>>EmailMessage_BI  to ClassDiagram.Class>>email_bi represented by ClassDiagram.Atrribute>>email;
One-To-Many relationship from ClassDiagram.Class>>Person  to ClassDiagram.Class>>List<Address>;
One-To-Many relationship from ClassDiagram.Class>>Person  to ClassDiagram.Class>>List<Phone>;
One-To-One relationship between ClassDiagram.Class>>Customer  to ClassDiagram.Class>>user represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Customer  to ClassDiagram.Class>>List<Job>;
One-To-One relationship between ClassDiagram.Class>>Customer  to ClassDiagram.Class>>location represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>CustomSkill  to ClassDiagram.Class>>Map<String,CustomPeference>;
One-To-Many relationship from ClassDiagram.Class>>Department  to ClassDiagram.Class>>Map<String,Person>;
One-To-Many relationship from ClassDiagram.Class>>Department  to ClassDiagram.Class>>Map<UUID,Phone>;
One-To-Many relationship from ClassDiagram.Class>>Company  to ClassDiagram.Class>>Map<Department,Person>;
One-To-Many relationship from ClassDiagram.Class>>Country  to ClassDiagram.Class>>Map<Integer,State>;
One-To-Many relationship from ClassDiagram.Class>>Weapon  to ClassDiagram.Class>>Set<Part>;
Many-To-Many relationship between ClassDiagram.Class>>Project  and ClassDiagram.Class>>collection<employee>: project_employee(employees_id:Project [PK] #FK to Project,projects_id:collection<employee> [PK] #FK to collection<employee>);
Many-To-One relationship from ClassDiagram.Class>>Phone  to ClassDiagram.Class>>employee represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Department  to ClassDiagram.Class>>Set<Employee>;
One-To-One relationship between ClassDiagram.Class>>Employee  to ClassDiagram.Class>>address represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Employee  to ClassDiagram.Class>>Collection<Phone>;
Many-To-One relationship from ClassDiagram.Class>>Employee  to ClassDiagram.Class>>department represented by ClassDiagram.Atrribute>>dept;
Many-To-One relationship from ClassDiagram.Class>>Employee  to ClassDiagram.Class>>employee represented by ClassDiagram.Atrribute>>manager;
One-To-Many relationship from ClassDiagram.Class>>Employee  to ClassDiagram.Class>>Collection<Employee>;
Many-To-One relationship from ClassDiagram.Class>>Task  to ClassDiagram.Class>>hperson represented by ClassDiagram.Atrribute>>person;
Many-To-Many relationship between ClassDiagram.Class>>Tank  and ClassDiagram.Class>>set<crew>: tank_crew(tank_id:Tank [PK] #FK to Tank,crew_id:set<crew> [PK] #FK to set<crew>);
Many-To-Many relationship between ClassDiagram.Class>>TankBi  and ClassDiagram.Class>>set<crewbi>: tank_crew(tank_id:TankBi [PK] #FK to TankBi,crew_id:set<crewbi> [PK] #FK to set<crewbi>);
One-To-Many relationship from ClassDiagram.Class>>Address  to ClassDiagram.Class>>Set<UsersAddress>;
One-To-Many relationship from ClassDiagram.Class>>User  to ClassDiagram.Class>>Set<UsersAddress>;
Many-To-One relationship from ClassDiagram.Class>>UsersAddress  to ClassDiagram.Class>>user represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>UsersAddress  to ClassDiagram.Class>>address represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Dog  to ClassDiagram.Class>>List<PersonDog>;
Many-To-One relationship from ClassDiagram.Class>>PersonDog  to ClassDiagram.Class>>person represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>PersonDog  to ClassDiagram.Class>>dog represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Person  to ClassDiagram.Class>>List<PersonDog>;
Many-To-One relationship from ClassDiagram.Class>>Offer  to ClassDiagram.Class>>Item represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Address  to ClassDiagram.Class>>person represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Person  to ClassDiagram.Class>>List<Address>;
list<department>: company_list<department>(companyID:company [PK] #FK to company,list<department>ID:list<department> [PK] #FK to list<department>);
Many-To-One relationship from ClassDiagram.Class>>Employee  to ClassDiagram.Class>>company represented by ClassDiagram.Atrribute>>GeneratedName;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>AccountJoin  Inheritance based on SINGLE-TABLE strategy (PUSH-UP): ROOT>>Task   Descriminator>>task_type: String ;
