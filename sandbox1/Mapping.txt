ClassDiagram.Class>> Attendance =>=>=> RelationalSchema.Table>> attendance;
ClassDiagram.Class>> Base =>=>=> RelationalSchema.Table>> base;
ClassDiagram.Class>> Role =>=>=> RelationalSchema.Table>> role;
ClassDiagram.Class>> ParkingSlot =>=>=> RelationalSchema.Table>> parkingslot;
ClassDiagram.Class>> File =>=>=> RelationalSchema.Table>> file;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> ParkingRequest =>=>=> RelationalSchema.Table>> parkingrequest;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Attribut>> Attendance.GeneratedName:Date =>=>=> RelationalSchema.Column>> attendance.GeneratedName;
ClassDiagram.Attribut>> Base./***/serialversionuid:long =>=>=> RelationalSchema.Column>> base./***/serialversionuid;
ClassDiagram.Attribut>> Base.id:String =>=>=> RelationalSchema.Column>> base.id PRIMARY KEY;
ClassDiagram.Attribut>> Base.createdon:Date =>=>=> RelationalSchema.Column>> base.createdon;
ClassDiagram.Attribut>> Base.modifiedon:Date =>=>=> RelationalSchema.Column>> base.modifiedon;
ClassDiagram.Attribut>> Base.isdeleted:boolean =>=>=> RelationalSchema.Column>> base.isdeleted;
ClassDiagram.Attribut>> Role.serialversionuid:long =>=>=> RelationalSchema.Column>> role.serialversionuid;
ClassDiagram.Attribut>> Role.rolename:String =>=>=> RelationalSchema.Column>> role.rolename;
ClassDiagram.Attribut>> ParkingSlot.slottype:String =>=>=> RelationalSchema.Column>> parkingslot.slottype;
ClassDiagram.Attribut>> ParkingSlot.slotposition:int =>=>=> RelationalSchema.Column>> parkingslot.slotposition;
ClassDiagram.Attribut>> ParkingSlot.isavailable:boolean =>=>=> RelationalSchema.Column>> parkingslot.isavailable;
ClassDiagram.Attribut>> File./***/serialversionuid:long =>=>=> RelationalSchema.Column>> file./***/serialversionuid;
ClassDiagram.Attribut>> File.filename:String =>=>=> RelationalSchema.Column>> file.filename;
ClassDiagram.Attribut>> File.fileimagefile:MultipartFile =>=>=> RelationalSchema.Column>> file.fileimagefile;
ClassDiagram.Attribut>> User.username:String =>=>=> RelationalSchema.Column>> user.username;
ClassDiagram.Attribut>> User.password:String =>=>=> RelationalSchema.Column>> user.password;
ClassDiagram.Attribut>> User.isactive:boolean =>=>=> RelationalSchema.Column>> user.isactive;
ClassDiagram.Attribut>> ParkingRequest.parking:Date =>=>=> RelationalSchema.Column>> parkingrequest.parking;
ClassDiagram.Attribut>> Employee.employeename:String =>=>=> RelationalSchema.Column>> employee.employeename;
ClassDiagram.Attribut>> Employee.employeeid:String =>=>=> RelationalSchema.Column>> employee.employeeid;
ClassDiagram.Attribut>> Employee.email:String =>=>=> RelationalSchema.Column>> employee.email;
One-To-One relationship between ClassDiagram.Class>>Attendance  to ClassDiagram.Class>>employee represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>File  to ClassDiagram.Class>>base represented by ClassDiagram.Atrribute>>parent;
Many-To-Many relationship between ClassDiagram.Class>>User  and ClassDiagram.Class>>set<role>: user_roles(user_id:User [PK] #FK to User,role_id:set<role> [PK] #FK to set<role>);
One-To-One relationship between ClassDiagram.Class>>ParkingRequest  to ClassDiagram.Class>>employee represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>ParkingRequest  to ClassDiagram.Class>>parkingslot represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Employee  to ClassDiagram.Class>>file represented by ClassDiagram.Atrribute>>image;
One-To-One relationship between ClassDiagram.Class>>Employee  to ClassDiagram.Class>>user represented by ClassDiagram.Atrribute>>GeneratedName;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Base  ;
