ClassDiagram.Class>> Departament =>=>=> RelationalSchema.Table>> departament;
ClassDiagram.Class>> Student =>=>=> RelationalSchema.Table>> student;
ClassDiagram.Class>> Persoana =>=>=> RelationalSchema.Table>> persoana;
ClassDiagram.Class>> Programator =>=>=> RelationalSchema.Table>> programator;
ClassDiagram.Class>> Inginer =>=>=> RelationalSchema.Table>> inginer;
ClassDiagram.Class>> Animal =>=>=> RelationalSchema.Table>> animal;
ClassDiagram.Class>> Pisica =>=>=> RelationalSchema.Table>> pisica;
ClassDiagram.Class>> Caine =>=>=> RelationalSchema.Table>> caine;
ClassDiagram.Attribut>> Departament.id:int =>=>=> RelationalSchema.Column>> departament.id PRIMARY KEY;
ClassDiagram.Attribut>> Student.id:NumePrenumeId =>=>=> RelationalSchema.Column>> student.id;
ClassDiagram.Attribut>> Student.cod:String =>=>=> RelationalSchema.Column>> student.cod;
ClassDiagram.Attribut>> Persoana.nume:String =>=>=> RelationalSchema.Column>> persoana.nume PRIMARY KEY;
ClassDiagram.Attribut>> Persoana.prenume:String =>=>=> RelationalSchema.Column>> persoana.prenume PRIMARY KEY;
ClassDiagram.Attribut>> Persoana.varsta:int =>=>=> RelationalSchema.Column>> persoana.varsta;
ClassDiagram.Attribut>> Programator.limbaj:String =>=>=> RelationalSchema.Column>> programator.limbaj;
ClassDiagram.Attribut>> Inginer.specializare:String =>=>=> RelationalSchema.Column>> inginer.specializare;
ClassDiagram.Attribut>> Animal.id:int =>=>=> RelationalSchema.Column>> animal.id PRIMARY KEY;
ClassDiagram.Attribut>> Animal.nume:String =>=>=> RelationalSchema.Column>> animal.nume;
ClassDiagram.Attribut>> Pisica.vieti:int =>=>=> RelationalSchema.Column>> pisica.vieti;
ClassDiagram.Attribut>> Caine.varsta:int =>=>=> RelationalSchema.Column>> caine.varsta;
Programator: departament_Programator(departamentID:departament [PK] #FK to departament,ProgramatorID:Programator [PK] #FK to Programator);
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Animal  ;
