ClassDiagram.Class>> PasswordResetToken =>=>=> RelationalSchema.Table>> passwordresettoken;
ClassDiagram.Class>> Attribute =>=>=> RelationalSchema.Table>> attribute;
ClassDiagram.Class>> Consumer =>=>=> RelationalSchema.Table>> consumer;
ClassDiagram.Class>> AttributeMap =>=>=> RelationalSchema.Table>> attributemap;
ClassDiagram.Class>> Organization =>=>=> RelationalSchema.Table>> organization;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> Sphere =>=>=> RelationalSchema.Table>> sphere;
ClassDiagram.Class>> Provider =>=>=> RelationalSchema.Table>> provider;
ClassDiagram.Class>> PersonEntityRelationship =>=>=> RelationalSchema.Table>> personentityrelationship;
ClassDiagram.Class>> AttributeCategory =>=>=> RelationalSchema.Table>> attributecategory;
ClassDiagram.Class>> AttributeSubcategory =>=>=> RelationalSchema.Table>> attributesubcategory;
ClassDiagram.Class>> Token =>=>=> RelationalSchema.Table>> token;
ClassDiagram.Attribut>> PasswordResetToken.//1dayexpiration:int =>=>=> RelationalSchema.Column>> passwordresettoken.//1dayexpiration;
ClassDiagram.Attribut>> PasswordResetToken.id:long =>=>=> RelationalSchema.Column>> passwordresettoken.id PRIMARY KEY;
ClassDiagram.Attribut>> PasswordResetToken.token:String =>=>=> RelationalSchema.Column>> passwordresettoken.token;
ClassDiagram.Attribut>> PasswordResetToken.exipration:Date =>=>=> RelationalSchema.Column>> passwordresettoken.exipration;
ClassDiagram.Attribut>> Attribute.id:long =>=>=> RelationalSchema.Column>> attribute.id PRIMARY KEY;
ClassDiagram.Attribut>> Attribute.name:String =>=>=> RelationalSchema.Column>> attribute.name;
ClassDiagram.Attribut>> Attribute.subcategoryname:String =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> Attribute.categoryname:String =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> Attribute.providername:String =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> Attribute.description:String =>=>=> RelationalSchema.Column>> attribute.description;
ClassDiagram.Attribut>> Attribute.reputation:int =>=>=> RelationalSchema.Column>> attribute.reputation;
ClassDiagram.Attribut>> Attribute.isenabled:boolean =>=>=> RelationalSchema.Column>> attribute.isenabled;
ClassDiagram.Attribut>> Attribute.isdeleted:boolean =>=>=> RelationalSchema.Column>> attribute.isdeleted;
ClassDiagram.Attribut>> Attribute.isupdateable:boolean =>=>=> RelationalSchema.Column>> attribute.isupdateable;
ClassDiagram.Attribut>> Consumer.id:long =>=>=> RelationalSchema.Column>> consumer.id PRIMARY KEY;
ClassDiagram.Attribut>> Consumer.identifier:String =>=>=> RelationalSchema.Column>> consumer.identifier;
ClassDiagram.Attribut>> Consumer.name:String =>=>=> RelationalSchema.Column>> consumer.name;
ClassDiagram.Attribut>> Consumer.description:String =>=>=> RelationalSchema.Column>> consumer.description;
ClassDiagram.Attribut>> Consumer.isenabled:boolean =>=>=> RelationalSchema.Column>> consumer.isenabled;
ClassDiagram.Attribut>> Consumer.isdeleted:boolean =>=>=> RelationalSchema.Column>> consumer.isdeleted;
ClassDiagram.Attribut>> AttributeMap.id:long =>=>=> RelationalSchema.Column>> attributemap.id PRIMARY KEY;
ClassDiagram.Attribut>> AttributeMap.providerattributename:String =>=>=> RelationalSchema.Column>> attributemap.providerattributename;
ClassDiagram.Attribut>> AttributeMap.lmpattributename:String =>=>=> RelationalSchema.Column>> attributemap.lmpattributename;
ClassDiagram.Attribut>> AttributeMap.attributenameinresponse:String =>=>=> RelationalSchema.Column>> attributemap.attributenameinresponse;
ClassDiagram.Attribut>> Organization.id:long =>=>=> RelationalSchema.Column>> organization.id PRIMARY KEY;
ClassDiagram.Attribut>> Organization.identifier:String =>=>=> RelationalSchema.Column>> organization.identifier;
ClassDiagram.Attribut>> Organization.name:String =>=>=> RelationalSchema.Column>> organization.name;
ClassDiagram.Attribut>> Organization.email:String =>=>=> RelationalSchema.Column>> organization.email;
ClassDiagram.Attribut>> Organization.description:String =>=>=> RelationalSchema.Column>> organization.description;
ClassDiagram.Attribut>> Person.id:long =>=>=> RelationalSchema.Column>> person.id PRIMARY KEY;
ClassDiagram.Attribut>> Person.name:String =>=>=> RelationalSchema.Column>> person.name;
ClassDiagram.Attribut>> Person.surname:String =>=>=> RelationalSchema.Column>> person.surname;
ClassDiagram.Attribut>> Person.phone:String =>=>=> RelationalSchema.Column>> person.phone;
ClassDiagram.Attribut>> Person.email:String =>=>=> RelationalSchema.Column>> person.email;
ClassDiagram.Attribut>> Person.password:String =>=>=> RelationalSchema.Column>> person.password;
ClassDiagram.Attribut>> Person.identifier:String =>=>=> RelationalSchema.Column>> person.identifier;
ClassDiagram.Attribut>> Person.address:String =>=>=> RelationalSchema.Column>> person.address;
ClassDiagram.Attribut>> Person.postalcode:String =>=>=> RelationalSchema.Column>> person.postalcode;
ClassDiagram.Attribut>> Person.city:String =>=>=> RelationalSchema.Column>> person.city;
ClassDiagram.Attribut>> Person.country:String =>=>=> RelationalSchema.Column>> person.country;
ClassDiagram.Attribut>> Person.description:String =>=>=> RelationalSchema.Column>> person.description;
ClassDiagram.Attribut>> Person.company:String =>=>=> RelationalSchema.Column>> person.company;
ClassDiagram.Attribut>> Person.jobposition:String =>=>=> RelationalSchema.Column>> person.jobposition;
ClassDiagram.Attribut>> Person.legal:boolean =>=>=> RelationalSchema.Column>> person.legal;
ClassDiagram.Attribut>> Person.clientrole:boolean =>=>=> RelationalSchema.Column>> person.clientrole;
ClassDiagram.Attribut>> Person.providerrole:boolean =>=>=> RelationalSchema.Column>> person.providerrole;
ClassDiagram.Attribut>> Person.activated:boolean =>=>=> RelationalSchema.Column>> person.activated;
ClassDiagram.Attribut>> Sphere.id:Long =>=>=> RelationalSchema.Column>> sphere.id PRIMARY KEY;
ClassDiagram.Attribut>> Sphere.identifier:String =>=>=> RelationalSchema.Column>> sphere.identifier;
ClassDiagram.Attribut>> Sphere.name:String =>=>=> RelationalSchema.Column>> sphere.name;
ClassDiagram.Attribut>> Sphere.description:String =>=>=> RelationalSchema.Column>> sphere.description;
ClassDiagram.Attribut>> Sphere.type:String =>=>=> RelationalSchema.Column>> sphere.type;
ClassDiagram.Attribut>> Sphere.isenabled:boolean =>=>=> RelationalSchema.Column>> sphere.isenabled;
ClassDiagram.Attribut>> Sphere.isdeleted:boolean =>=>=> RelationalSchema.Column>> sphere.isdeleted;
ClassDiagram.Attribut>> Sphere.isdataextracted:boolean =>=>=> RelationalSchema.Column>> sphere.isdataextracted;
ClassDiagram.Attribut>> Provider.id:long =>=>=> RelationalSchema.Column>> provider.id PRIMARY KEY;
ClassDiagram.Attribut>> Provider.identifier:String =>=>=> RelationalSchema.Column>> provider.identifier;
ClassDiagram.Attribut>> Provider.name:String =>=>=> RelationalSchema.Column>> provider.name;
ClassDiagram.Attribut>> Provider.description:String =>=>=> RelationalSchema.Column>> provider.description;
ClassDiagram.Attribut>> Provider.type:String =>=>=> RelationalSchema.Column>> provider.type;
ClassDiagram.Attribut>> Provider.url:String =>=>=> RelationalSchema.Column>> provider.url;
ClassDiagram.Attribut>> Provider.isoauth:boolean =>=>=> RelationalSchema.Column>> provider.isoauth;
ClassDiagram.Attribut>> Provider.oauthurl:String =>=>=> RelationalSchema.Column>> provider.oauthurl;
ClassDiagram.Attribut>> Provider.isenabled:boolean =>=>=> RelationalSchema.Column>> provider.isenabled;
ClassDiagram.Attribut>> Provider.isdeleted:boolean =>=>=> RelationalSchema.Column>> provider.isdeleted;
ClassDiagram.Attribut>> PersonEntityRelationship.//state:administrator,associated,requested_from_user,requested_from_entityid:long =>=>=> RelationalSchema.Column>> personentityrelationship.//state:administrator,associated,requested_from_user,requested_from_entityid PRIMARY KEY;
ClassDiagram.Attribut>> PersonEntityRelationship.state:String =>=>=> RelationalSchema.Column>> personentityrelationship.state;
ClassDiagram.Attribut>> AttributeCategory.id:long =>=>=> RelationalSchema.Column>> attributecategory.id PRIMARY KEY;
ClassDiagram.Attribut>> AttributeCategory.name:String =>=>=> RelationalSchema.Column>> attributecategory.name;
ClassDiagram.Attribut>> AttributeSubcategory.id:long =>=>=> RelationalSchema.Column>> attributesubcategory.id PRIMARY KEY;
ClassDiagram.Attribut>> AttributeSubcategory.name:String =>=>=> RelationalSchema.Column>> attributesubcategory.name;
ClassDiagram.Attribut>> Token.id:long =>=>=> RelationalSchema.Column>> token.id PRIMARY KEY;
ClassDiagram.Attribut>> Token.token:String =>=>=> RelationalSchema.Column>> token.token;
One-To-One relationship between ClassDiagram.Class>>PasswordResetToken  to ClassDiagram.Class>>person represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Attribute  to ClassDiagram.Class>>attributesubcategory represented by ClassDiagram.Atrribute>>subcategory;
One-To-Many relationship from ClassDiagram.Class>>Attribute  to ClassDiagram.Class>>List<AttributeMap>;
Many-To-One relationship from ClassDiagram.Class>>AttributeMap  to ClassDiagram.Class>>provider represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>AttributeMap  to ClassDiagram.Class>>attribute represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-Many relationship between ClassDiagram.Class>>Organization  and ClassDiagram.Class>>list<consumer>: entity_has_consumers(entity_id:Organization [PK] #FK to Organization,consumer_id:list<consumer> [PK] #FK to list<consumer>);
Many-To-Many relationship between ClassDiagram.Class>>Organization  and ClassDiagram.Class>>list<provider>: entity_has_consumers(entity_id:Organization [PK] #FK to Organization,consumer_id:list<consumer> [PK] #FK to list<consumer>);entity_has_providers(entity_id:Organization [PK] #FK to Organization,provider_id:list<provider> [PK] #FK to list<provider>);
One-To-Many relationship from ClassDiagram.Class>>Organization  to ClassDiagram.Class>>List<Sphere>;
One-To-Many relationship from ClassDiagram.Class>>Organization  to ClassDiagram.Class>>List<PersonEntityRelationship>;
Many-To-Many relationship between ClassDiagram.Class>>Person  and ClassDiagram.Class>>set<consumer>: person_has_consumers(person_id:Person [PK] #FK to Person,consumer_id:set<consumer> [PK] #FK to set<consumer>);
Many-To-Many relationship between ClassDiagram.Class>>Person  and ClassDiagram.Class>>set<provider>: person_has_consumers(person_id:Person [PK] #FK to Person,consumer_id:set<consumer> [PK] #FK to set<consumer>);person_has_providers(person_id:Person [PK] #FK to Person,provider_id:set<provider> [PK] #FK to set<provider>);
One-To-Many relationship from ClassDiagram.Class>>Person  to ClassDiagram.Class>>Set<Sphere>;
One-To-Many relationship from ClassDiagram.Class>>Person  to ClassDiagram.Class>>List<PersonEntityRelationship>;
Many-To-Many relationship between ClassDiagram.Class>>Sphere  and ClassDiagram.Class>>list<consumer>: sphere_has_consumers(sphere_id:Sphere [PK] #FK to Sphere,consumer_id:list<consumer> [PK] #FK to list<consumer>);
Many-To-Many relationship between ClassDiagram.Class>>Sphere  and ClassDiagram.Class>>list<attribute>: sphere_has_consumers(sphere_id:Sphere [PK] #FK to Sphere,consumer_id:list<consumer> [PK] #FK to list<consumer>);sphere_has_attributes(sphere_id:Sphere [PK] #FK to Sphere,attribute_id:list<attribute> [PK] #FK to list<attribute>);
Many-To-One relationship from ClassDiagram.Class>>Sphere  to ClassDiagram.Class>>person represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Provider  to ClassDiagram.Class>>List<Token>;
One-To-Many relationship from ClassDiagram.Class>>Provider  to ClassDiagram.Class>>List<AttributeMap>;
Many-To-One relationship from ClassDiagram.Class>>PersonEntityRelationship  to ClassDiagram.Class>>person represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>PersonEntityRelationship  to ClassDiagram.Class>>organization represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>AttributeCategory  to ClassDiagram.Class>>List<AttributeSubcategory>;
Many-To-One relationship from ClassDiagram.Class>>AttributeSubcategory  to ClassDiagram.Class>>attributecategory represented by ClassDiagram.Atrribute>>category;
Many-To-One relationship from ClassDiagram.Class>>Token  to ClassDiagram.Class>>person represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Token  to ClassDiagram.Class>>provider represented by ClassDiagram.Atrribute>>GeneratedName;
