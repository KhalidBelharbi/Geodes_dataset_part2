ClassDiagram.Class>> Book =>=>=> RelationalSchema.Table>> book;
ClassDiagram.Class>> Item =>=>=> RelationalSchema.Table>> item;
ClassDiagram.Class>> Album =>=>=> RelationalSchema.Table>> album;
ClassDiagram.Class>> Movie =>=>=> RelationalSchema.Table>> movie;
ClassDiagram.Class>> Customer =>=>=> RelationalSchema.Table>> customer;
ClassDiagram.Class>> Seller =>=>=> RelationalSchema.Table>> seller;
ClassDiagram.Class>> Parent6 =>=>=> RelationalSchema.Table>> parent6;
ClassDiagram.Class>> Child6 =>=>=> RelationalSchema.Table>> child6;
ClassDiagram.Class>> Parent1 =>=>=> RelationalSchema.Table>> parent1;
ClassDiagram.Class>> Child1 =>=>=> RelationalSchema.Table>> child1;
ClassDiagram.Class>> Parent5 =>=>=> RelationalSchema.Table>> parent5;
ClassDiagram.Class>> Child5 =>=>=> RelationalSchema.Table>> child5;
ClassDiagram.Class>> Child8 =>=>=> RelationalSchema.Table>> child8;
ClassDiagram.Class>> Parent8 =>=>=> RelationalSchema.Table>> parent8;
ClassDiagram.Class>> Child4 =>=>=> RelationalSchema.Table>> child4;
ClassDiagram.Class>> Parent4 =>=>=> RelationalSchema.Table>> parent4;
ClassDiagram.Class>> GrandChild4 =>=>=> RelationalSchema.Table>> grandchild4;
ClassDiagram.Class>> Movie =>=>=> RelationalSchema.Table>> movie;
ClassDiagram.Class>> Album =>=>=> RelationalSchema.Table>> album;
ClassDiagram.Class>> Book =>=>=> RelationalSchema.Table>> book;
ClassDiagram.Class>> Item =>=>=> RelationalSchema.Table>> item;
ClassDiagram.Class>> Team =>=>=> RelationalSchema.Table>> team;
ClassDiagram.Class>> Locker =>=>=> RelationalSchema.Table>> locker;
ClassDiagram.Class>> Member =>=>=> RelationalSchema.Table>> member;
ClassDiagram.Class>> Product =>=>=> RelationalSchema.Table>> product;
ClassDiagram.Class>> PhoneServiceProvider =>=>=> RelationalSchema.Table>> phoneserviceprovider;
ClassDiagram.Class>> Orders =>=>=> RelationalSchema.Table>> orders;
ClassDiagram.Class>> Board =>=>=> RelationalSchema.Table>> board;
ClassDiagram.Class>> Parent2 =>=>=> RelationalSchema.Table>> parent2;
ClassDiagram.Class>> Movie =>=>=> RelationalSchema.Table>> movie;
ClassDiagram.Class>> Album =>=>=> RelationalSchema.Table>> album;
ClassDiagram.Class>> Item =>=>=> RelationalSchema.Table>> item;
ClassDiagram.Class>> Book =>=>=> RelationalSchema.Table>> book;
ClassDiagram.Class>> Parent7 =>=>=> RelationalSchema.Table>> parent7;
ClassDiagram.Class>> Child7 =>=>=> RelationalSchema.Table>> child7;
ClassDiagram.Class>> GrandChild3 =>=>=> RelationalSchema.Table>> grandchild3;
ClassDiagram.Class>> Parent3 =>=>=> RelationalSchema.Table>> parent3;
ClassDiagram.Class>> Child3 =>=>=> RelationalSchema.Table>> child3;
ClassDiagram.Attribut>> Customer.//id상속//name상속email:String =>=>=> RelationalSchema.Column>> customer.//id상속//name상속email;
ClassDiagram.Attribut>> Seller.//id상속//name상속shopname:String =>=>=> RelationalSchema.Column>> seller.//id상속//name상속shopname;
ClassDiagram.Attribut>> Parent6.id:Long =>=>=> RelationalSchema.Column>> parent6.id PRIMARY KEY;
ClassDiagram.Attribut>> Parent6.name:String =>=>=> RelationalSchema.Column>> parent6.name;
ClassDiagram.Attribut>> Child6.id:Long =>=>=> RelationalSchema.Column>> child6.id PRIMARY KEY;
ClassDiagram.Attribut>> Child6.name:String =>=>=> RelationalSchema.Column>> child6.name;
ClassDiagram.Attribut>> Parent1.id1:String =>=>=> RelationalSchema.Column>> parent1.id1 PRIMARY KEY;
ClassDiagram.Attribut>> Parent1.id2:String =>=>=> RelationalSchema.Column>> parent1.id2 PRIMARY KEY;
ClassDiagram.Attribut>> Parent1.name:String =>=>=> RelationalSchema.Column>> parent1.name;
ClassDiagram.Attribut>> Child1.id:String =>=>=> RelationalSchema.Column>> child1.id PRIMARY KEY;
ClassDiagram.Attribut>> Parent5.id:Long =>=>=> RelationalSchema.Column>> parent5.id PRIMARY KEY;
ClassDiagram.Attribut>> Parent5.name:String =>=>=> RelationalSchema.Column>> parent5.name;
ClassDiagram.Attribut>> Child5.id:Long =>=>=> RelationalSchema.Column>> child5.id PRIMARY KEY;
ClassDiagram.Attribut>> Child5.name:String =>=>=> RelationalSchema.Column>> child5.name;
ClassDiagram.Attribut>> Child8.id:Long =>=>=> RelationalSchema.Column>> child8.id PRIMARY KEY;
ClassDiagram.Attribut>> Child8.name:String =>=>=> RelationalSchema.Column>> child8.name;
ClassDiagram.Attribut>> Parent8.id:Long =>=>=> RelationalSchema.Column>> parent8.id PRIMARY KEY;
ClassDiagram.Attribut>> Parent8.name:String =>=>=> RelationalSchema.Column>> parent8.name;
ClassDiagram.Attribut>> Child4.id:Child4Id =>=>=> RelationalSchema.Column>> child4.id;
ClassDiagram.Attribut>> Child4.name:String =>=>=> RelationalSchema.Column>> child4.name;
ClassDiagram.Attribut>> Parent4.id:String =>=>=> RelationalSchema.Column>> parent4.id PRIMARY KEY;
ClassDiagram.Attribut>> Parent4.name:String =>=>=> RelationalSchema.Column>> parent4.name;
ClassDiagram.Attribut>> GrandChild4.id:GrandChild4Id =>=>=> RelationalSchema.Column>> grandchild4.id;
ClassDiagram.Attribut>> GrandChild4.name:String =>=>=> RelationalSchema.Column>> grandchild4.name;
ClassDiagram.Attribut>> Movie.//감독director:String =>=>=> RelationalSchema.Column>> movie.//감독director;
ClassDiagram.Attribut>> Movie.//배우actor:String =>=>=> RelationalSchema.Column>> movie.//배우actor;
ClassDiagram.Attribut>> Album.artist:String =>=>=> RelationalSchema.Column>> album.artist;
ClassDiagram.Attribut>> Book.//작가author:String =>=>=> RelationalSchema.Column>> book.//작가author;
ClassDiagram.Attribut>> Book.//isbnisbn:String =>=>=> RelationalSchema.Column>> book.//isbnisbn;
ClassDiagram.Attribut>> Item.id:Long =>=>=> RelationalSchema.Column>> item.id PRIMARY KEY;
ClassDiagram.Attribut>> Item.name:String =>=>=> RelationalSchema.Column>> item.name;
ClassDiagram.Attribut>> Item.price:int =>=>=> RelationalSchema.Column>> item.price;
ClassDiagram.Attribut>> Team.id:Long =>=>=> RelationalSchema.Column>> team.id PRIMARY KEY;
ClassDiagram.Attribut>> Team.name:String =>=>=> RelationalSchema.Column>> team.name;
ClassDiagram.Attribut>> Locker.id:Long =>=>=> RelationalSchema.Column>> locker.id PRIMARY KEY;
ClassDiagram.Attribut>> Locker.name:String =>=>=> RelationalSchema.Column>> locker.name;
ClassDiagram.Attribut>> Member.id:Long =>=>=> RelationalSchema.Column>> member.id PRIMARY KEY;
ClassDiagram.Attribut>> Member.username:String =>=>=> RelationalSchema.Column>> member.username;
ClassDiagram.Attribut>> Member.age:Integer =>=>=> RelationalSchema.Column>> member.age;
ClassDiagram.Attribut>> Member.work:Period =>=>=> RelationalSchema.Column>> member.work;
ClassDiagram.Attribut>> Member.home:Address =>=>=> RelationalSchema.Column>> member.home;
ClassDiagram.Attribut>> Member.company:Address =>=>=> RelationalSchema.Column>> member.company;
ClassDiagram.Attribut>> Member.GeneratedName:PhoneNumber =>=>=> RelationalSchema.Column>> member.GeneratedName;
ClassDiagram.Attribut>> Member.//값으로사용하는컬럼이1개일때@column사용favoritefoods:Set<String> =>=>=> RelationalSchema.Column>> member.//값으로사용하는컬럼이1개일때@column사용favoritefoods;
ClassDiagram.Attribut>> Member.//컬렉션의경우addresshistory:List<Address> =>=>=> RelationalSchema.Column>> member.//컬렉션의경우addresshistory;
ClassDiagram.Attribut>> Member.GeneratedName:RoleType =>=>=> RelationalSchema.Column>> member.GeneratedName;
ClassDiagram.Attribut>> Member.created:Date =>=>=> RelationalSchema.Column>> member.created;
ClassDiagram.Attribut>> Member.lastmodified:Date =>=>=> RelationalSchema.Column>> member.lastmodified;
ClassDiagram.Attribut>> Member.description:String =>=>=> RelationalSchema.Column>> member.description;
ClassDiagram.Attribut>> Product.id:Long =>=>=> RelationalSchema.Column>> product.id PRIMARY KEY;
ClassDiagram.Attribut>> Product.name:String =>=>=> RelationalSchema.Column>> product.name;
ClassDiagram.Attribut>> PhoneServiceProvider.name:String =>=>=> RelationalSchema.Column>> phoneserviceprovider.name PRIMARY KEY;
ClassDiagram.Attribut>> Orders.id:Long =>=>=> RelationalSchema.Column>> orders.id PRIMARY KEY;
ClassDiagram.Attribut>> Orders.orderamount:int =>=>=> RelationalSchema.Column>> orders.orderamount;
ClassDiagram.Attribut>> Board.id:Long =>=>=> RelationalSchema.Column>> board.id PRIMARY KEY;
ClassDiagram.Attribut>> Board.data:String =>=>=> RelationalSchema.Column>> board.data;
ClassDiagram.Attribut>> Parent2.id:Parent2Id =>=>=> RelationalSchema.Column>> parent2.id;
ClassDiagram.Attribut>> Parent2.name:String =>=>=> RelationalSchema.Column>> parent2.name;
ClassDiagram.Attribut>> Parent7.id:Long =>=>=> RelationalSchema.Column>> parent7.id PRIMARY KEY;
ClassDiagram.Attribut>> Parent7.name:String =>=>=> RelationalSchema.Column>> parent7.name;
ClassDiagram.Attribut>> Child7.id:Long =>=>=> RelationalSchema.Column>> child7.id PRIMARY KEY;
ClassDiagram.Attribut>> Child7.name:String =>=>=> RelationalSchema.Column>> child7.name;
ClassDiagram.Attribut>> GrandChild3.child:Child3 =>=>=> RelationalSchema.Column>> grandchild3.child PRIMARY KEY;
ClassDiagram.Attribut>> GrandChild3.id:String =>=>=> RelationalSchema.Column>> grandchild3.id PRIMARY KEY;
ClassDiagram.Attribut>> GrandChild3.name:String =>=>=> RelationalSchema.Column>> grandchild3.name;
ClassDiagram.Attribut>> Parent3.id:String =>=>=> RelationalSchema.Column>> parent3.id PRIMARY KEY;
ClassDiagram.Attribut>> Parent3.name:String =>=>=> RelationalSchema.Column>> parent3.name;
ClassDiagram.Attribut>> Child3.parent:Parent3 =>=>=> RelationalSchema.Column>> child3.parent PRIMARY KEY;
ClassDiagram.Attribut>> Child3.childid:String =>=>=> RelationalSchema.Column>> child3.childid PRIMARY KEY;
ClassDiagram.Attribut>> Child3.name:String =>=>=> RelationalSchema.Column>> child3.name;
One-To-Many relationship from ClassDiagram.Class>>Parent6  to ClassDiagram.Class>>List<Child6>;
Many-To-One relationship from ClassDiagram.Class>>Child1  to ClassDiagram.Class>>Parent1 represented by ClassDiagram.Atrribute>>parent_id1;
One-To-One relationship between ClassDiagram.Class>>Parent5  to ClassDiagram.Class>>Child5 represented by ClassDiagram.Atrribute>>child;
Many-To-Many relationship between ClassDiagram.Class>>Parent8  and ClassDiagram.Class>>Child8: parent_child(parent_id:Parent8 [PK] #FK to Parent8,child_id:Child8 [PK] #FK to Child8);
Many-To-One relationship from ClassDiagram.Class>>Child4  to ClassDiagram.Class>>Parent4 represented by ClassDiagram.Atrribute>>parent;
Many-To-One relationship from ClassDiagram.Class>>GrandChild4  to ClassDiagram.Class>>Child4 represented by ClassDiagram.Atrribute>>child;
One-To-Many relationship from ClassDiagram.Class>>Team  to ClassDiagram.Class>>List<Member>;
One-To-One relationship between ClassDiagram.Class>>Locker  to ClassDiagram.Class>>member represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Member  to ClassDiagram.Class>>team represented by ClassDiagram.Atrribute>>//조인컬럼의nullable;
One-To-One relationship between ClassDiagram.Class>>Member  to ClassDiagram.Class>>locker represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Member  to ClassDiagram.Class>>List<Orders>;
Many-To-One relationship from ClassDiagram.Class>>Orders  to ClassDiagram.Class>>member represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Orders  to ClassDiagram.Class>>product represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Parent7  to ClassDiagram.Class>>List<Child7>;
Many-To-One relationship from ClassDiagram.Class>>Child7  to ClassDiagram.Class>>parent7 represented by ClassDiagram.Atrribute>>parent;
Many-To-One relationship from ClassDiagram.Class>>GrandChild3  to ClassDiagram.Class>>child3 represented by ClassDiagram.Atrribute>>child;
Many-To-One relationship from ClassDiagram.Class>>Child3  to ClassDiagram.Class>>parent3 represented by ClassDiagram.Atrribute>>parent;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Item  ;
