
serializabletypeoraclebuilder(/***compares{@linkjtype}saccordingtotheirqualifiedsourcenames.*/jtype_comparator:Comparator<JType>, /***notypefilteringbydefault..*/default_type_filter:TypeFilter, /***areferencetotheannotationclass*javax.jdo.annotations.persistencecapableusedbythejdoapi.maybenull*ifjdoisnotpresentintheruntimeenvironment.*/jdo_persistence_capable_annotation:Class<? extends Annotation>, /***areferencetothe'string*javax.jdo.annotations.persistencecapable.detachable()'.*/jdo_persistence_capable_detachable_:Method, /***areferencetotheannotationclassjavax.persistence.entityusedbythe*jpaapi.maybenullifjpaisnotpresentintheruntimeenvironment.*/jpa_entity_annotation:Class<? extends Annotation>, alreadycheckedobject:boolean, /***cacheofthe{@linkjclasstype}for{@linkcollection}.*/collectionclass:JGenericType, context:GeneratorContext, enhancedclasses:Set<String>, logoutputwriter:PrintWriter, /***cacheofthe{@linkjclasstype}for{@linkmap}.*/mapclass:JGenericType, roottypes:Map<JClassType,TreeLogger>, wewillnotwarnifaserializabletypecontainsa*non-field.wewarnbecausethesefieldsarenotserialized.*/suppressnonfieldwarnings:boolean, GeneratedName:TypeConstrainer, GeneratedName:TypeFilter, GeneratedName:TypeOracle, GeneratedName:TypeParameterExposureComputer, /***thesetoftypeparametersthatappearinoneoftheroottypes.*todo(spoon):itwouldbecleanertodeletethisfield,andinsteadtohave*{@link#addroottype(treelogger,jtype)}replaceparameterswithwildcard*types.thentheroottypeswouldnotcontainanyparameters.*/typeparametersinroottypes:Set<JTypeParameter>, typetotypeinfocomputed:Map<JType,TypeInfoComputed>);


** PROGRAM TYPE: JPA+Hibernate(Hybrid)