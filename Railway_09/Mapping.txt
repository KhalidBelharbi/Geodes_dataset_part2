ClassDiagram.Class>> Position =>=>=> RelationalSchema.Table>> position;
ClassDiagram.Class>> Department =>=>=> RelationalSchema.Table>> department;
ClassDiagram.Class>> Account =>=>=> RelationalSchema.Table>> account;
ClassDiagram.Attribut>> Position.serialversionuid:long =>=>=> RelationalSchema.Column>> position.serialversionuid;
ClassDiagram.Attribut>> Position.id:short =>=>=> RelationalSchema.Column>> position.id PRIMARY KEY;
ClassDiagram.Attribut>> Position.name:PositionName =>=>=> RelationalSchema.Column>> position.name;
ClassDiagram.Attribut>> Department.serialversionuid:long =>=>=> RelationalSchema.Column>> department.serialversionuid;
ClassDiagram.Attribut>> Department.id:short =>=>=> RelationalSchema.Column>> department.id PRIMARY KEY;
ClassDiagram.Attribut>> Department.name:String =>=>=> RelationalSchema.Column>> department.name;
ClassDiagram.Attribut>> Account.id:Integer =>=>=> RelationalSchema.Column>> account.id PRIMARY KEY;
ClassDiagram.Attribut>> Account.email:String =>=>=> RelationalSchema.Column>> account.email;
ClassDiagram.Attribut>> Account.username:String =>=>=> RelationalSchema.Column>> account.username;
ClassDiagram.Attribut>> Account.fullname:String =>=>=> RelationalSchema.Column>> account.fullname;
ClassDiagram.Attribut>> Account.create:Date =>=>=> RelationalSchema.Column>> account.create;
ClassDiagram.Attribut>> Account.password:String =>=>=> RelationalSchema.Column>> account.password;
One-To-Many relationship from ClassDiagram.Class>>Position  to ClassDiagram.Class>>List<Account>;
One-To-Many relationship from ClassDiagram.Class>>Department  to ClassDiagram.Class>>List<Account>;
Many-To-One relationship from ClassDiagram.Class>>Account  to ClassDiagram.Class>>department represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Account  to ClassDiagram.Class>>position represented by ClassDiagram.Atrribute>>GeneratedName;
