ClassDiagram.Class>> Employer =>=>=> RelationalSchema.Table>> employer;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> Resume =>=>=> RelationalSchema.Table>> resume;
ClassDiagram.Class>> Company =>=>=> RelationalSchema.Table>> company;
ClassDiagram.Class>> Job =>=>=> RelationalSchema.Table>> job;
ClassDiagram.Class>> Role =>=>=> RelationalSchema.Table>> role;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Attribut>> Employer.id:Long =>=>=> RelationalSchema.Column>> employer.id PRIMARY KEY;
ClassDiagram.Attribut>> Employer.position:String =>=>=> RelationalSchema.Column>> employer.position;
ClassDiagram.Attribut>> User.id:Long =>=>=> RelationalSchema.Column>> user.id PRIMARY KEY;
ClassDiagram.Attribut>> User.username:String =>=>=> RelationalSchema.Column>> user.username;
ClassDiagram.Attribut>> User.firstname:String =>=>=> RelationalSchema.Column>> user.firstname;
ClassDiagram.Attribut>> User.lastname:String =>=>=> RelationalSchema.Column>> user.lastname;
ClassDiagram.Attribut>> User.password:String =>=>=> RelationalSchema.Column>> user.password;
ClassDiagram.Attribut>> User.email:String =>=>=> RelationalSchema.Column>> user.email;
ClassDiagram.Attribut>> User.phonenum:String =>=>=> RelationalSchema.Column>> user.phonenum;
ClassDiagram.Attribut>> User.isbanned:boolean =>=>=> RelationalSchema.Column>> user.isbanned;
ClassDiagram.Attribut>> Resume.id:Long =>=>=> RelationalSchema.Column>> resume.id PRIMARY KEY;
ClassDiagram.Attribut>> Resume.desiredposition:String =>=>=> RelationalSchema.Column>> resume.desiredposition;
ClassDiagram.Attribut>> Resume.city:String =>=>=> RelationalSchema.Column>> resume.city;
ClassDiagram.Attribut>> Resume.workexperience:String =>=>=> RelationalSchema.Column>> resume.workexperience;
ClassDiagram.Attribut>> Resume.skills:String =>=>=> RelationalSchema.Column>> resume.skills;
ClassDiagram.Attribut>> Company.id:Long =>=>=> RelationalSchema.Column>> company.id PRIMARY KEY;
ClassDiagram.Attribut>> Company.name:String =>=>=> RelationalSchema.Column>> company.name;
ClassDiagram.Attribut>> Company.codeedrpou:Long =>=>=> RelationalSchema.Column>> company.codeedrpou;
ClassDiagram.Attribut>> Company.address:String =>=>=> RelationalSchema.Column>> company.address;
ClassDiagram.Attribut>> Company.description:String =>=>=> RelationalSchema.Column>> company.description;
ClassDiagram.Attribut>> Company.industry:String =>=>=> RelationalSchema.Column>> company.industry;
ClassDiagram.Attribut>> Company.employeesnum:Integer =>=>=> RelationalSchema.Column>> company.employeesnum;
ClassDiagram.Attribut>> Company.//@onetomany(mappedby:List<Job> =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> Job.id:Long =>=>=> RelationalSchema.Column>> job.id PRIMARY KEY;
ClassDiagram.Attribut>> Job.jobtitle:String =>=>=> RelationalSchema.Column>> job.jobtitle;
ClassDiagram.Attribut>> Job.description:String =>=>=> RelationalSchema.Column>> job.description;
ClassDiagram.Attribut>> Job.postedon:LocalDate =>=>=> RelationalSchema.Column>> job.postedon;
ClassDiagram.Attribut>> Job.industry:String =>=>=> RelationalSchema.Column>> job.industry;
ClassDiagram.Attribut>> Job.status:JobStatus =>=>=> RelationalSchema.Column>> job.status;
ClassDiagram.Attribut>> Job.location:String =>=>=> RelationalSchema.Column>> job.location;
ClassDiagram.Attribut>> Job.skills:String =>=>=> RelationalSchema.Column>> job.skills;
ClassDiagram.Attribut>> Job.salary:Integer =>=>=> RelationalSchema.Column>> job.salary;
ClassDiagram.Attribut>> Job.employmenttype:String =>=>=> RelationalSchema.Column>> job.employmenttype;
ClassDiagram.Attribut>> Role.id:Integer =>=>=> RelationalSchema.Column>> role.id PRIMARY KEY;
ClassDiagram.Attribut>> Role.role:String =>=>=> RelationalSchema.Column>> role.role;
ClassDiagram.Attribut>> Employee.id:Long =>=>=> RelationalSchema.Column>> employee.id PRIMARY KEY;
One-To-One relationship between ClassDiagram.Class>>Employer  to ClassDiagram.Class>>user represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Employer  to ClassDiagram.Class>>company represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-Many relationship between ClassDiagram.Class>>User  and ClassDiagram.Class>>set<role>: user_roles(user_id:User [PK] #FK to User,role_id:set<role> [PK] #FK to set<role>);
Many-To-One relationship from ClassDiagram.Class>>Resume  to ClassDiagram.Class>>employee represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Job  to ClassDiagram.Class>>employer represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Job  to ClassDiagram.Class>>company represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-Many relationship between ClassDiagram.Class>>Job  and ClassDiagram.Class>>list<resume>: job_applicants(job_id:Job [PK] #FK to Job,resume_id:list<resume> [PK] #FK to list<resume>);
One-To-One relationship between ClassDiagram.Class>>Employee  to ClassDiagram.Class>>user represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Employee  to ClassDiagram.Class>>List<Resume>;
