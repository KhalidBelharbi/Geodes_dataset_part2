ClassDiagram.Class>> Project =>=>=> RelationalSchema.Table>> project;
ClassDiagram.Class>> Release =>=>=> RelationalSchema.Table>> release;
ClassDiagram.Class>> TagType =>=>=> RelationalSchema.Table>> tagtype;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> Permission =>=>=> RelationalSchema.Table>> permission;
ClassDiagram.Class>> GitRepository =>=>=> RelationalSchema.Table>> gitrepository;
ClassDiagram.Class>> Tag =>=>=> RelationalSchema.Table>> tag;
ClassDiagram.Class>> EnoviaEntity =>=>=> RelationalSchema.Table>> enoviaentity;
ClassDiagram.Class>> Role =>=>=> RelationalSchema.Table>> role;
ClassDiagram.Attribut>> Project.id:Long =>=>=> RelationalSchema.Column>> project.id PRIMARY KEY;
ClassDiagram.Attribut>> Project.projectname:String =>=>=> RelationalSchema.Column>> project.projectname;
ClassDiagram.Attribut>> Project.description:String =>=>=> RelationalSchema.Column>> project.description;
ClassDiagram.Attribut>> Project.status:ProjectStatus =>=>=> RelationalSchema.Column>> project.status;
ClassDiagram.Attribut>> Release.id:Long =>=>=> RelationalSchema.Column>> release.id PRIMARY KEY;
ClassDiagram.Attribut>> Release.description:String =>=>=> RelationalSchema.Column>> release.description;
ClassDiagram.Attribut>> Release.branchname:String =>=>=> RelationalSchema.Column>> release.branchname;
ClassDiagram.Attribut>> Release.extreleaseid:String =>=>=> RelationalSchema.Column>> release.extreleaseid;
ClassDiagram.Attribut>> Release.releasename:String =>=>=> RelationalSchema.Column>> release.releasename;
ClassDiagram.Attribut>> TagType.id:Long =>=>=> RelationalSchema.Column>> tagtype.id PRIMARY KEY;
ClassDiagram.Attribut>> TagType.name:String =>=>=> RelationalSchema.Column>> tagtype.name;
ClassDiagram.Attribut>> TagType.description:String =>=>=> RelationalSchema.Column>> tagtype.description;
ClassDiagram.Attribut>> TagType.color:String =>=>=> RelationalSchema.Column>> tagtype.color;
ClassDiagram.Attribut>> User.id:Long =>=>=> RelationalSchema.Column>> user.id PRIMARY KEY;
ClassDiagram.Attribut>> User.username:String =>=>=> RelationalSchema.Column>> user.username;
ClassDiagram.Attribut>> User.password:String =>=>=> RelationalSchema.Column>> user.password;
ClassDiagram.Attribut>> Permission.mnemonic:String =>=>=> RelationalSchema.Column>> permission.mnemonic PRIMARY KEY;
ClassDiagram.Attribut>> Permission.permission:String =>=>=> RelationalSchema.Column>> permission.permission;
ClassDiagram.Attribut>> Permission.description:String =>=>=> RelationalSchema.Column>> permission.description;
ClassDiagram.Attribut>> GitRepository.id:Long =>=>=> RelationalSchema.Column>> gitrepository.id PRIMARY KEY;
ClassDiagram.Attribut>> GitRepository.uri:String =>=>=> RelationalSchema.Column>> gitrepository.uri;
ClassDiagram.Attribut>> GitRepository.username:String =>=>=> RelationalSchema.Column>> gitrepository.username;
ClassDiagram.Attribut>> GitRepository.password:String =>=>=> RelationalSchema.Column>> gitrepository.password;
ClassDiagram.Attribut>> Tag.id:Long =>=>=> RelationalSchema.Column>> tag.id PRIMARY KEY;
ClassDiagram.Attribut>> Tag.name:String =>=>=> RelationalSchema.Column>> tag.name;
ClassDiagram.Attribut>> Tag.description:String =>=>=> RelationalSchema.Column>> tag.description;
ClassDiagram.Attribut>> EnoviaEntity.id:Long =>=>=> RelationalSchema.Column>> enoviaentity.id PRIMARY KEY;
ClassDiagram.Attribut>> EnoviaEntity.entityname:String =>=>=> RelationalSchema.Column>> enoviaentity.entityname;
ClassDiagram.Attribut>> EnoviaEntity.description:String =>=>=> RelationalSchema.Column>> enoviaentity.description;
ClassDiagram.Attribut>> EnoviaEntity.type:String =>=>=> RelationalSchema.Column>> enoviaentity.type;
ClassDiagram.Attribut>> EnoviaEntity.GeneratedName:Ematrix =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> EnoviaEntity.ematrixhtml:String =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> EnoviaEntity.filename:String =>=>=> RelationalSchema.Column>> enoviaentity.filename;
ClassDiagram.Attribut>> EnoviaEntity.child:List<EnoviaEntity> =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> Role.mnemonic:String =>=>=> RelationalSchema.Column>> role.mnemonic PRIMARY KEY;
ClassDiagram.Attribut>> Role.rolename:String =>=>=> RelationalSchema.Column>> role.rolename;
ClassDiagram.Attribut>> Role.description:String =>=>=> RelationalSchema.Column>> role.description;
One-To-Many relationship from ClassDiagram.Class>>Project  to ClassDiagram.Class>>Set<Release>;
One-To-One relationship between ClassDiagram.Class>>Project  to ClassDiagram.Class>>gitrepository represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Release  to ClassDiagram.Class>>project represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Release  to ClassDiagram.Class>>Set<EnoviaEntity>;
One-To-Many relationship from ClassDiagram.Class>>TagType  to ClassDiagram.Class>>Set<Tag>;
Many-To-One relationship from ClassDiagram.Class>>User  to ClassDiagram.Class>>role represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>User  to ClassDiagram.Class>>project represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>GitRepository  to ClassDiagram.Class>>project represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Tag  to ClassDiagram.Class>>tagtype represented by ClassDiagram.Atrribute>>type;
Many-To-One relationship from ClassDiagram.Class>>EnoviaEntity  to ClassDiagram.Class>>release represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-Many relationship between ClassDiagram.Class>>EnoviaEntity  and ClassDiagram.Class>>set<tag>: tags_entity(entities_id:EnoviaEntity [PK] #FK to EnoviaEntity,tags_id:set<tag> [PK] #FK to set<tag>);
Many-To-Many relationship between ClassDiagram.Class>>Role  and ClassDiagram.Class>>set<permission>: role_permission(role_id:Role [PK] #FK to Role,permission_id:set<permission> [PK] #FK to set<permission>);
