ClassDiagram.Class>> Instrument =>=>=> RelationalSchema.Table>> instrument;
ClassDiagram.Class>> Singer =>=>=> RelationalSchema.Table>> singer;
ClassDiagram.Class>> Album =>=>=> RelationalSchema.Table>> album;
ClassDiagram.Attribut>> Instrument.instrumentid:String =>=>=> RelationalSchema.Column>> instrument.instrumentid PRIMARY KEY;
ClassDiagram.Attribut>> Singer.find_all:String =>=>=> RelationalSchema.Column>> singer.find_all;
ClassDiagram.Attribut>> Singer.count_all:String =>=>=> RelationalSchema.Column>> singer.count_all;
ClassDiagram.Attribut>> Singer.id:Long =>=>=> RelationalSchema.Column>> singer.id PRIMARY KEY;
ClassDiagram.Attribut>> Singer.version:int =>=>=> RelationalSchema.Column>> singer.version;
ClassDiagram.Attribut>> Singer.firstname:String =>=>=> RelationalSchema.Column>> singer.firstname;
ClassDiagram.Attribut>> Singer.lastname:String =>=>=> RelationalSchema.Column>> singer.lastname;
ClassDiagram.Attribut>> Singer.birth:Date =>=>=> RelationalSchema.Column>> singer.birth;
ClassDiagram.Attribut>> Album.id:Long =>=>=> RelationalSchema.Column>> album.id PRIMARY KEY;
ClassDiagram.Attribut>> Album.version:int =>=>=> RelationalSchema.Column>> album.version;
ClassDiagram.Attribut>> Album.title:String =>=>=> RelationalSchema.Column>> album.title;
ClassDiagram.Attribut>> Album.release:Date =>=>=> RelationalSchema.Column>> album.release;
Many-To-Many relationship between ClassDiagram.Class>>Instrument  and ClassDiagram.Class>>set<singer>: singer_instrument(instrument_id:Instrument [PK] #FK to Instrument,singer_id:set<singer> [PK] #FK to set<singer>);
One-To-Many relationship from ClassDiagram.Class>>Singer  to ClassDiagram.Class>>Set<Album>;
Many-To-Many relationship between ClassDiagram.Class>>Singer  and ClassDiagram.Class>>set<instrument>: singer_instrument(singer_id:Singer [PK] #FK to Singer,instrument_id:set<instrument> [PK] #FK to set<instrument>);
Many-To-One relationship from ClassDiagram.Class>>Album  to ClassDiagram.Class>>singer represented by ClassDiagram.Atrribute>>GeneratedName;
