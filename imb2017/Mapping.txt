ClassDiagram.Class>> Transaction =>=>=> RelationalSchema.Table>> transaction;
ClassDiagram.Class>> Beneficiary =>=>=> RelationalSchema.Table>> beneficiary;
ClassDiagram.Class>> Device =>=>=> RelationalSchema.Table>> device;
ClassDiagram.Class>> BaseEntity =>=>=> RelationalSchema.Table>> baseentity;
ClassDiagram.Class>> Account =>=>=> RelationalSchema.Table>> account;
ClassDiagram.Class>> Role =>=>=> RelationalSchema.Table>> role;
ClassDiagram.Class>> Customer =>=>=> RelationalSchema.Table>> customer;
ClassDiagram.Class>> Currency =>=>=> RelationalSchema.Table>> currency;
ClassDiagram.Attribut>> Transaction.serialversionuid:long =>=>=> RelationalSchema.Column>> transaction.serialversionuid;
ClassDiagram.Attribut>> Transaction.findall:String =>=>=> RelationalSchema.Column>> transaction.findall;
ClassDiagram.Attribut>> Transaction.GeneratedName:Date =>=>=> RelationalSchema.Column>> transaction.GeneratedName;
ClassDiagram.Attribut>> Transaction.transactiontype:String =>=>=> RelationalSchema.Column>> transaction.transactiontype;
ClassDiagram.Attribut>> Transaction.amount:Double =>=>=> RelationalSchema.Column>> transaction.amount;
ClassDiagram.Attribut>> Transaction.sender:String =>=>=> RelationalSchema.Column>> transaction.sender;
ClassDiagram.Attribut>> Transaction.details:String =>=>=> RelationalSchema.Column>> transaction.details;
ClassDiagram.Attribut>> Transaction.status:String =>=>=> RelationalSchema.Column>> transaction.status;
ClassDiagram.Attribut>> Beneficiary.findall:String =>=>=> RelationalSchema.Column>> beneficiary.findall;
ClassDiagram.Attribut>> Beneficiary.iban:String =>=>=> RelationalSchema.Column>> beneficiary.iban;
ClassDiagram.Attribut>> Beneficiary.name:String =>=>=> RelationalSchema.Column>> beneficiary.name;
ClassDiagram.Attribut>> Beneficiary.details:String =>=>=> RelationalSchema.Column>> beneficiary.details;
ClassDiagram.Attribut>> Beneficiary.accountholder:String =>=>=> RelationalSchema.Column>> beneficiary.accountholder;
ClassDiagram.Attribut>> Device.name:String =>=>=> RelationalSchema.Column>> device.name;
ClassDiagram.Attribut>> Device.deviceid:long =>=>=> RelationalSchema.Column>> device.deviceid;
ClassDiagram.Attribut>> BaseEntity.serialversionuid:long =>=>=> RelationalSchema.Column>> baseentity.serialversionuid;
ClassDiagram.Attribut>> BaseEntity.findall:String =>=>=> RelationalSchema.Column>> baseentity.findall;
ClassDiagram.Attribut>> BaseEntity.id:Long =>=>=> RelationalSchema.Column>> baseentity.id PRIMARY KEY;
ClassDiagram.Attribut>> BaseEntity.version:Integer =>=>=> RelationalSchema.Column>> baseentity.version;
ClassDiagram.Attribut>> BaseEntity.deleted:int =>=>=> RelationalSchema.Column>> baseentity.deleted;
ClassDiagram.Attribut>> BaseEntity.//@notnullcreation:Date =>=>=> RelationalSchema.Column>> baseentity.//@notnullcreation;
ClassDiagram.Attribut>> Account.serialversionuid:long =>=>=> RelationalSchema.Column>> account.serialversionuid;
ClassDiagram.Attribut>> Account.findall:String =>=>=> RelationalSchema.Column>> account.findall;
ClassDiagram.Attribut>> Account.iban:String =>=>=> RelationalSchema.Column>> account.iban;
ClassDiagram.Attribut>> Account.amount:Double =>=>=> RelationalSchema.Column>> account.amount;
ClassDiagram.Attribut>> Role.findallroles:String =>=>=> RelationalSchema.Column>> role.findallroles;
ClassDiagram.Attribut>> Role.name:String =>=>=> RelationalSchema.Column>> role.name;
ClassDiagram.Attribut>> Customer.serialversionuid:long =>=>=> RelationalSchema.Column>> customer.serialversionuid;
ClassDiagram.Attribut>> Customer.findall:String =>=>=> RelationalSchema.Column>> customer.findall;
ClassDiagram.Attribut>> Customer.firstname:String =>=>=> RelationalSchema.Column>> customer.firstname;
ClassDiagram.Attribut>> Customer.lastname:String =>=>=> RelationalSchema.Column>> customer.lastname;
ClassDiagram.Attribut>> Customer.login:String =>=>=> RelationalSchema.Column>> customer.login;
ClassDiagram.Attribut>> Customer.password:String =>=>=> RelationalSchema.Column>> customer.password;
ClassDiagram.Attribut>> Currency.findallcurrency:String =>=>=> RelationalSchema.Column>> currency.findallcurrency;
ClassDiagram.Attribut>> Currency.symbol:String =>=>=> RelationalSchema.Column>> currency.symbol;
ClassDiagram.Attribut>> Currency.exchangerate:Double =>=>=> RelationalSchema.Column>> currency.exchangerate;
Many-To-One relationship from ClassDiagram.Class>>Transaction  to ClassDiagram.Class>>account represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Device  to ClassDiagram.Class>>customer represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Account  to ClassDiagram.Class>>customer represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Account  to ClassDiagram.Class>>currency represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Customer  to ClassDiagram.Class>>role represented by ClassDiagram.Atrribute>>GeneratedName;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>BaseEntity  ;
