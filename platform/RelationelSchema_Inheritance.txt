
dashboardentity(GeneratedName:ObjectMapper, assignedcustomerstype:JavaType, tenantid:UUID, title:String, searchtext:String, assignedcustomers:String, configuration:JsonNode);

usercredentialsentity(userid:UUID, enabled:boolean, password:String, activatetoken:String, resettoken:String);

relationentity(fromid:UUID [PK], fromtype:String [PK], toid:UUID [PK], totype:String [PK], relationtypegroup:String [PK], relationtype:String [PK], additionalinfo:JsonNode);

devicecredentialsentity(deviceid:UUID, credentialstype:DeviceCredentialsType, credentialsid:String, credentialsvalue:String);

alarmentity();

rulenodestateentity(rulenodeid:UUID, entitytype:String, entityid:UUID, statedata:String);

rulechainentity(tenantid:UUID, name:String, searchtext:String, firstrulenodeid:UUID, root:boolean, debugmode:boolean, configuration:JsonNode, additionalinfo:JsonNode);

attributekventity(id:AttributeKvCompositeKey, value:Boolean, strvalue:String, value:Long, value:Double, jsonvalue:String, lastupdatets:Long);

auditlogentity(tenantid:UUID, customerid:UUID, GeneratedName:EntityType, entityid:UUID, entityname:String, userid:UUID, username:String, GeneratedName:ActionType, actiondata:JsonNode, GeneratedName:ActionStatus, actionfailuredetails:String);

oauth2clientregistrationinfoentity();

widgetsbundleentity(tenantid:UUID, alias:String, title:String, searchtext:String);

apiusagestateentity(tenantid:UUID, entitytype:String, entityid:UUID, transportstate:ApiUsageStateValue, dbstoragestate:ApiUsageStateValue, reexecstate:ApiUsageStateValue, jsexecstate:ApiUsageStateValue, emailexecstate:ApiUsageStateValue, smsexecstate:ApiUsageStateValue);

deviceentity();

rulenodeentity(rulechainid:UUID, type:String, name:String, searchtext:String, configuration:JsonNode, additionalinfo:JsonNode, debugmode:boolean);

deviceprofileentity(tenantid:UUID, name:String, type:DeviceProfileType, transporttype:DeviceTransportType, provisiontype:DeviceProfileProvisionType, description:String, searchtext:String, isdefault:boolean, defaultrulechainid:UUID, defaultqueuename:String, profiledata:JsonNode, provisiondevicekey:String);

customerentity(tenantid:UUID, title:String, searchtext:String, country:String, state:String, city:String, address:String, address2:String, zip:String, phone:String, email:String, additionalinfo:JsonNode);

componentdescriptorentity(type:ComponentType, scope:ComponentScope, name:String, clazz:String, configurationdescriptor:JsonNode, actions:String, searchtext:String);

evententity(tenantid:UUID, GeneratedName:EntityType, entityid:UUID, eventtype:String, eventuid:String, body:JsonNode, ts:long);

assetentity();

tenantentity();

entityviewentity();

userentity(tenantid:UUID, customerid:UUID, GeneratedName:Authority, email:String, searchtext:String, firstname:String, lastname:String, additionalinfo:JsonNode);

dashboardinfoentity(GeneratedName:ObjectMapper, assignedcustomerstype:JavaType, tenantid:UUID, title:String, searchtext:String, assignedcustomers:String);

adminsettingsentity(key:String, jsonvalue:JsonNode);

tenantprofileentity(name:String, description:String, searchtext:String, isdefault:boolean, isolatedtbcore:boolean, isolatedtbruleengine:boolean, profiledata:JsonNode);

widgettypeentity(tenantid:UUID, bundlealias:String, alias:String, name:String, descriptor:JsonNode);

oauth2clientregistrationtemplateentity(providerid:String, authorizationuri:String, tokenuri:String, scope:String, userinfouri:String, usernameattributename:String, jwkseturi:String, clientauthenticationmethod:String, type:MapperType, emailattributekey:String, firstnameattributekey:String, lastnameattributekey:String, tenantnamestrategy:TenantNameStrategyType, tenantnamepattern:String, customernamepattern:String, defaultdashboardname:String, alwaysfullscreen:Boolean, comment:String, loginbuttonicon:String, loginbuttonlabel:String, helplink:String, additionalinfo:JsonNode);

oauth2clientregistrationentity(clientregistrationinfoid:UUID, domainname:String, domainscheme:SchemeType);

tskvdictionary(key:String [PK], keyid:int);

tskvlatestentity();

tskventity();

timescaletskventity();


** PROGRAM TYPE: JPA+Hibernate(Hybrid)