superhero(id:long [PK], name:String, superpower:String);

attachmentgrouppostintopic();

attachmentgroupintopic();

userrole();

concreteproduct(id:long [PK]);

shop(id:long [PK], name:String);

hotel(id:int [PK], roomsbyname:Map);

house(roomsbyname:Map<String,Room>);

cleaner(id:int [PK], name:String);

testentity(id:long [PK]);

hominidae(elligence:int);

house(id:Long [PK]);

mammals(id:String [PK], nbrofmammals:String);

room(id:Integer [PK]);

product(transientnonpersistent:String, nonpersistent2:String, id:long [PK], test:int, description:String, price:BigDecimal, GeneratedName:Shop #FK to(Shop));

shop(id:long [PK], name:String);

user(id:Long [PK], name:String);

customer(orders:Set<Order>, nonpersistent:String, goodpayer:boolean);

human(nonpersistent:int, name:String);

hotelroom(GeneratedName:Hotel);

item(id:long [PK], quantity:int, GeneratedName:Product, GeneratedName:Order, GeneratedName:Detail);

house(id:long [PK], GeneratedName:Address);

printjob(id:long [PK], data:byte);

printer(id:long [PK]);

person(id:PersonId, address:String);

testentity(GeneratedName:Ref, name:String);

blobentity(id:String [PK], GeneratedName:Blob);

child(id:Integer [PK], name:String);

parent(id:Integer [PK], name:String, siblings:Relatives<Child>);

location(id:long [PK], description:String, //implicitlyembedded:Coordinates, GeneratedName:ZeroCoordinates);

rentalcompany(id:long [PK], name:String);

person(id:long [PK], name:String);

rentalcar(company:RentalCompany, hired:CURRENTLY_HIRED, chassisnumber:Character, GeneratedName:Insurance);

vehicle(//defaultaccesstypeforclassesinthishierarchyisfieldid:long [PK]);

stuff();

myentity(emb:EmbeddableEntity);

foo(id:long [PK]);

dummy(id:long [PK]);

dummy(id:long [PK]);

baseentity(id:Integer [PK], name:String);

suba(street:String);

subb(street:String);

customer();

user(id:Long [PK], name:String);

person(name:String);

house(id:Long [PK]);

jetplane(jets:Integer);

testentity(id:long [PK]);

contactdetails(id:long [PK], GeneratedName:PhoneNumber);

image(name:String, data:byte);

temperaturesamples(samples:Integer);

hashentity(id:long [PK]);

employeewithrawtype(id:String [PK], name:String);

deskwithrawtype(id:String [PK], name:String);

desk_empl(desk_fk:DeskWithRawType [PK] #FK to DeskWithRawType,emplo_fk:collection [PK] #FK to collection);

defaultpackageentity(id:long [PK]);

plane(id:Long [PK], planetype: String);



** PROGRAM TYPE: JPA+Hibernate(Hybrid)