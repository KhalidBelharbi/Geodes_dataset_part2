ClassDiagram.Class>> Address =>=>=> RelationalSchema.Table>> address;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> test =>=>=> RelationalSchema.Table>> test;
ClassDiagram.Class>> position =>=>=> RelationalSchema.Table>> position;
ClassDiagram.Class>> company =>=>=> RelationalSchema.Table>> company;
ClassDiagram.Class>> detailInfo =>=>=> RelationalSchema.Table>> detailinfo;
ClassDiagram.Class>> department =>=>=> RelationalSchema.Table>> department;
ClassDiagram.Class>> employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Attribut>> Address.serialversionuid:long =>=>=> RelationalSchema.Column>> address.serialversionuid;
ClassDiagram.Attribut>> Address.addressid:Integer =>=>=> RelationalSchema.Column>> address.addressid PRIMARY KEY;
ClassDiagram.Attribut>> Address.street:String =>=>=> RelationalSchema.Column>> address.street;
ClassDiagram.Attribut>> Address.city:String =>=>=> RelationalSchema.Column>> address.city;
ClassDiagram.Attribut>> User.serialversionuid:long =>=>=> RelationalSchema.Column>> user.serialversionuid;
ClassDiagram.Attribut>> User./***:指定表的主键*@generatedvalue:定义了标识字段生成方式*/userid:Integer =>=>=> RelationalSchema.Column>> user./***:指定表的主键*@generatedvalue:定义了标识字段生成方式*/userid PRIMARY KEY;
ClassDiagram.Attribut>> User./***@column:定义了将成员属性映射到关系表中的字段名称*/username:String =>=>=> RelationalSchema.Column>> user./***@column:定义了将成员属性映射到关系表中的字段名称*/username;
ClassDiagram.Attribut>> test.serialversionuid:long =>=>=> RelationalSchema.Column>> test.serialversionuid;
ClassDiagram.Attribut>> test.teid:long =>=>=> RelationalSchema.Column>> test.teid PRIMARY KEY;
ClassDiagram.Attribut>> test.stid:long =>=>=> RelationalSchema.Column>> test.stid PRIMARY KEY;
ClassDiagram.Attribut>> position.posid:long =>=>=> RelationalSchema.Column>> position.posid PRIMARY KEY;
ClassDiagram.Attribut>> position.posname:String =>=>=> RelationalSchema.Column>> position.posname;
ClassDiagram.Attribut>> company.comid:long =>=>=> RelationalSchema.Column>> company.comid PRIMARY KEY;
ClassDiagram.Attribut>> company.comname:String =>=>=> RelationalSchema.Column>> company.comname;
ClassDiagram.Attribut>> detailInfo.detid:long =>=>=> RelationalSchema.Column>> detailinfo.detid PRIMARY KEY;
ClassDiagram.Attribut>> detailInfo.detname:String =>=>=> RelationalSchema.Column>> detailinfo.detname;
ClassDiagram.Attribut>> department.depid:long =>=>=> RelationalSchema.Column>> department.depid PRIMARY KEY;
ClassDiagram.Attribut>> department.depname:String =>=>=> RelationalSchema.Column>> department.depname;
ClassDiagram.Attribut>> employee.empid:long =>=>=> RelationalSchema.Column>> employee.empid PRIMARY KEY;
ClassDiagram.Attribut>> employee.empname:String =>=>=> RelationalSchema.Column>> employee.empname;
One-To-One relationship between ClassDiagram.Class>>Address  to ClassDiagram.Class>>user represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>User  to ClassDiagram.Class>>address represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>company  to ClassDiagram.Class>>List<department>;
One-To-One relationship between ClassDiagram.Class>>detailInfo  to ClassDiagram.Class>>employee represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>department  to ClassDiagram.Class>>company represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>department  to ClassDiagram.Class>>List<employee>;
One-To-One relationship between ClassDiagram.Class>>employee  to ClassDiagram.Class>>detailinfo represented by ClassDiagram.Atrribute>>//mappedby;
Many-To-One relationship from ClassDiagram.Class>>employee  to ClassDiagram.Class>>department represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-Many relationship between ClassDiagram.Class>>employee  and ClassDiagram.Class>>list<position>: t_em_pos(em_id:employee [PK] #FK to employee,em_id:list<position> [PK] #FK to list<position>);
