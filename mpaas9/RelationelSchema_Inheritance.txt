
http(serialversionuid:long, name:String, value:String, unit:String, seq:Long);

cert(serialversionuid:long, //域名domain:String, pem:String, key:String, //@initvalue("0")//获取方式0申请证书1手动上传type:Integer, //生成时间maketime:Long, //@initvalue("0")//自动续签autorenew:Integer, pemstr:String, keystr:String, dnstype:String, dpid:String, dpkey:String, alikey:String, alisecret:String);

basic(serialversionuid:long, name:String, value:String, seq:Long);

upstream(serialversionuid:long, name:String, //负载策略tactics:String, //代理类型//@initvalue("0")//0http1tcpproxytype:Integer, //@initvalue("0")monitor:Integer);

location(serialversionuid:long, serverid:String, //监控路径path:String, //0http1root2负载均衡3空白type:Integer, //额外参数locationparamjson:String, //http代理value:String, //负载均衡代理upstreamid:String, upstreampath:String, //静态页面代理rootpath:String, rootpage:String, roottype:String, //是否设置header参数header:Integer);

upstreamserver(serialversionuid:long, upstreamid:String, server:String, port:Integer, weight:Integer, //失败超时failtimeout:Integer, //失败次数maxfails:Integer, //状态策略status:String, //监控状态0不通1monitorstatus:Integer);

setting(serialversionuid:long, key:String, value:String);

www(serialversionuid:long, dir:String, name:String);

templateparam(serialversionuid:long, templateid:String, paramid:String);

param(serialversionuid:long, serverid:String, locationid:String, upstreamid:String, templateid:String, name:String, value:String, templatevalue:String, templatename:String);

loginfo(serialversionuid:long, remoteaddr:String, remoteuser:String, timelocal:String, request:String, httphost:String, status:String, requestlength:String, bodybytesdent:String, httpreferer:String, httpuseragent:String, requesttime:String, upstreamresponsetime:String, hour:String, minute:String, second:String);

credit(serialversionuid:long, key:String);

stream(serialversionuid:long, name:String, value:String, seq:Long);

remote(serialversionuid:long, protocol:String, ip:String, port:Integer, //0掉线1在线status:Integer, creditkey:String, name:String, pass:String, version:String, system:String, descr:String, monitor:Integer, parentid:String, //0服务器1分组type:Integer, //0未运行1在运行2未知nginx:Integer);

server(serialversionuid:long, servername:String, listen:String, def:Integer, //@initvalue("0")//0否1是rewrite:Integer, //@initvalue("0")//0否1是ssl:Integer, //@initvalue("0")//0否1是http2:Integer, pem:String, key:String, //代理类型//@initvalue("0")//0http1tcpproxytype:Integer, proxyupstreamid:String, pemstr:String, keystr:String, //@initvalue("true")//是否启用enable:Boolean);

template(serialversionuid:long, name:String);

log(serialversionuid:long, //@singleindexdate:String, json:String, path:String);


** PROGRAM TYPE: JPA+Hibernate(Hybrid)