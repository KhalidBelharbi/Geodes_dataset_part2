ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> Account =>=>=> RelationalSchema.Table>> account;
ClassDiagram.Class>> Blog =>=>=> RelationalSchema.Table>> blog;
ClassDiagram.Attribut>> User.id:int =>=>=> RelationalSchema.Column>> user.id PRIMARY KEY;
ClassDiagram.Attribut>> User.emailaddress:String =>=>=> RelationalSchema.Column>> user.emailaddress;
ClassDiagram.Attribut>> User.password:String =>=>=> RelationalSchema.Column>> user.password;
ClassDiagram.Attribut>> User.name:String =>=>=> RelationalSchema.Column>> user.name;
ClassDiagram.Attribut>> User.createdby:int =>=>=> RelationalSchema.Column>> user.createdby;
ClassDiagram.Attribut>> User.createdon:Timestamp =>=>=> RelationalSchema.Column>> user.createdon;
ClassDiagram.Attribut>> Account.id:int =>=>=> RelationalSchema.Column>> account.id PRIMARY KEY;
ClassDiagram.Attribut>> Account.code:String =>=>=> RelationalSchema.Column>> account.code;
ClassDiagram.Attribut>> Account.createdby:int =>=>=> RelationalSchema.Column>> account.createdby;
ClassDiagram.Attribut>> Account.createdon:Timestamp =>=>=> RelationalSchema.Column>> account.createdon;
ClassDiagram.Attribut>> Blog.id:int =>=>=> RelationalSchema.Column>> blog.id PRIMARY KEY;
ClassDiagram.Attribut>> Blog.title:String =>=>=> RelationalSchema.Column>> blog.title;
ClassDiagram.Attribut>> Blog.content:String =>=>=> RelationalSchema.Column>> blog.content;
ClassDiagram.Attribut>> Blog.createdon:Timestamp =>=>=> RelationalSchema.Column>> blog.createdon;
One-To-One relationship between ClassDiagram.Class>>User  to ClassDiagram.Class>>account represented by ClassDiagram.Atrribute>>GeneratedName;
