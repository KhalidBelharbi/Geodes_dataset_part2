simplexmloverriddentest();

explicitlynamedconverterclassestest();

xmlwithexplicitconvertannotationstest(//note:essentiallythesameexacttestasexplicitdateconverterstest,butherewewillmixannotationsandxmlcallstoconverter:int);

explicitenumconverterstest(callstoconverter:int);

collectioncompositeelementconversiontest();

querytest(salary:float);

basicjodatimeconversiontest(callstoconverter:int);

simpleconvertannotationtest(callstoconverter:int);

mapelementconversiontest();

simpleconvertsannotationtest(callstoconverter:int);

explicitdateconverterstest(//note:initiallyunabletoreproducethereportedproblemcallstoconverter:int);

simpleembeddableoverriddenconvertertest();

collectionelementconversiontest();

mapkeyconversiontest();

simpleoverriddenconvertertest();

columnwithexplicitreferencetoprimarytabletest();

phone(id:Integer [PK], brandname:String, price:float);

author(id:Integer [PK]);

umbrella(id:PK, size:int);

sickness(begintime:Date, type:String [PK], classification:String [PK]);

article(id:Integer [PK], GeneratedName:Author #FK to(Author));

book(id:Long [PK], name:String);

entitywithcompositeid(id:CompositeId, description:String);

feature(id:Long [PK], GeneratedName:Product #FK to(Product), name:String);

product(id:Long [PK], name:String);

a(id:Integer [PK], GeneratedName:B);

tranchenmodell(id:Long [PK], GeneratedName:Preisregelung #FK to(Preisregelung), GeneratedName:X #FK to(X));

x(id:Long [PK], GeneratedName:Tranchenmodell #FK to(A));

tranche(id:Long [PK], GeneratedName:Tranchenmodell #FK to(A), GeneratedName:Y #FK to(Y));

preisregelung(id:Long [PK], GeneratedName:Tranchenmodell #FK to(A));

y(id:Long [PK], GeneratedName:Tranche #FK to(A));

b(id:Integer [PK], GeneratedName:A);

cable(id:Integer [PK], name:String);

bell(id:Integer [PK]);



constructorresultnativequerytest();

scalarresultnativequerytest();

contractor(company:String);

datetimeparametertest(nowcal:GregorianCalendar, now:Date);

employee(id:Long [PK], name:String, /*@embedded@attributeoverrides({@attributeoverride(name:Address, /*@embedded@attributeoverrides({@attributeoverride(name:Address);

employee(id:Long [PK], name:String, /*@embedded@attributeoverrides({@attributeoverride(name:Address, /*@embedded@attributeoverrides({@attributeoverride(name:Address);

article(id:Integer [PK], name:String, next:Article);

article(id:Integer [PK], name:String, next:Article);

account(id:Long [PK], name:String, regioncode:String);

distributor(id:Integer [PK], name:String);

datetimeparametertest(entitymanagerfactory:HibernateEntityManagerFactory, nowcal:GregorianCalendar, now:Date);

storedprocedureresultsetmappingtest();

user(id:int [PK], name:String);

musician(id:Integer [PK], name:String, favourite:Music);

instrument(id:int [PK], name:String, GeneratedName:Type);

music(id:Integer [PK], version:Integer, name:String);

animal(name:String, id:Long [PK]);

workload(id:Integer [PK], name:String, load:Integer);

mammal(mamalnbr:int);

removeorderingtest();

reptile(temperature:float);

flower(id:Long [PK], name:String);

deskwithrawtype(id:String [PK], name:String);

desk_empl(desk_fk:DeskWithRawType [PK] #FK to DeskWithRawType,empl_fk:collection [PK] #FK to collection);

fridge(id:Long [PK], brand:String, temperature:int);

dog(name:String);

cat(nickname:String);

withgenericcollection(id:String [PK], d:double, parent:WithGenericCollection<? extends Object> #FK to(X));

house(GeneratedName:Key, GeneratedName:Address, rooms:Set<Room>, roomsbyname:Map<String,Room>, roomsbysize:List<Room>);

simpleperson(ssn:String [PK] #FK to Person, ssn:String [PK]);

joinedmanytooneowner(id:Long [PK], GeneratedName:House);

person(firstname:String [PK], lastname:String [PK], age:Short);

fooditem(id:Long [PK], name:String, version:Long);

simplemedicalhistory(lastup:Date, patient:SimplePerson [PK] #FK to(SimplePerson));

feline(color:String);

employeewithrawtype(id:String [PK], name:String);

parent(id:Integer [PK], name:String, siblings:Relatives<Child>);

child(id:Integer [PK], name:String);

giant(height:long);

garden(id:Long [PK], name:String);

basiccditest(count:int);

book(id:Integer [PK], name:String, version:Integer);

fruit(id:Long [PK]);

strawberry(size:Long);

dress(name:String [PK]);

music(id:Integer [PK], name:String, version:Integer);

colony(id:Long [PK]);

empire(id:Long [PK]);

cat(lives:int);

c2(id:int [PK], GeneratedName:B2 #FK to(B));

b2(id:int [PK], GeneratedName:A #FK to(A));

b3(id:int [PK], GeneratedName:A #FK to(A));

b1(id:int [PK], GeneratedName:A #FK to(A));

c1(id:int [PK], GeneratedName:B1 #FK to(B));

a(id:int [PK], name:String);

b4(id:int [PK], GeneratedName:A #FK to(A));

dog(numbones:int);

pet(id:int [PK], name:String, weight:double);

hoarder(id:Long [PK], name:String, favorite:Item #FK to(Item));

item(id:Long [PK], version:int, name:String, GeneratedName:Category #FK to(A));

competition(id:Integer [PK]);

competition_competitor(Competition_ID:Competition [PK] #FK to Competition,Pet_ID:Pet [PK] #FK to Pet);

category(id:Long [PK], name:String, example:Item #FK to(Item), version:int);

mail(id:Long [PK], from:String);

race(id:Integer [PK], name:String);

competitor(id:Integer [PK], name:String);

decorate(id:int [PK], name:String, GeneratedName:Pet);

nocacheableannotationentity(id:Long [PK], name:String);

explicitlynoncacheableentity(id:Long [PK], name:String);

explicitlycacheableentity(id:Long [PK], name:String);

order(id:int [PK], total:int);

simpleentity(id:Long [PK], name:String);

temporaltypetest();

item(name:String [PK], descr:String);

wallet(serial:String [PK], model:String, marketentrance:Date, brand:String);

kitchen(id:Long [PK], GeneratedName:Oven #FK to(Oven));

incident(id:String [PK], GeneratedName:IncidentStatus #FK to(A));

oven(id:Long [PK], GeneratedName:Kitchen #FK to(Kitchen));

incidentstatus(id:String [PK], GeneratedName:Incident #FK to(Incident));

cupholder(//(strategy:Integer [PK], radius:BigDecimal);

pasta(id:Integer [PK], type:String);

address(id:String [PK], street:String, city:String, state:String, zip:String);

alias(id:String [PK], alias:String, noop:Customer);

fks_anoop_cnoop(fk2_for_alias_table:Alias [PK] #FK to Alias,fk8_for_customer_table:collection<customer> [PK] #FK to collection<customer>);fks_alias_customer(fk_for_alias_table:Alias [PK] #FK to Alias,fk_for_customer_table:collection<customer> [PK] #FK to collection<customer>);

versionedentity(id:String [PK], name:String, version:int);

product(id:String [PK], name:String, price:double, rating:float, quantity:int, partnumber:long, some:BigInteger, some:BigDecimal, warehouse:String, GeneratedName:ShelfLife);

spouse(id:String [PK], first:String, maiden:String, last:String, snumber:String, GeneratedName:Info, GeneratedName:Customer);

customer(id:String [PK], name:String, age:Integer, home:Address #FK to(A), work:Address #FK to(A), GeneratedName:Country, GeneratedName:Spouse);

order(id:String [PK], totalprice:double, GeneratedName:Customer, GeneratedName:CreditCard, sample:LineItem, domen:char, number:byte);

info(id:String [PK], street:String, city:String, state:String, zip:String, GeneratedName:Spouse);

somemappedsuperclasssubclass(thedata:String);

lineitem(id:String [PK], quantity:int, GeneratedName:Order, GeneratedName:Product);

mapentity(key:String [PK], localized:Map<String,MapEntityLocal>);

phone(id:String [PK], area:String, number:String, GeneratedName:Address, types:Set<Type>);

thingwithquantity(quantity:int);

thing(id:String [PK], name:String);

mixedidandidclasshandling();

creditcard(id:String [PK], number:String, type:String, expires:String, approved:boolean, balance:double, GeneratedName:Order, GeneratedName:Customer);

cat(log:Logger, //usedforassertionsids:List, //usedforassertionspostversion:int, id:Integer [PK], name:String, ofbirth:Date, length:long, lastup:Date, manualversion:int);

kitten(id:Integer [PK], name:String);

imagereader(id:long [PK], image:Blob, text:Clob);

lockable(id:Integer [PK], version:Integer, name:String);

querylockingtest();

unversionedlock(id:Integer [PK], name:String);

lock(id:Integer [PK], version:Integer, name:String);

datapoint(id:long [PK]);

unlisteddatapoint(id:long [PK]);

parent(id:Integer [PK]);

child(id:Integer [PK], daddy:Parent #FK to(A));

entitygraphusingfetchgraphtest();

manager();

entitygraphloadplanbuildertest();

basicentitygraphtests();

location(id:long [PK], address:String, zip:int);

person(id:Long [PK]);

person(id:Long [PK]);

employee(id:Long [PK], name:String, salary:double);

company(id:long [PK], GeneratedName:Location #FK to(A), markets:Set<Market>, phonenumbers:Set<String>);

employee(id:long [PK]);

employee_A(employeeID:employee [PK] #FK to employee,AID:A [PK] #FK to A);employee_Y(employeeID:employee [PK] #FK to employee,YID:Y [PK] #FK to Y);

entitygraphtest();

wall(id:Long [PK], width:long, height:long, color:String, left:Wall #FK to(A), right:Wall #FK to(A));

payment(id:Long [PK], amount:BigDecimal, GeneratedName:Date);

elephant();

basicsimplecasetest();

user(id:Long [PK], roles:Set<Role>);

client(id:int [PK], GeneratedName:Name);

alias(id:Long [PK], GeneratedName:Name, source:String);

animal(id:Long [PK], mother:Animal #FK to(A), father:Animal #FK to(A), name:String);

human();

multitypedbasicattributesentity(id:Long [PK], somes:byte, somewrappeds:Byte);

widget(code:String [PK], division:String [PK], cost:Double);

tool(cost:Double);

product(description:String);

product(id:Long [PK]);

productattribute(owner:String [PK]);

company(id:Long [PK]);

carpet(id:Integer [PK], country:String);

applicationserver(id:Integer [PK], name:String, GeneratedName:Version);

money(id:Integer [PK]);

applicationserver1(id:Integer [PK], name:String, version:Version1);

money1(id:Integer [PK]);

applicationserver(id:Integer [PK], name:String, GeneratedName:Version);

money(id:Integer [PK]);

scooter(model:String [PK], speed:Long);

caipirinha(id:Integer [PK], name:String);

bug(id:Long [PK], subject:String, comment:String);

morito(id:Integer [PK], power:String);

bug(id:Long [PK], subject:String, comment:String);

washer();

troop2(/*fails:*/id:Integer [PK], name:String);

troop(id:Integer [PK], name:String);

extractiondocument(id:Long [PK], body:byte, documentinfo:ExtractionDocumentInfo #FK to(A));

conference(id:Long [PK], GeneratedName:Date, extractiondocument:ExtractionDocumentInfo #FK to(A));

bottom(id:Long [PK], GeneratedName:Middle #FK to(middle));

top(id:Long [PK]);

middle(id:Long [PK], GeneratedName:Top #FK to(top), GeneratedName:Bottom #FK to(B));

teacher(id:Long [PK], name:String, favorite:Student #FK to(student));

son(id:Integer [PK], GeneratedName:Parent #FK to(A));

grandson(id:Integer [PK], parent:Son #FK to(son));

soldier2(id:Integer [PK], name:String, troop:Troop2 #FK to(troop2));

extractiondocumentinfo(id:Long [PK], lastmodified:Date, GeneratedName:Conference);

student(id:Long [PK], name:String, primary:Teacher #FK to(A), favorite:Teacher #FK to(A));

soldier(id:Integer [PK], name:String, GeneratedName:Troop);

parent(id:Integer [PK]);

author(id:Long [PK]);

detachandcontainstest();

song(id:Long [PK], GeneratedName:Author #FK to(Author));

mergewithtransientnoncascadedassociationtest();

translation(id:Integer [PK], into:String);

remotecontrol(id:Integer [PK], creation:Date);

communicationsystem(communication:int, isfirst:boolean, islast:boolean);

television(id:Integer [PK], control:RemoteControl #FK to(remotecontrol), name:String);

customer(salesperson:Employee #FK to(Y), comments:String);

rythm(id:Integer [PK]);

videosystem(transientcounter:int);

plant(id:String [PK], name:String);

person(id:long [PK], name:String, address:String, zip:String, country:String, sex:char);

employee(title:String, salary:BigDecimal, manager:Employee #FK to(Y));

countrychecker();

item(name:String [PK], descr:String);

employee(id:Long [PK], name:String, salary:Double, Employee: String);



** PROGRAM TYPE: JPA+Hibernate(Hybrid)