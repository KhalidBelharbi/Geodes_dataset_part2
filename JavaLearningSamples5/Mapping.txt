ClassDiagram.Class>> Album =>=>=> RelationalSchema.Table>> album;
ClassDiagram.Class>> Book =>=>=> RelationalSchema.Table>> book;
ClassDiagram.Class>> BookCategory =>=>=> RelationalSchema.Table>> bookcategory;
ClassDiagram.Class>> Message =>=>=> RelationalSchema.Table>> message;
ClassDiagram.Class>> RockGroups =>=>=> RelationalSchema.Table>> rockgroups;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> SongPlayers =>=>=> RelationalSchema.Table>> songplayers;
ClassDiagram.Class>> People =>=>=> RelationalSchema.Table>> people;
ClassDiagram.Attribut>> Album.id:long =>=>=> RelationalSchema.Column>> album.id PRIMARY KEY;
ClassDiagram.Attribut>> Album.album:String =>=>=> RelationalSchema.Column>> album.album;
ClassDiagram.Attribut>> Book.id:int =>=>=> RelationalSchema.Column>> book.id PRIMARY KEY;
ClassDiagram.Attribut>> Book.name:String =>=>=> RelationalSchema.Column>> book.name;
ClassDiagram.Attribut>> BookCategory.id:int =>=>=> RelationalSchema.Column>> bookcategory.id PRIMARY KEY;
ClassDiagram.Attribut>> BookCategory.name:String =>=>=> RelationalSchema.Column>> bookcategory.name;
ClassDiagram.Attribut>> Message.id:Integer =>=>=> RelationalSchema.Column>> message.id PRIMARY KEY;
ClassDiagram.Attribut>> Message.text:String =>=>=> RelationalSchema.Column>> message.text;
ClassDiagram.Attribut>> Message.tag:String =>=>=> RelationalSchema.Column>> message.tag;
ClassDiagram.Attribut>> RockGroups.id:long =>=>=> RelationalSchema.Column>> rockgroups.id PRIMARY KEY;
ClassDiagram.Attribut>> RockGroups.rockgroup:String =>=>=> RelationalSchema.Column>> rockgroups.rockgroup;
ClassDiagram.Attribut>> User.id:Long =>=>=> RelationalSchema.Column>> user.id PRIMARY KEY;
ClassDiagram.Attribut>> User.username:String =>=>=> RelationalSchema.Column>> user.username;
ClassDiagram.Attribut>> User.password:String =>=>=> RelationalSchema.Column>> user.password;
ClassDiagram.Attribut>> User.active:boolean =>=>=> RelationalSchema.Column>> user.active;
ClassDiagram.Attribut>> User.roles:Set<Role> =>=>=> RelationalSchema.Column>> user.roles;
ClassDiagram.Attribut>> SongPlayers.id:long =>=>=> RelationalSchema.Column>> songplayers.id PRIMARY KEY;
ClassDiagram.Attribut>> SongPlayers.song:String =>=>=> RelationalSchema.Column>> songplayers.song;
ClassDiagram.Attribut>> SongPlayers.//укомпозицииодинкомпозиторcomposer:String =>=>=> RelationalSchema.Column>> songplayers.//укомпозицииодинкомпозиторcomposer;
ClassDiagram.Attribut>> SongPlayers.//иодинавторстиховpoet:String =>=>=> RelationalSchema.Column>> songplayers.//иодинавторстиховpoet;
ClassDiagram.Attribut>> SongPlayers.//песнясодержитсявальбомеalbum:String =>=>=> RelationalSchema.Column>> songplayers.//песнясодержитсявальбомеalbum;
ClassDiagram.Attribut>> People.id:long =>=>=> RelationalSchema.Column>> people.id PRIMARY KEY;
ClassDiagram.Attribut>> People.human:String =>=>=> RelationalSchema.Column>> people.human;
One-To-Many relationship from ClassDiagram.Class>>Album  to ClassDiagram.Class>>List<SongPlayers>;
Many-To-One relationship from ClassDiagram.Class>>Book  to ClassDiagram.Class>>Book represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>BookCategory  to ClassDiagram.Class>>Set<Book>;
Many-To-One relationship from ClassDiagram.Class>>Message  to ClassDiagram.Class>>user represented by ClassDiagram.Atrribute>>author;
list<people>: songplayers_list<people>(songplayersID:songplayers [PK] #FK to songplayers,list<people>ID:list<people> [PK] #FK to list<people>);
Many-To-One relationship from ClassDiagram.Class>>People  to ClassDiagram.Class>>rockgroups represented by ClassDiagram.Atrribute>>//нескольколюдейиграютводнойгруппе;
