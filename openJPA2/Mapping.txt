ClassDiagram.Class>> BEntity =>=>=> RelationalSchema.Table>> bentity;
ClassDiagram.Class>> AEntity =>=>=> RelationalSchema.Table>> aentity;
ClassDiagram.Class>> ChildEntity =>=>=> RelationalSchema.Table>> childentity;
ClassDiagram.Attribut>> BEntity.id:int =>=>=> RelationalSchema.Column>> bentity.id PRIMARY KEY;
ClassDiagram.Attribut>> BEntity.name:String =>=>=> RelationalSchema.Column>> bentity.name;
ClassDiagram.Attribut>> BEntity.bool:boolean =>=>=> RelationalSchema.Column>> bentity.bool;
ClassDiagram.Attribut>> BEntity.desc:String =>=>=> RelationalSchema.Column>> bentity.desc;
ClassDiagram.Attribut>> AEntity.id:int =>=>=> RelationalSchema.Column>> aentity.id PRIMARY KEY;
ClassDiagram.Attribut>> AEntity.name:String =>=>=> RelationalSchema.Column>> aentity.name;
ClassDiagram.Attribut>> AEntity.desc:String =>=>=> RelationalSchema.Column>> aentity.desc;
ClassDiagram.Attribut>> AEntity.checked:boolean =>=>=> RelationalSchema.Column>> aentity.checked;
ClassDiagram.Attribut>> AEntity.extrainfo:EEntity =>=>=> RelationalSchema.Column>> aentity.extrainfo;
ClassDiagram.Attribut>> ChildEntity.childid:int =>=>=> RelationalSchema.Column>> childentity.childid;
ClassDiagram.Attribut>> ChildEntity.childname:String =>=>=> RelationalSchema.Column>> childentity.childname;
ClassDiagram.Attribut>> ChildEntity.childdesc:String =>=>=> RelationalSchema.Column>> childentity.childdesc;
Many-To-One relationship from ClassDiagram.Class>>AEntity  to ClassDiagram.Class>>bentity represented by ClassDiagram.Atrribute>>referred;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>BEntity  ;
