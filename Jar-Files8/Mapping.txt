ClassDiagram.Class>> ClassPropertyHolder =>=>=> RelationalSchema.Table>> classpropertyholder;
ClassDiagram.Class>> AnnotationBinder =>=>=> RelationalSchema.Table>> annotationbinder;
ClassDiagram.Class>> ResultsetMappingSecondPass =>=>=> RelationalSchema.Table>> resultsetmappingsecondpass;
ClassDiagram.Class>> EntityBinder =>=>=> RelationalSchema.Table>> entitybinder;
ClassDiagram.Class>> DefaultEnhancementContext =>=>=> RelationalSchema.Table>> defaultenhancementcontext;
ClassDiagram.Class>> JaccIntegratorTest =>=>=> RelationalSchema.Table>> jaccintegratortest;
ClassDiagram.Class>> NativeQueryWithParenthesesTest =>=>=> RelationalSchema.Table>> nativequerywithparenthesestest;
ClassDiagram.Class>> AliasWithCriterionTest =>=>=> RelationalSchema.Table>> aliaswithcriteriontest;
ClassDiagram.Class>> SearchedCaseExpressionTest =>=>=> RelationalSchema.Table>> searchedcaseexpressiontest;
ClassDiagram.Class>> AnnotationMappingJoinClassTest =>=>=> RelationalSchema.Table>> annotationmappingjoinclasstest;
ClassDiagram.Class>> GetAndIsVariantGetterWithTransientAnnotationTest =>=>=> RelationalSchema.Table>> getandisvariantgetterwithtransientannotationtest;
ClassDiagram.Class>> Item =>=>=> RelationalSchema.Table>> item;
ClassDiagram.Class>> Order =>=>=> RelationalSchema.Table>> order;
ClassDiagram.Class>> GetAndIsVariantGetterTest =>=>=> RelationalSchema.Table>> getandisvariantgettertest;
ClassDiagram.Class>> AnnotationEntity =>=>=> RelationalSchema.Table>> annotationentity;
ClassDiagram.Class>> CustomSqlSchemaResolvingTest =>=>=> RelationalSchema.Table>> customsqlschemaresolvingtest;
ClassDiagram.Class>> CustomSqlSchemaResolvingIdentityTest =>=>=> RelationalSchema.Table>> customsqlschemaresolvingidentitytest;
ClassDiagram.Class>> Order =>=>=> RelationalSchema.Table>> order;
ClassDiagram.Class>> Customer =>=>=> RelationalSchema.Table>> customer;
ClassDiagram.Class>> TestEntity =>=>=> RelationalSchema.Table>> testentity;
ClassDiagram.Class>> ImageReader =>=>=> RelationalSchema.Table>> imagereader;
ClassDiagram.Class>> Distributor =>=>=> RelationalSchema.Table>> distributor;
ClassDiagram.Class>> Account =>=>=> RelationalSchema.Table>> account;
ClassDiagram.Class>> AccountGroup =>=>=> RelationalSchema.Table>> accountgroup;
ClassDiagram.Class>> Wallet =>=>=> RelationalSchema.Table>> wallet;
ClassDiagram.Class>> EntityManagerDeserializationTest =>=>=> RelationalSchema.Table>> entitymanagerdeserializationtest;
ClassDiagram.Class>> Oven =>=>=> RelationalSchema.Table>> oven;
ClassDiagram.Class>> Kitchen =>=>=> RelationalSchema.Table>> kitchen;
ClassDiagram.Class>> IncidentStatus =>=>=> RelationalSchema.Table>> incidentstatus;
ClassDiagram.Class>> Incident =>=>=> RelationalSchema.Table>> incident;
ClassDiagram.Class>> CupHolder =>=>=> RelationalSchema.Table>> cupholder;
ClassDiagram.Class>> TwoPersistenceUnits2LCDisabledEnabled =>=>=> RelationalSchema.Table>> twopersistenceunits2lcdisabledenabled;
ClassDiagram.Class>> DataPoint =>=>=> RelationalSchema.Table>> datapoint;
ClassDiagram.Class>> UnlistedDataPoint =>=>=> RelationalSchema.Table>> unlisteddatapoint;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> JoinedManyToOneOwner =>=>=> RelationalSchema.Table>> joinedmanytooneowner;
ClassDiagram.Class>> Child =>=>=> RelationalSchema.Table>> child;
ClassDiagram.Class>> Giant =>=>=> RelationalSchema.Table>> giant;
ClassDiagram.Class>> DeskWithRawType =>=>=> RelationalSchema.Table>> deskwithrawtype;
ClassDiagram.Class>> Flower =>=>=> RelationalSchema.Table>> flower;
ClassDiagram.Class>> Fridge =>=>=> RelationalSchema.Table>> fridge;
ClassDiagram.Class>> FoodItem =>=>=> RelationalSchema.Table>> fooditem;
ClassDiagram.Class>> Cat =>=>=> RelationalSchema.Table>> cat;
ClassDiagram.Class>> Dog =>=>=> RelationalSchema.Table>> dog;
ClassDiagram.Class>> Parent =>=>=> RelationalSchema.Table>> parent;
ClassDiagram.Class>> House =>=>=> RelationalSchema.Table>> house;
ClassDiagram.Class>> Garden =>=>=> RelationalSchema.Table>> garden;
ClassDiagram.Class>> WithGenericCollection =>=>=> RelationalSchema.Table>> withgenericcollection;
ClassDiagram.Class>> EmployeeWithRawType =>=>=> RelationalSchema.Table>> employeewithrawtype;
ClassDiagram.Class>> SimpleMedicalHistory =>=>=> RelationalSchema.Table>> simplemedicalhistory;
ClassDiagram.Class>> Feline =>=>=> RelationalSchema.Table>> feline;
ClassDiagram.Class>> SimplePerson =>=>=> RelationalSchema.Table>> simpleperson;
ClassDiagram.Class>> Troop =>=>=> RelationalSchema.Table>> troop;
ClassDiagram.Class>> Author =>=>=> RelationalSchema.Table>> author;
ClassDiagram.Class>> Parent =>=>=> RelationalSchema.Table>> parent;
ClassDiagram.Class>> Top =>=>=> RelationalSchema.Table>> top;
ClassDiagram.Class>> Middle =>=>=> RelationalSchema.Table>> middle;
ClassDiagram.Class>> MultiLevelCascadeToStringTest =>=>=> RelationalSchema.Table>> multilevelcascadetostringtest;
ClassDiagram.Class>> Bottom =>=>=> RelationalSchema.Table>> bottom;
ClassDiagram.Class>> Soldier2 =>=>=> RelationalSchema.Table>> soldier2;
ClassDiagram.Class>> ExtractionDocumentInfo =>=>=> RelationalSchema.Table>> extractiondocumentinfo;
ClassDiagram.Class>> DetachAndContainsTest =>=>=> RelationalSchema.Table>> detachandcontainstest;
ClassDiagram.Class>> Teacher =>=>=> RelationalSchema.Table>> teacher;
ClassDiagram.Class>> MergeWithTransientNonCascadedAssociationTest =>=>=> RelationalSchema.Table>> mergewithtransientnoncascadedassociationtest;
ClassDiagram.Class>> ExtractionDocument =>=>=> RelationalSchema.Table>> extractiondocument;
ClassDiagram.Class>> Grandson =>=>=> RelationalSchema.Table>> grandson;
ClassDiagram.Class>> Troop2 =>=>=> RelationalSchema.Table>> troop2;
ClassDiagram.Class>> Conference =>=>=> RelationalSchema.Table>> conference;
ClassDiagram.Class>> Student =>=>=> RelationalSchema.Table>> student;
ClassDiagram.Class>> Soldier =>=>=> RelationalSchema.Table>> soldier;
ClassDiagram.Class>> Song =>=>=> RelationalSchema.Table>> song;
ClassDiagram.Class>> Son =>=>=> RelationalSchema.Table>> son;
ClassDiagram.Class>> MergeTest =>=>=> RelationalSchema.Table>> mergetest;
ClassDiagram.Class>> Item =>=>=> RelationalSchema.Table>> item;
ClassDiagram.Class>> Product =>=>=> RelationalSchema.Table>> product;
ClassDiagram.Class>> Product2 =>=>=> RelationalSchema.Table>> product2;
ClassDiagram.Class>> Product1 =>=>=> RelationalSchema.Table>> product1;
ClassDiagram.Class>> Company =>=>=> RelationalSchema.Table>> company;
ClassDiagram.Class>> Product =>=>=> RelationalSchema.Table>> product;
ClassDiagram.Class>> ProductAttribute =>=>=> RelationalSchema.Table>> productattribute;
ClassDiagram.Class>> Customer =>=>=> RelationalSchema.Table>> customer;
ClassDiagram.Class>> VideoSystem =>=>=> RelationalSchema.Table>> videosystem;
ClassDiagram.Class>> Plant =>=>=> RelationalSchema.Table>> plant;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> Rythm =>=>=> RelationalSchema.Table>> rythm;
ClassDiagram.Class>> RemoteControl =>=>=> RelationalSchema.Table>> remotecontrol;
ClassDiagram.Class>> Television =>=>=> RelationalSchema.Table>> television;
ClassDiagram.Class>> CommunicationSystem =>=>=> RelationalSchema.Table>> communicationsystem;
ClassDiagram.Class>> CountryChecker =>=>=> RelationalSchema.Table>> countrychecker;
ClassDiagram.Class>> Translation =>=>=> RelationalSchema.Table>> translation;
ClassDiagram.Class>> B =>=>=> RelationalSchema.Table>> b;
ClassDiagram.Class>> Y =>=>=> RelationalSchema.Table>> y;
ClassDiagram.Class>> X =>=>=> RelationalSchema.Table>> x;
ClassDiagram.Class>> Tranchenmodell =>=>=> RelationalSchema.Table>> tranchenmodell;
ClassDiagram.Class>> Preisregelung =>=>=> RelationalSchema.Table>> preisregelung;
ClassDiagram.Class>> Tranche =>=>=> RelationalSchema.Table>> tranche;
ClassDiagram.Class>> A =>=>=> RelationalSchema.Table>> a;
ClassDiagram.Class>> Feature =>=>=> RelationalSchema.Table>> feature;
ClassDiagram.Class>> Product =>=>=> RelationalSchema.Table>> product;
ClassDiagram.Class>> DeleteSharedOneToManyOrphansTest =>=>=> RelationalSchema.Table>> deletesharedonetomanyorphanstest;
ClassDiagram.Class>> Item =>=>=> RelationalSchema.Table>> item;
ClassDiagram.Class>> SchemaCreateDropUtf8WithoutHbm2DdlCharsetNameTest =>=>=> RelationalSchema.Table>> schemacreatedroputf8withouthbm2ddlcharsetnametest;
ClassDiagram.Class>> Document =>=>=> RelationalSchema.Table>> document;
ClassDiagram.Class>> SchemaScriptFileGenerationTest =>=>=> RelationalSchema.Table>> schemascriptfilegenerationtest;
ClassDiagram.Class>> Kitten =>=>=> RelationalSchema.Table>> kitten;
ClassDiagram.Class>> Pasta =>=>=> RelationalSchema.Table>> pasta;
ClassDiagram.Class>> Thing =>=>=> RelationalSchema.Table>> thing;
ClassDiagram.Class>> Entity1 =>=>=> RelationalSchema.Table>> entity1;
ClassDiagram.Class>> CreditCard =>=>=> RelationalSchema.Table>> creditcard;
ClassDiagram.Class>> Info =>=>=> RelationalSchema.Table>> info;
ClassDiagram.Class>> SomeMappedSuperclassSubclass =>=>=> RelationalSchema.Table>> somemappedsuperclasssubclass;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> Customer =>=>=> RelationalSchema.Table>> customer;
ClassDiagram.Class>> MapEntity =>=>=> RelationalSchema.Table>> mapentity;
ClassDiagram.Class>> VersionedEntity =>=>=> RelationalSchema.Table>> versionedentity;
ClassDiagram.Class>> Phone =>=>=> RelationalSchema.Table>> phone;
ClassDiagram.Class>> Order =>=>=> RelationalSchema.Table>> order;
ClassDiagram.Class>> LineItem =>=>=> RelationalSchema.Table>> lineitem;
ClassDiagram.Class>> Address =>=>=> RelationalSchema.Table>> address;
ClassDiagram.Class>> Translation =>=>=> RelationalSchema.Table>> translation;
ClassDiagram.Class>> Product =>=>=> RelationalSchema.Table>> product;
ClassDiagram.Class>> Entity2 =>=>=> RelationalSchema.Table>> entity2;
ClassDiagram.Class>> MixedIdAndIdClassHandling =>=>=> RelationalSchema.Table>> mixedidandidclasshandling;
ClassDiagram.Class>> ThingWithQuantity =>=>=> RelationalSchema.Table>> thingwithquantity;
ClassDiagram.Class>> Entity3 =>=>=> RelationalSchema.Table>> entity3;
ClassDiagram.Class>> Article =>=>=> RelationalSchema.Table>> article;
ClassDiagram.Class>> Spouse =>=>=> RelationalSchema.Table>> spouse;
ClassDiagram.Class>> Alias =>=>=> RelationalSchema.Table>> alias;
ClassDiagram.Class>> NestedLegacyEntity =>=>=> RelationalSchema.Table>> nestedlegacyentity;
ClassDiagram.Class>> LegacyEntity =>=>=> RelationalSchema.Table>> legacyentity;
ClassDiagram.Class>> ModernEntity =>=>=> RelationalSchema.Table>> modernentity;
ClassDiagram.Class>> Reptile =>=>=> RelationalSchema.Table>> reptile;
ClassDiagram.Class>> RemoveOrderingTest =>=>=> RelationalSchema.Table>> removeorderingtest;
ClassDiagram.Class>> Animal =>=>=> RelationalSchema.Table>> animal;
ClassDiagram.Class>> ContainsTest =>=>=> RelationalSchema.Table>> containstest;
ClassDiagram.Class>> Workload =>=>=> RelationalSchema.Table>> workload;
ClassDiagram.Class>> Mammal =>=>=> RelationalSchema.Table>> mammal;
ClassDiagram.Class>> BasicCdiTest =>=>=> RelationalSchema.Table>> basiccditest;
ClassDiagram.Class>> Event =>=>=> RelationalSchema.Table>> event;
ClassDiagram.Class>> StoreProcedureRefCursorOutParameterByNameTest =>=>=> RelationalSchema.Table>> storeprocedurerefcursoroutparameterbynametest;
ClassDiagram.Class>> StoredProcedureNullParameterByNameTest =>=>=> RelationalSchema.Table>> storedprocedurenullparameterbynametest;
ClassDiagram.Class>> StoreProcedureOutParameterByPositionTest =>=>=> RelationalSchema.Table>> storeprocedureoutparameterbypositiontest;
ClassDiagram.Class>> DateTimeParameterTest =>=>=> RelationalSchema.Table>> datetimeparametertest;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> HSQLStoreProcedureTest =>=>=> RelationalSchema.Table>> hsqlstoreproceduretest;
ClassDiagram.Class>> H2StoreProcedureTest =>=>=> RelationalSchema.Table>> h2storeproceduretest;
ClassDiagram.Class>> StoreProcedureOutParameterByNameTest =>=>=> RelationalSchema.Table>> storeprocedureoutparameterbynametest;
ClassDiagram.Class>> StoreProcedureRefCursorOutParameterByPositionTest =>=>=> RelationalSchema.Table>> storeprocedurerefcursoroutparameterbypositiontest;
ClassDiagram.Class>> StoredProcedureResultSetMappingTest =>=>=> RelationalSchema.Table>> storedprocedureresultsetmappingtest;
ClassDiagram.Class>> TestConnectionPool =>=>=> RelationalSchema.Table>> testconnectionpool;
ClassDiagram.Class>> Music =>=>=> RelationalSchema.Table>> music;
ClassDiagram.Class>> Instrument =>=>=> RelationalSchema.Table>> instrument;
ClassDiagram.Class>> Musician =>=>=> RelationalSchema.Table>> musician;
ClassDiagram.Class>> Category =>=>=> RelationalSchema.Table>> category;
ClassDiagram.Class>> Decorate =>=>=> RelationalSchema.Table>> decorate;
ClassDiagram.Class>> Pet =>=>=> RelationalSchema.Table>> pet;
ClassDiagram.Class>> Competition =>=>=> RelationalSchema.Table>> competition;
ClassDiagram.Class>> Competitor =>=>=> RelationalSchema.Table>> competitor;
ClassDiagram.Class>> B2 =>=>=> RelationalSchema.Table>> b2;
ClassDiagram.Class>> A =>=>=> RelationalSchema.Table>> a;
ClassDiagram.Class>> C2 =>=>=> RelationalSchema.Table>> c2;
ClassDiagram.Class>> B3 =>=>=> RelationalSchema.Table>> b3;
ClassDiagram.Class>> C1 =>=>=> RelationalSchema.Table>> c1;
ClassDiagram.Class>> B1 =>=>=> RelationalSchema.Table>> b1;
ClassDiagram.Class>> B4 =>=>=> RelationalSchema.Table>> b4;
ClassDiagram.Class>> Music =>=>=> RelationalSchema.Table>> music;
ClassDiagram.Class>> Item =>=>=> RelationalSchema.Table>> item;
ClassDiagram.Class>> Dress =>=>=> RelationalSchema.Table>> dress;
ClassDiagram.Class>> Hoarder =>=>=> RelationalSchema.Table>> hoarder;
ClassDiagram.Class>> Race =>=>=> RelationalSchema.Table>> race;
ClassDiagram.Class>> Mail =>=>=> RelationalSchema.Table>> mail;
ClassDiagram.Class>> Colony =>=>=> RelationalSchema.Table>> colony;
ClassDiagram.Class>> Cat =>=>=> RelationalSchema.Table>> cat;
ClassDiagram.Class>> Empire =>=>=> RelationalSchema.Table>> empire;
ClassDiagram.Class>> Dog =>=>=> RelationalSchema.Table>> dog;
ClassDiagram.Class>> TreatKeywordTest =>=>=> RelationalSchema.Table>> treatkeywordtest;
ClassDiagram.Class>> ConcatTest =>=>=> RelationalSchema.Table>> concattest;
ClassDiagram.Class>> Wall =>=>=> RelationalSchema.Table>> wall;
ClassDiagram.Class>> Payment =>=>=> RelationalSchema.Table>> payment;
ClassDiagram.Class>> Store =>=>=> RelationalSchema.Table>> store;
ClassDiagram.Class>> EntitySuperclassCollectionTest =>=>=> RelationalSchema.Table>> entitysuperclasscollectiontest;
ClassDiagram.Class>> AbstractCriteriaLiteralHandlingModeTest =>=>=> RelationalSchema.Table>> abstractcriterialiteralhandlingmodetest;
ClassDiagram.Class>> Tool =>=>=> RelationalSchema.Table>> tool;
ClassDiagram.Class>> Widget =>=>=> RelationalSchema.Table>> widget;
ClassDiagram.Class>> CriteriaLiteralInSelectExpressionTest =>=>=> RelationalSchema.Table>> criterialiteralinselectexpressiontest;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> CriteriaLiteralsTest =>=>=> RelationalSchema.Table>> criterialiteralstest;
ClassDiagram.Class>> Subject =>=>=> RelationalSchema.Table>> subject;
ClassDiagram.Class>> BasicSimpleCaseTest =>=>=> RelationalSchema.Table>> basicsimplecasetest;
ClassDiagram.Class>> Facility =>=>=> RelationalSchema.Table>> facility;
ClassDiagram.Class>> PurchaseOrg =>=>=> RelationalSchema.Table>> purchaseorg;
ClassDiagram.Class>> Site =>=>=> RelationalSchema.Table>> site;
ClassDiagram.Class>> Customer =>=>=> RelationalSchema.Table>> customer;
ClassDiagram.Class>> Product =>=>=> RelationalSchema.Table>> product;
ClassDiagram.Class>> Order =>=>=> RelationalSchema.Table>> order;
ClassDiagram.Class>> OrderLine =>=>=> RelationalSchema.Table>> orderline;
ClassDiagram.Class>> Human =>=>=> RelationalSchema.Table>> human;
ClassDiagram.Class>> Elephant =>=>=> RelationalSchema.Table>> elephant;
ClassDiagram.Class>> TreatListJoinTest =>=>=> RelationalSchema.Table>> treatlistjointest;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> MapJoinTestWithEmbeddable =>=>=> RelationalSchema.Table>> mapjointestwithembeddable;
ClassDiagram.Class>> Book =>=>=> RelationalSchema.Table>> book;
ClassDiagram.Class>> Alias =>=>=> RelationalSchema.Table>> alias;
ClassDiagram.Class>> EntitySuperclassComponentWithCollectionTest =>=>=> RelationalSchema.Table>> entitysuperclasscomponentwithcollectiontest;
ClassDiagram.Class>> ComponentInWhereClauseTest =>=>=> RelationalSchema.Table>> componentinwhereclausetest;
ClassDiagram.Class>> MappedSuperclassComponentWithCollectionTest =>=>=> RelationalSchema.Table>> mappedsuperclasscomponentwithcollectiontest;
ClassDiagram.Class>> Client =>=>=> RelationalSchema.Table>> client;
ClassDiagram.Class>> ManyToOneType =>=>=> RelationalSchema.Table>> manytoonetype;
ClassDiagram.Class>> MultiTypedBasicAttributesEntity =>=>=> RelationalSchema.Table>> multitypedbasicattributesentity;
ClassDiagram.Class>> SuperclassCollectionTest =>=>=> RelationalSchema.Table>> superclasscollectiontest;
ClassDiagram.Class>> LimitExpressionTest =>=>=> RelationalSchema.Table>> limitexpressiontest;
ClassDiagram.Class>> Animal =>=>=> RelationalSchema.Table>> animal;
ClassDiagram.Class>> GroupBySelectCaseTest =>=>=> RelationalSchema.Table>> groupbyselectcasetest;
ClassDiagram.Class>> TreatJoinTest =>=>=> RelationalSchema.Table>> treatjointest;
ClassDiagram.Class>> TestLazyPropertyOnPreUpdate =>=>=> RelationalSchema.Table>> testlazypropertyonpreupdate;
ClassDiagram.Class>> ExplicitlyNonCacheableEntity =>=>=> RelationalSchema.Table>> explicitlynoncacheableentity;
ClassDiagram.Class>> NoCacheableAnnotationEntity =>=>=> RelationalSchema.Table>> nocacheableannotationentity;
ClassDiagram.Class>> ExplicitlyCacheableEntity =>=>=> RelationalSchema.Table>> explicitlycacheableentity;
ClassDiagram.Class>> Order =>=>=> RelationalSchema.Table>> order;
ClassDiagram.Class>> SimpleEntity =>=>=> RelationalSchema.Table>> simpleentity;
ClassDiagram.Class>> Cat =>=>=> RelationalSchema.Table>> cat;
ClassDiagram.Class>> NamedQueryTest =>=>=> RelationalSchema.Table>> namedquerytest;
ClassDiagram.Class>> OracleConstructorResultNativeQueryTest =>=>=> RelationalSchema.Table>> oracleconstructorresultnativequerytest;
ClassDiagram.Class>> QueryParametersWithDisabledValidationTest =>=>=> RelationalSchema.Table>> queryparameterswithdisabledvalidationtest;
ClassDiagram.Class>> QueryWithLiteralsInSelectExpressionTest =>=>=> RelationalSchema.Table>> querywithliteralsinselectexpressiontest;
ClassDiagram.Class>> LimitExpressionTest =>=>=> RelationalSchema.Table>> limitexpressiontest;
ClassDiagram.Class>> TupleQueryTest =>=>=> RelationalSchema.Table>> tuplequerytest;
ClassDiagram.Class>> QueryParametersValidationTest =>=>=> RelationalSchema.Table>> queryparametersvalidationtest;
ClassDiagram.Class>> ScalarResultNativeQueryTest =>=>=> RelationalSchema.Table>> scalarresultnativequerytest;
ClassDiagram.Class>> DateTimeParameterTest =>=>=> RelationalSchema.Table>> datetimeparametertest;
ClassDiagram.Class>> TupleNativeQueryTest =>=>=> RelationalSchema.Table>> tuplenativequerytest;
ClassDiagram.Class>> NamedQueryCommentTest =>=>=> RelationalSchema.Table>> namedquerycommenttest;
ClassDiagram.Class>> Contractor =>=>=> RelationalSchema.Table>> contractor;
ClassDiagram.Class>> NativeQueryOrdinalParametersTest =>=>=> RelationalSchema.Table>> nativequeryordinalparameterstest;
ClassDiagram.Class>> TypedValueParametersTest =>=>=> RelationalSchema.Table>> typedvalueparameterstest;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> QueryWithInParamListAndNamedEntityGraphTest =>=>=> RelationalSchema.Table>> querywithinparamlistandnamedentitygraphtest;
ClassDiagram.Class>> ConstructorResultNativeQueryTest =>=>=> RelationalSchema.Table>> constructorresultnativequerytest;
ClassDiagram.Class>> ApplicationServer =>=>=> RelationalSchema.Table>> applicationserver;
ClassDiagram.Class>> Money =>=>=> RelationalSchema.Table>> money;
ClassDiagram.Class>> ApplicationServer1 =>=>=> RelationalSchema.Table>> applicationserver1;
ClassDiagram.Class>> Money1 =>=>=> RelationalSchema.Table>> money1;
ClassDiagram.Class>> Caipirinha =>=>=> RelationalSchema.Table>> caipirinha;
ClassDiagram.Class>> Washer =>=>=> RelationalSchema.Table>> washer;
ClassDiagram.Class>> Money =>=>=> RelationalSchema.Table>> money;
ClassDiagram.Class>> ApplicationServer =>=>=> RelationalSchema.Table>> applicationserver;
ClassDiagram.Class>> Scooter =>=>=> RelationalSchema.Table>> scooter;
ClassDiagram.Class>> Bug =>=>=> RelationalSchema.Table>> bug;
ClassDiagram.Class>> Bug =>=>=> RelationalSchema.Table>> bug;
ClassDiagram.Class>> Carpet =>=>=> RelationalSchema.Table>> carpet;
ClassDiagram.Class>> Morito =>=>=> RelationalSchema.Table>> morito;
ClassDiagram.Class>> ColumnWithExplicitReferenceToPrimaryTableTest =>=>=> RelationalSchema.Table>> columnwithexplicitreferencetoprimarytabletest;
ClassDiagram.Class>> UnidirectionalOneToManyOrderColumnTest =>=>=> RelationalSchema.Table>> unidirectionalonetomanyordercolumntest;
ClassDiagram.Class>> Phone =>=>=> RelationalSchema.Table>> phone;
ClassDiagram.Class>> DefaultCascadeTest =>=>=> RelationalSchema.Table>> defaultcascadetest;
ClassDiagram.Class>> QueryTest =>=>=> RelationalSchema.Table>> querytest;
ClassDiagram.Class>> ConversionAutoApplyTest =>=>=> RelationalSchema.Table>> conversionautoapplytest;
ClassDiagram.Class>> Fruit =>=>=> RelationalSchema.Table>> fruit;
ClassDiagram.Class>> Strawberry =>=>=> RelationalSchema.Table>> strawberry;
ClassDiagram.Class>> TransactionRollbackTest =>=>=> RelationalSchema.Table>> transactionrollbacktest;
ClassDiagram.Class>> Book =>=>=> RelationalSchema.Table>> book;
ClassDiagram.Class>> CloseEntityManagerWithActiveTransactionTest =>=>=> RelationalSchema.Table>> closeentitymanagerwithactivetransactiontest;
ClassDiagram.Class>> Bell =>=>=> RelationalSchema.Table>> bell;
ClassDiagram.Class>> Cable =>=>=> RelationalSchema.Table>> cable;
ClassDiagram.Class>> Child =>=>=> RelationalSchema.Table>> child;
ClassDiagram.Class>> Parent =>=>=> RelationalSchema.Table>> parent;
ClassDiagram.Class>> EntityWithCompositeId =>=>=> RelationalSchema.Table>> entitywithcompositeid;
ClassDiagram.Class>> UnversionedLock =>=>=> RelationalSchema.Table>> unversionedlock;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> Lockable =>=>=> RelationalSchema.Table>> lockable;
ClassDiagram.Class>> Lock =>=>=> RelationalSchema.Table>> lock;
ClassDiagram.Class>> QueryLockingTest =>=>=> RelationalSchema.Table>> querylockingtest;
ClassDiagram.Class>> Article =>=>=> RelationalSchema.Table>> article;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> Article =>=>=> RelationalSchema.Table>> article;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> LoadGraphFindByIdTest =>=>=> RelationalSchema.Table>> loadgraphfindbyidtest;
ClassDiagram.Class>> Course =>=>=> RelationalSchema.Table>> course;
ClassDiagram.Class>> Student =>=>=> RelationalSchema.Table>> student;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> Foo2 =>=>=> RelationalSchema.Table>> foo2;
ClassDiagram.Class>> Foo =>=>=> RelationalSchema.Table>> foo;
ClassDiagram.Class>> Bar =>=>=> RelationalSchema.Table>> bar;
ClassDiagram.Class>> Company =>=>=> RelationalSchema.Table>> company;
ClassDiagram.Class>> Location =>=>=> RelationalSchema.Table>> location;
ClassDiagram.Class>> EntityGraphWithFetchAnnotationTest =>=>=> RelationalSchema.Table>> entitygraphwithfetchannotationtest;
ClassDiagram.Class>> EntityGraphUsingFetchGraphTest =>=>=> RelationalSchema.Table>> entitygraphusingfetchgraphtest;
ClassDiagram.Class>> EntityGraphTest =>=>=> RelationalSchema.Table>> entitygraphtest;
ClassDiagram.Class>> EntityGraphUsingFetchGraphForLazyTest =>=>=> RelationalSchema.Table>> entitygraphusingfetchgraphforlazytest;
ClassDiagram.Class>> BasicEntityGraphTests =>=>=> RelationalSchema.Table>> basicentitygraphtests;
ClassDiagram.Class>> EntityGraphLoadPlanBuilderTest =>=>=> RelationalSchema.Table>> entitygraphloadplanbuildertest;
ClassDiagram.Class>> Manager =>=>=> RelationalSchema.Table>> manager;
ClassDiagram.Class>> TemporalTypeTest =>=>=> RelationalSchema.Table>> temporaltypetest;
ClassDiagram.Class>> Sickness =>=>=> RelationalSchema.Table>> sickness;
ClassDiagram.Class>> Umbrella =>=>=> RelationalSchema.Table>> umbrella;
ClassDiagram.Class>> Author =>=>=> RelationalSchema.Table>> author;
ClassDiagram.Class>> Article =>=>=> RelationalSchema.Table>> article;
ClassDiagram.Class>> Book =>=>=> RelationalSchema.Table>> book;
ClassDiagram.Class>> IrrelevantEntity =>=>=> RelationalSchema.Table>> irrelevantentity;
ClassDiagram.Class>> PreInsertEventListenerVetoBidirectionalTest =>=>=> RelationalSchema.Table>> preinserteventlistenervetobidirectionaltest;
ClassDiagram.Class>> PreInsertEventListenerVetoUnidirectionalTest =>=>=> RelationalSchema.Table>> preinserteventlistenervetounidirectionaltest;
ClassDiagram.Class>> MergeContextTest =>=>=> RelationalSchema.Table>> mergecontexttest;
ClassDiagram.Class>> GeneratedValueTest =>=>=> RelationalSchema.Table>> generatedvaluetest;
ClassDiagram.Class>> QuotedIdentifierTest =>=>=> RelationalSchema.Table>> quotedidentifiertest;
ClassDiagram.Class>> LoadPlanBuilderTest =>=>=> RelationalSchema.Table>> loadplanbuildertest;
ClassDiagram.Class>> BasicWalkingTest =>=>=> RelationalSchema.Table>> basicwalkingtest;
ClassDiagram.Class>> EntityWithNonLazyCollectionResultSetProcessorTest =>=>=> RelationalSchema.Table>> entitywithnonlazycollectionresultsetprocessortest;
ClassDiagram.Class>> EntityWithNonLazyOneToManySetResultSetProcessorTest =>=>=> RelationalSchema.Table>> entitywithnonlazyonetomanysetresultsetprocessortest;
ClassDiagram.Class>> EntityWithNonLazyOneToManyListResultSetProcessorTest =>=>=> RelationalSchema.Table>> entitywithnonlazyonetomanylistresultsetprocessortest;
ClassDiagram.Class>> EncapsulatedCompositeIdResultSetProcessorTest =>=>=> RelationalSchema.Table>> encapsulatedcompositeidresultsetprocessortest;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> Contractor =>=>=> RelationalSchema.Table>> contractor;
ClassDiagram.Class>> Department =>=>=> RelationalSchema.Table>> department;
ClassDiagram.Class>> EncapsulatedCompositeAttributeResultSetProcessorTest =>=>=> RelationalSchema.Table>> encapsulatedcompositeattributeresultsetprocessortest;
ClassDiagram.Class>> SimpleResultSetProcessorTest =>=>=> RelationalSchema.Table>> simpleresultsetprocessortest;
ClassDiagram.Class>> EntityAssociationResultSetProcessorTest =>=>=> RelationalSchema.Table>> entityassociationresultsetprocessortest;
ClassDiagram.Class>> ForeignKeyConstraintTest =>=>=> RelationalSchema.Table>> foreignkeyconstrainttest;
ClassDiagram.Class>> ConstraintTest =>=>=> RelationalSchema.Table>> constrainttest;
ClassDiagram.Class>> Thing =>=>=> RelationalSchema.Table>> thing;
ClassDiagram.Class>> Item =>=>=> RelationalSchema.Table>> item;
ClassDiagram.Class>> GetterAndIsMethodChecks =>=>=> RelationalSchema.Table>> getterandismethodchecks;
ClassDiagram.Class>> IdentificationVariablesTest =>=>=> RelationalSchema.Table>> identificationvariablestest;
ClassDiagram.Class>> TreatKeywordTest =>=>=> RelationalSchema.Table>> treatkeywordtest;
ClassDiagram.Class>> DestinationEntity =>=>=> RelationalSchema.Table>> destinationentity;
ClassDiagram.Class>> FromEntity =>=>=> RelationalSchema.Table>> fromentity;
ClassDiagram.Class>> MapKeyColumnOneToManyFKTest =>=>=> RelationalSchema.Table>> mapkeycolumnonetomanyfktest;
ClassDiagram.Class>> MapKeyColumnOneToManyJoinTableTest =>=>=> RelationalSchema.Table>> mapkeycolumnonetomanyjointabletest;
ClassDiagram.Class>> MapKeyColumnManyToManyTest =>=>=> RelationalSchema.Table>> mapkeycolumnmanytomanytest;
ClassDiagram.Class>> MapKeyColumnBiDiOneToManyFKTest =>=>=> RelationalSchema.Table>> mapkeycolumnbidionetomanyfktest;
ClassDiagram.Class>> MapKeyColumnElementCollectionTest =>=>=> RelationalSchema.Table>> mapkeycolumnelementcollectiontest;
ClassDiagram.Class>> OneToOneLazyNonOptionalOrphanRemovalTest =>=>=> RelationalSchema.Table>> onetoonelazynonoptionalorphanremovaltest;
ClassDiagram.Class>> OneToOneLazyOrphanRemovalTest =>=>=> RelationalSchema.Table>> onetoonelazyorphanremovaltest;
ClassDiagram.Class>> OneToOneEagerOrphanRemovalTest =>=>=> RelationalSchema.Table>> onetooneeagerorphanremovaltest;
ClassDiagram.Class>> OneToOneEagerNonOptionalOrphanRemovalTest =>=>=> RelationalSchema.Table>> onetooneeagernonoptionalorphanremovaltest;
ClassDiagram.Class>> TableGeneratorVisibilityTest =>=>=> RelationalSchema.Table>> tablegeneratorvisibilitytest;
ClassDiagram.Class>> TableGeneratorMultipleDefinitionTest =>=>=> RelationalSchema.Table>> tablegeneratormultipledefinitiontest;
ClassDiagram.Class>> Group =>=>=> RelationalSchema.Table>> group;
ClassDiagram.Class>> ClassWithIdentityColumn =>=>=> RelationalSchema.Table>> classwithidentitycolumn;
ClassDiagram.Class>> FilterWitSubSelectFetchModeTest =>=>=> RelationalSchema.Table>> filterwitsubselectfetchmodetest;
ClassDiagram.Class>> OneToManyWithDynamicFilterTest =>=>=> RelationalSchema.Table>> onetomanywithdynamicfiltertest;
ClassDiagram.Class>> ManyToManyWithDynamicFilterTest =>=>=> RelationalSchema.Table>> manytomanywithdynamicfiltertest;
ClassDiagram.Class>> CriteriaQueryWithAppliedFilterTest =>=>=> RelationalSchema.Table>> criteriaquerywithappliedfiltertest;
ClassDiagram.Class>> FilterDotNameTest =>=>=> RelationalSchema.Table>> filterdotnametest;
ClassDiagram.Class>> UnionSubclassTest =>=>=> RelationalSchema.Table>> unionsubclasstest;
ClassDiagram.Class>> SelectDistinctHqlTest =>=>=> RelationalSchema.Table>> selectdistincthqltest;
ClassDiagram.Class>> TupleSupportTest =>=>=> RelationalSchema.Table>> tuplesupporttest;
ClassDiagram.Class>> Entity1 =>=>=> RelationalSchema.Table>> entity1;
ClassDiagram.Class>> Parent =>=>=> RelationalSchema.Table>> parent;
ClassDiagram.Class>> GrandChild =>=>=> RelationalSchema.Table>> grandchild;
ClassDiagram.Class>> Entity3 =>=>=> RelationalSchema.Table>> entity3;
ClassDiagram.Class>> Entity2 =>=>=> RelationalSchema.Table>> entity2;
ClassDiagram.Class>> Child =>=>=> RelationalSchema.Table>> child;
ClassDiagram.Class>> QueryParametersValidationTest =>=>=> RelationalSchema.Table>> queryparametersvalidationtest;
ClassDiagram.Class>> CoalesceTest =>=>=> RelationalSchema.Table>> coalescetest;
ClassDiagram.Class>> ScrollableTest =>=>=> RelationalSchema.Table>> scrollabletest;
ClassDiagram.Class>> SubQueryTest =>=>=> RelationalSchema.Table>> subquerytest;
ClassDiagram.Class>> TrtPanel =>=>=> RelationalSchema.Table>> trtpanel;
ClassDiagram.Class>> CollectionMapWithComponentValueTest =>=>=> RelationalSchema.Table>> collectionmapwithcomponentvaluetest;
ClassDiagram.Class>> Farm =>=>=> RelationalSchema.Table>> farm;
ClassDiagram.Class>> Title =>=>=> RelationalSchema.Table>> title;
ClassDiagram.Class>> CastFunctionTest =>=>=> RelationalSchema.Table>> castfunctiontest;
ClassDiagram.Class>> CastNullSelectExpressionTest =>=>=> RelationalSchema.Table>> castnullselectexpressiontest;
ClassDiagram.Class>> JoinedSubclassSubQueryTest =>=>=> RelationalSchema.Table>> joinedsubclasssubquerytest;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> EntityWithUnusualTableNameJoinTest =>=>=> RelationalSchema.Table>> entitywithunusualtablenamejointest;
ClassDiagram.Class>> InsertWithSubSelectTest =>=>=> RelationalSchema.Table>> insertwithsubselecttest;
ClassDiagram.Class>> DB297SubStringFunctionsTest =>=>=> RelationalSchema.Table>> db297substringfunctionstest;
ClassDiagram.Class>> Panel =>=>=> RelationalSchema.Table>> panel;
ClassDiagram.Class>> WithClauseJoinRewriteTest =>=>=> RelationalSchema.Table>> withclausejoinrewritetest;
ClassDiagram.Class>> CaseStatementTest =>=>=> RelationalSchema.Table>> casestatementtest;
ClassDiagram.Class>> EntityJoinTest =>=>=> RelationalSchema.Table>> entityjointest;
ClassDiagram.Class>> Crop =>=>=> RelationalSchema.Table>> crop;
ClassDiagram.Class>> QuerySplitterTest =>=>=> RelationalSchema.Table>> querysplittertest;
ClassDiagram.Class>> MapFunctionExpressionsTest =>=>=> RelationalSchema.Table>> mapfunctionexpressionstest;
ClassDiagram.Class>> SelectNewEmbeddedIdTest =>=>=> RelationalSchema.Table>> selectnewembeddedidtest;
ClassDiagram.Class>> ParameterCollectionTest =>=>=> RelationalSchema.Table>> parametercollectiontest;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> JoinOnClauseTest =>=>=> RelationalSchema.Table>> joinonclausetest;
ClassDiagram.Class>> AggregateFunctionsWithSubSelectTest =>=>=> RelationalSchema.Table>> aggregatefunctionswithsubselecttest;
ClassDiagram.Class>> QueryParametersValidationArrayTest =>=>=> RelationalSchema.Table>> queryparametersvalidationarraytest;
ClassDiagram.Class>> Department =>=>=> RelationalSchema.Table>> department;
ClassDiagram.Class>> SizeAttributeReferenceTest =>=>=> RelationalSchema.Table>> sizeattributereferencetest;
ClassDiagram.Class>> Container =>=>=> RelationalSchema.Table>> container;
ClassDiagram.Class>> ComponentNamingStrategyForJoinColumnTest =>=>=> RelationalSchema.Table>> componentnamingstrategyforjoincolumntest;
ClassDiagram.Class>> Language =>=>=> RelationalSchema.Table>> language;
ClassDiagram.Class>> Category =>=>=> RelationalSchema.Table>> category;
ClassDiagram.Class>> CollectionJoinTableNamingTest =>=>=> RelationalSchema.Table>> collectionjointablenamingtest;
ClassDiagram.Class>> Workflow =>=>=> RelationalSchema.Table>> workflow;
ClassDiagram.Class>> Item =>=>=> RelationalSchema.Table>> item;
ClassDiagram.Class>> DynamicEntity =>=>=> RelationalSchema.Table>> dynamicentity;
ClassDiagram.Class>> Customer =>=>=> RelationalSchema.Table>> customer;
ClassDiagram.Class>> ZipCode =>=>=> RelationalSchema.Table>> zipcode;
ClassDiagram.Class>> Order =>=>=> RelationalSchema.Table>> order;
ClassDiagram.Class>> Industry =>=>=> RelationalSchema.Table>> industry;
ClassDiagram.Class>> IAmAFoo =>=>=> RelationalSchema.Table>> iamafoo;
ClassDiagram.Class>> MergeTest =>=>=> RelationalSchema.Table>> mergetest;
ClassDiagram.Class>> NonBatchingBatchFailureTest =>=>=> RelationalSchema.Table>> nonbatchingbatchfailuretest;
ClassDiagram.Class>> BatchingBatchFailureTest =>=>=> RelationalSchema.Table>> batchingbatchfailuretest;
ClassDiagram.Class>> BatchOptimisticLockingTest =>=>=> RelationalSchema.Table>> batchoptimisticlockingtest;
ClassDiagram.Class>> BasicStreamTest =>=>=> RelationalSchema.Table>> basicstreamtest;
ClassDiagram.Class>> JpaStreamTest =>=>=> RelationalSchema.Table>> jpastreamtest;
ClassDiagram.Class>> ToOneOnDeleteTest =>=>=> RelationalSchema.Table>> tooneondeletetest;
ClassDiagram.Class>> Animal =>=>=> RelationalSchema.Table>> animal;
ClassDiagram.Class>> Lion =>=>=> RelationalSchema.Table>> lion;
ClassDiagram.Class>> Zoo =>=>=> RelationalSchema.Table>> zoo;
ClassDiagram.Class>> Tiger =>=>=> RelationalSchema.Table>> tiger;
ClassDiagram.Class>> MultipleSessionCollectionWarningTest =>=>=> RelationalSchema.Table>> multiplesessioncollectionwarningtest;
ClassDiagram.Class>> MultipleSessionCollectionTest =>=>=> RelationalSchema.Table>> multiplesessioncollectiontest;
ClassDiagram.Class>> Contact =>=>=> RelationalSchema.Table>> contact;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> SetElementNullBasicTest =>=>=> RelationalSchema.Table>> setelementnullbasictest;
ClassDiagram.Class>> MultipleBagFetchTest =>=>=> RelationalSchema.Table>> multiplebagfetchtest;
ClassDiagram.Class>> BagDuplicatesTest =>=>=> RelationalSchema.Table>> bagduplicatestest;
ClassDiagram.Class>> MultipleBagFetchHqlTest =>=>=> RelationalSchema.Table>> multiplebagfetchhqltest;
ClassDiagram.Class>> PersistentBagContainsTest =>=>=> RelationalSchema.Table>> persistentbagcontainstest;
ClassDiagram.Class>> BagElementNullBasicTest =>=>=> RelationalSchema.Table>> bagelementnullbasictest;
ClassDiagram.Class>> IdBagElementNullBasicTest =>=>=> RelationalSchema.Table>> idbagelementnullbasictest;
ClassDiagram.Class>> ListIndexReferenceFromListElementTest =>=>=> RelationalSchema.Table>> listindexreferencefromlistelementtest;
ClassDiagram.Class>> ListElementNullBasicTest =>=>=> RelationalSchema.Table>> listelementnullbasictest;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> Email =>=>=> RelationalSchema.Table>> email;
ClassDiagram.Class>> Many =>=>=> RelationalSchema.Table>> many;
ClassDiagram.Class>> VersionedCascadeOne =>=>=> RelationalSchema.Table>> versionedcascadeone;
ClassDiagram.Class>> UnversionedNoCascadeOne =>=>=> RelationalSchema.Table>> unversionednocascadeone;
ClassDiagram.Class>> VersionedNoCascadeOne =>=>=> RelationalSchema.Table>> versionednocascadeone;
ClassDiagram.Class>> UnversionedCascadeOne =>=>=> RelationalSchema.Table>> unversionedcascadeone;
ClassDiagram.Class>> PersistentMapTest =>=>=> RelationalSchema.Table>> persistentmaptest;
ClassDiagram.Class>> MultilingualStringParent =>=>=> RelationalSchema.Table>> multilingualstringparent;
ClassDiagram.Class>> MapElementNullBasicTest =>=>=> RelationalSchema.Table>> mapelementnullbasictest;
ClassDiagram.Class>> MapKey =>=>=> RelationalSchema.Table>> mapkey;
ClassDiagram.Class>> MapValue =>=>=> RelationalSchema.Table>> mapvalue;
ClassDiagram.Class>> MapHolder =>=>=> RelationalSchema.Table>> mapholder;
ClassDiagram.Class>> MultilingualString =>=>=> RelationalSchema.Table>> multilingualstring;
ClassDiagram.Class>> ListAddTest =>=>=> RelationalSchema.Table>> listaddtest;
ClassDiagram.Class>> SetDelayedOperationTest =>=>=> RelationalSchema.Table>> setdelayedoperationtest;
ClassDiagram.Class>> BagDelayedOperationTest =>=>=> RelationalSchema.Table>> bagdelayedoperationtest;
ClassDiagram.Class>> ListDelayedOperationTest =>=>=> RelationalSchema.Table>> listdelayedoperationtest;
ClassDiagram.Class>> SybaseTimestampComparisonAnnotationsTest =>=>=> RelationalSchema.Table>> sybasetimestampcomparisonannotationstest;
ClassDiagram.Class>> LocalDateTimeVersionTest =>=>=> RelationalSchema.Table>> localdatetimeversiontest;
ClassDiagram.Class>> InstantVersionTest =>=>=> RelationalSchema.Table>> instantversiontest;
ClassDiagram.Class>> OffsetDateTimeVersionTest =>=>=> RelationalSchema.Table>> offsetdatetimeversiontest;
ClassDiagram.Class>> ZonedDateTimeVersionTest =>=>=> RelationalSchema.Table>> zoneddatetimeversiontest;
ClassDiagram.Class>> SchemaToolTransactionHandlingTest =>=>=> RelationalSchema.Table>> schematooltransactionhandlingtest;
ClassDiagram.Class>> IndividuallySchemaValidatorImplTest =>=>=> RelationalSchema.Table>> individuallyschemavalidatorimpltest;
ClassDiagram.Class>> IndividuallySchemaValidatorImplConnectionTest =>=>=> RelationalSchema.Table>> individuallyschemavalidatorimplconnectiontest;
ClassDiagram.Class>> DropSchemaDuringJtaTxnTest =>=>=> RelationalSchema.Table>> dropschemaduringjtatxntest;
ClassDiagram.Class>> Parent =>=>=> RelationalSchema.Table>> parent;
ClassDiagram.Class>> Child =>=>=> RelationalSchema.Table>> child;
ClassDiagram.Class>> OtherEntity =>=>=> RelationalSchema.Table>> otherentity;
ClassDiagram.Class>> Message =>=>=> RelationalSchema.Table>> message;
ClassDiagram.Class>> Event =>=>=> RelationalSchema.Table>> event;
ClassDiagram.Class>> ABlockableEntity =>=>=> RelationalSchema.Table>> ablockableentity;
ClassDiagram.Class>> AbstractBulkCompositeIdTest =>=>=> RelationalSchema.Table>> abstractbulkcompositeidtest;
ClassDiagram.Class>> AbstractBulkIdTest =>=>=> RelationalSchema.Table>> abstractbulkidtest;
ClassDiagram.Class>> Parent =>=>=> RelationalSchema.Table>> parent;
ClassDiagram.Class>> LazyLoadingTest =>=>=> RelationalSchema.Table>> lazyloadingtest;
ClassDiagram.Class>> Child =>=>=> RelationalSchema.Table>> child;
ClassDiagram.Class>> InvalidEnumeratedJavaTypeTest =>=>=> RelationalSchema.Table>> invalidenumeratedjavatypetest;
ClassDiagram.Class>> TestEntity =>=>=> RelationalSchema.Table>> testentity;
ClassDiagram.Class>> SequenceFilterTest =>=>=> RelationalSchema.Table>> sequencefiltertest;
ClassDiagram.Class>> CatalogFilterTest =>=>=> RelationalSchema.Table>> catalogfiltertest;
ClassDiagram.Class>> SchemaFilterTest =>=>=> RelationalSchema.Table>> schemafiltertest;
ClassDiagram.Class>> BImpl =>=>=> RelationalSchema.Table>> bimpl;
ClassDiagram.Class>> PrimeMinister =>=>=> RelationalSchema.Table>> primeminister;
ClassDiagram.Class>> ZImpl =>=>=> RelationalSchema.Table>> zimpl;
ClassDiagram.Class>> Sky =>=>=> RelationalSchema.Table>> sky;
ClassDiagram.Class>> AImpl =>=>=> RelationalSchema.Table>> aimpl;
ClassDiagram.Class>> Manufacturer =>=>=> RelationalSchema.Table>> manufacturer;
ClassDiagram.Class>> A320b =>=>=> RelationalSchema.Table>> a320b;
ClassDiagram.Class>> Tower =>=>=> RelationalSchema.Table>> tower;
ClassDiagram.Class>> PlanetCheatSheet =>=>=> RelationalSchema.Table>> planetcheatsheet;
ClassDiagram.Class>> Store =>=>=> RelationalSchema.Table>> store;
ClassDiagram.Class>> Computer =>=>=> RelationalSchema.Table>> computer;
ClassDiagram.Class>> Monkey =>=>=> RelationalSchema.Table>> monkey;
ClassDiagram.Class>> Phone =>=>=> RelationalSchema.Table>> phone;
ClassDiagram.Class>> Bunny =>=>=> RelationalSchema.Table>> bunny;
ClassDiagram.Class>> TwinkleToes =>=>=> RelationalSchema.Table>> twinkletoes;
ClassDiagram.Class>> HibernateSequenceEntity =>=>=> RelationalSchema.Table>> hibernatesequenceentity;
ClassDiagram.Class>> PointyTooth =>=>=> RelationalSchema.Table>> pointytooth;
ClassDiagram.Class>> Footballer =>=>=> RelationalSchema.Table>> footballer;
ClassDiagram.Class>> Home =>=>=> RelationalSchema.Table>> home;
ClassDiagram.Class>> Department =>=>=> RelationalSchema.Table>> department;
ClassDiagram.Class>> SoundSystem =>=>=> RelationalSchema.Table>> soundsystem;
ClassDiagram.Class>> Furniture =>=>=> RelationalSchema.Table>> furniture;
ClassDiagram.Class>> Ball =>=>=> RelationalSchema.Table>> ball;
ClassDiagram.Class>> Shoe =>=>=> RelationalSchema.Table>> shoe;
ClassDiagram.Class>> GoalKeeper =>=>=> RelationalSchema.Table>> goalkeeper;
ClassDiagram.Class>> Dog =>=>=> RelationalSchema.Table>> dog;
ClassDiagram.Class>> BreakDance =>=>=> RelationalSchema.Table>> breakdance;
ClassDiagram.Class>> FirTree =>=>=> RelationalSchema.Table>> firtree;
ClassDiagram.Class>> AndFormulaTest =>=>=> RelationalSchema.Table>> andformulatest;
ClassDiagram.Class>> Furniture =>=>=> RelationalSchema.Table>> furniture;
ClassDiagram.Class>> Hotel =>=>=> RelationalSchema.Table>> hotel;
ClassDiagram.Class>> SoundSystem =>=>=> RelationalSchema.Table>> soundsystem;
ClassDiagram.Class>> PlanetCheatSheet =>=>=> RelationalSchema.Table>> planetcheatsheet;
ClassDiagram.Class>> PointyTooth =>=>=> RelationalSchema.Table>> pointytooth;
ClassDiagram.Class>> Phone =>=>=> RelationalSchema.Table>> phone;
ClassDiagram.Class>> Dog =>=>=> RelationalSchema.Table>> dog;
ClassDiagram.Class>> TwinkleToes =>=>=> RelationalSchema.Table>> twinkletoes;
ClassDiagram.Class>> Footballer =>=>=> RelationalSchema.Table>> footballer;
ClassDiagram.Class>> Department =>=>=> RelationalSchema.Table>> department;
ClassDiagram.Class>> Shoe =>=>=> RelationalSchema.Table>> shoe;
ClassDiagram.Class>> Ball =>=>=> RelationalSchema.Table>> ball;
ClassDiagram.Class>> Bunny =>=>=> RelationalSchema.Table>> bunny;
ClassDiagram.Class>> Computer =>=>=> RelationalSchema.Table>> computer;
ClassDiagram.Class>> Tower =>=>=> RelationalSchema.Table>> tower;
ClassDiagram.Class>> FirTree =>=>=> RelationalSchema.Table>> firtree;
ClassDiagram.Class>> BreakDance =>=>=> RelationalSchema.Table>> breakdance;
ClassDiagram.Class>> Home =>=>=> RelationalSchema.Table>> home;
ClassDiagram.Class>> GoalKeeper =>=>=> RelationalSchema.Table>> goalkeeper;
ClassDiagram.Class>> Store =>=>=> RelationalSchema.Table>> store;
ClassDiagram.Class>> Monkey =>=>=> RelationalSchema.Table>> monkey;
ClassDiagram.Class>> AutoEntity =>=>=> RelationalSchema.Table>> autoentity;
ClassDiagram.Class>> MinimalTableEntity =>=>=> RelationalSchema.Table>> minimaltableentity;
ClassDiagram.Class>> DedicatedSequenceEntity2 =>=>=> RelationalSchema.Table>> dedicatedsequenceentity2;
ClassDiagram.Class>> MinimalSequenceEntity =>=>=> RelationalSchema.Table>> minimalsequenceentity;
ClassDiagram.Class>> CompleteSequenceEntity =>=>=> RelationalSchema.Table>> completesequenceentity;
ClassDiagram.Class>> DedicatedSequenceEntity1 =>=>=> RelationalSchema.Table>> dedicatedsequenceentity1;
ClassDiagram.Class>> UpdateDetachedTest =>=>=> RelationalSchema.Table>> updatedetachedtest;
ClassDiagram.Class>> UpdateTimestampTest =>=>=> RelationalSchema.Table>> updatetimestamptest;
ClassDiagram.Class>> Voice =>=>=> RelationalSchema.Table>> voice;
ClassDiagram.Class>> GSM =>=>=> RelationalSchema.Table>> gsm;
ClassDiagram.Class>> Sky =>=>=> RelationalSchema.Table>> sky;
ClassDiagram.Class>> IncorrectEntity =>=>=> RelationalSchema.Table>> incorrectentity;
ClassDiagram.Class>> Storm =>=>=> RelationalSchema.Table>> storm;
ClassDiagram.Class>> BiggestForest =>=>=> RelationalSchema.Table>> biggestforest;
ClassDiagram.Class>> Customer =>=>=> RelationalSchema.Table>> customer;
ClassDiagram.Class>> Deal =>=>=> RelationalSchema.Table>> deal;
ClassDiagram.Class>> Lotz =>=>=> RelationalSchema.Table>> lotz;
ClassDiagram.Class>> DistrictUser =>=>=> RelationalSchema.Table>> districtuser;
ClassDiagram.Class>> Child =>=>=> RelationalSchema.Table>> child;
ClassDiagram.Class>> Order =>=>=> RelationalSchema.Table>> order;
ClassDiagram.Class>> ForestType =>=>=> RelationalSchema.Table>> foresttype;
ClassDiagram.Class>> Car =>=>=> RelationalSchema.Table>> car;
ClassDiagram.Class>> Parent =>=>=> RelationalSchema.Table>> parent;
ClassDiagram.Class>> TreeType =>=>=> RelationalSchema.Table>> treetype;
ClassDiagram.Class>> Item =>=>=> RelationalSchema.Table>> item;
ClassDiagram.Class>> Vendor =>=>=> RelationalSchema.Table>> vendor;
ClassDiagram.Class>> ZItemCost =>=>=> RelationalSchema.Table>> zitemcost;
ClassDiagram.Class>> WarehouseItem =>=>=> RelationalSchema.Table>> warehouseitem;
ClassDiagram.Class>> Node =>=>=> RelationalSchema.Table>> node;
ClassDiagram.Class>> Carz =>=>=> RelationalSchema.Table>> carz;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> Frame =>=>=> RelationalSchema.Table>> frame;
ClassDiagram.Class>> Lens =>=>=> RelationalSchema.Table>> lens;
ClassDiagram.Class>> OrderLine =>=>=> RelationalSchema.Table>> orderline;
ClassDiagram.Class>> Color =>=>=> RelationalSchema.Table>> color;
ClassDiagram.Class>> Owner =>=>=> RelationalSchema.Table>> owner;
ClassDiagram.Class>> Matrix =>=>=> RelationalSchema.Table>> matrix;
ClassDiagram.Class>> A =>=>=> RelationalSchema.Table>> a;
ClassDiagram.Class>> C =>=>=> RelationalSchema.Table>> c;
ClassDiagram.Class>> Poi =>=>=> RelationalSchema.Table>> poi;
ClassDiagram.Class>> RaceExecution =>=>=> RelationalSchema.Table>> raceexecution;
ClassDiagram.Class>> Widgets =>=>=> RelationalSchema.Table>> widgets;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> Query =>=>=> RelationalSchema.Table>> query;
ClassDiagram.Class>> Sale =>=>=> RelationalSchema.Table>> sale;
ClassDiagram.Class>> BugSystem =>=>=> RelationalSchema.Table>> bugsystem;
ClassDiagram.Class>> TestCourse =>=>=> RelationalSchema.Table>> testcourse;
ClassDiagram.Class>> Products =>=>=> RelationalSchema.Table>> products;
ClassDiagram.Class>> Boy =>=>=> RelationalSchema.Table>> boy;
ClassDiagram.Class>> EntityWithAnElementCollection =>=>=> RelationalSchema.Table>> entitywithanelementcollection;
ClassDiagram.Class>> SocialSecurityMoralAccount =>=>=> RelationalSchema.Table>> socialsecuritymoralaccount;
ClassDiagram.Class>> BusTrip =>=>=> RelationalSchema.Table>> bustrip;
ClassDiagram.Class>> Administration =>=>=> RelationalSchema.Table>> administration;
ClassDiagram.Class>> SocialSecurityPhysicalAccount =>=>=> RelationalSchema.Table>> socialsecurityphysicalaccount;
ClassDiagram.Class>> Company =>=>=> RelationalSchema.Table>> company;
ClassDiagram.Class>> TennisMatch =>=>=> RelationalSchema.Table>> tennismatch;
ClassDiagram.Class>> Match =>=>=> RelationalSchema.Table>> match;
ClassDiagram.Class>> JPAOverriddenAnnotationReaderTest =>=>=> RelationalSchema.Table>> jpaoverriddenannotationreadertest;
ClassDiagram.Class>> Father =>=>=> RelationalSchema.Table>> father;
ClassDiagram.Class>> Mother =>=>=> RelationalSchema.Table>> mother;
ClassDiagram.Class>> Son =>=>=> RelationalSchema.Table>> son;
ClassDiagram.Class>> WashingMachine =>=>=> RelationalSchema.Table>> washingmachine;
ClassDiagram.Class>> Peugot =>=>=> RelationalSchema.Table>> peugot;
ClassDiagram.Class>> PowerDrill =>=>=> RelationalSchema.Table>> powerdrill;
ClassDiagram.Class>> Topic =>=>=> RelationalSchema.Table>> topic;
ClassDiagram.Class>> CommunityBid =>=>=> RelationalSchema.Table>> communitybid;
ClassDiagram.Class>> Flight =>=>=> RelationalSchema.Table>> flight;
ClassDiagram.Class>> Bid =>=>=> RelationalSchema.Table>> bid;
ClassDiagram.Class>> Player =>=>=> RelationalSchema.Table>> player;
ClassDiagram.Class>> Forest =>=>=> RelationalSchema.Table>> forest;
ClassDiagram.Class>> FormalLastName =>=>=> RelationalSchema.Table>> formallastname;
ClassDiagram.Class>> Month =>=>=> RelationalSchema.Table>> month;
ClassDiagram.Class>> Doctor =>=>=> RelationalSchema.Table>> doctor;
ClassDiagram.Class>> ContactDetails =>=>=> RelationalSchema.Table>> contactdetails;
ClassDiagram.Class>> LocalContactDetails =>=>=> RelationalSchema.Table>> localcontactdetails;
ClassDiagram.Class>> Ransom =>=>=> RelationalSchema.Table>> ransom;
ClassDiagram.Class>> Narrative =>=>=> RelationalSchema.Table>> narrative;
ClassDiagram.Class>> Forest2 =>=>=> RelationalSchema.Table>> forest2;
ClassDiagram.Class>> Tree =>=>=> RelationalSchema.Table>> tree;
ClassDiagram.Class>> SoccerTeam =>=>=> RelationalSchema.Table>> soccerteam;
ClassDiagram.Class>> Name =>=>=> RelationalSchema.Table>> name;
ClassDiagram.Class>> ZipCode =>=>=> RelationalSchema.Table>> zipcode;
ClassDiagram.Class>> Address =>=>=> RelationalSchema.Table>> address;
ClassDiagram.Class>> Drill =>=>=> RelationalSchema.Table>> drill;
ClassDiagram.Class>> Car =>=>=> RelationalSchema.Table>> car;
ClassDiagram.Class>> Race =>=>=> RelationalSchema.Table>> race;
ClassDiagram.Class>> Project =>=>=> RelationalSchema.Table>> project;
ClassDiagram.Class>> Card =>=>=> RelationalSchema.Table>> card;
ClassDiagram.Class>> C =>=>=> RelationalSchema.Table>> c;
ClassDiagram.Class>> Droitacces =>=>=> RelationalSchema.Table>> droitacces;
ClassDiagram.Class>> B =>=>=> RelationalSchema.Table>> b;
ClassDiagram.Class>> Acces =>=>=> RelationalSchema.Table>> acces;
ClassDiagram.Class>> Benefserv =>=>=> RelationalSchema.Table>> benefserv;
ClassDiagram.Class>> Service =>=>=> RelationalSchema.Table>> service;
ClassDiagram.Class>> A =>=>=> RelationalSchema.Table>> a;
ClassDiagram.Class>> StoreCustomer =>=>=> RelationalSchema.Table>> storecustomer;
ClassDiagram.Class>> CardField =>=>=> RelationalSchema.Table>> cardfield;
ClassDiagram.Class>> CardKey =>=>=> RelationalSchema.Table>> cardkey;
ClassDiagram.Class>> Customers =>=>=> RelationalSchema.Table>> customers;
ClassDiagram.Class>> CourseStudent =>=>=> RelationalSchema.Table>> coursestudent;
ClassDiagram.Class>> Student =>=>=> RelationalSchema.Table>> student;
ClassDiagram.Class>> Store =>=>=> RelationalSchema.Table>> store;
ClassDiagram.Class>> ShoppingBaskets =>=>=> RelationalSchema.Table>> shoppingbaskets;
ClassDiagram.Class>> Course =>=>=> RelationalSchema.Table>> course;
ClassDiagram.Class>> BasketItems =>=>=> RelationalSchema.Table>> basketitems;
ClassDiagram.Class>> Customer =>=>=> RelationalSchema.Table>> customer;
ClassDiagram.Class>> Flight =>=>=> RelationalSchema.Table>> flight;
ClassDiagram.Class>> Country =>=>=> RelationalSchema.Table>> country;
ClassDiagram.Class>> State =>=>=> RelationalSchema.Table>> state;
ClassDiagram.Class>> Foobar =>=>=> RelationalSchema.Table>> foobar;
ClassDiagram.Class>> Photo =>=>=> RelationalSchema.Table>> photo;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> Attrset =>=>=> RelationalSchema.Table>> attrset;
ClassDiagram.Class>> SpaceShip =>=>=> RelationalSchema.Table>> spaceship;
ClassDiagram.Class>> Attrvalue =>=>=> RelationalSchema.Table>> attrvalue;
ClassDiagram.Class>> Mark =>=>=> RelationalSchema.Table>> mark;
ClassDiagram.Class>> Twilight =>=>=> RelationalSchema.Table>> twilight;
ClassDiagram.Class>> AllTables =>=>=> RelationalSchema.Table>> alltables;
ClassDiagram.Class>> CasimirParticle =>=>=> RelationalSchema.Table>> casimirparticle;
ClassDiagram.Class>> Dictionary =>=>=> RelationalSchema.Table>> dictionary;
ClassDiagram.Class>> NamedQueryTest =>=>=> RelationalSchema.Table>> namedquerytest;
ClassDiagram.Class>> Night =>=>=> RelationalSchema.Table>> night;
ClassDiagram.Class>> SynonymousDictionary =>=>=> RelationalSchema.Table>> synonymousdictionary;
ClassDiagram.Class>> Chaos =>=>=> RelationalSchema.Table>> chaos;
ClassDiagram.Class>> Employeegroup =>=>=> RelationalSchema.Table>> employeegroup;
ClassDiagram.Class>> Captain =>=>=> RelationalSchema.Table>> captain;
ClassDiagram.Class>> Area =>=>=> RelationalSchema.Table>> area;
ClassDiagram.Class>> NotFoundTest =>=>=> RelationalSchema.Table>> notfoundtest;
ClassDiagram.Class>> OneToOneNotFoundTest =>=>=> RelationalSchema.Table>> onetoonenotfoundtest;
ClassDiagram.Class>> CreationTimestampTest =>=>=> RelationalSchema.Table>> creationtimestamptest;
ClassDiagram.Class>> Color =>=>=> RelationalSchema.Table>> color;
ClassDiagram.Class>> CupHolder =>=>=> RelationalSchema.Table>> cupholder;
ClassDiagram.Class>> PowerSupply =>=>=> RelationalSchema.Table>> powersupply;
ClassDiagram.Class>> MinMax =>=>=> RelationalSchema.Table>> minmax;
ClassDiagram.Class>> Display =>=>=> RelationalSchema.Table>> display;
ClassDiagram.Class>> Screen =>=>=> RelationalSchema.Table>> screen;
ClassDiagram.Class>> MergeNotNullCollectionTest =>=>=> RelationalSchema.Table>> mergenotnullcollectiontest;
ClassDiagram.Class>> Address =>=>=> RelationalSchema.Table>> address;
ClassDiagram.Class>> Rock =>=>=> RelationalSchema.Table>> rock;
ClassDiagram.Class>> Range =>=>=> RelationalSchema.Table>> range;
ClassDiagram.Class>> Tv =>=>=> RelationalSchema.Table>> tv;
ClassDiagram.Class>> Music =>=>=> RelationalSchema.Table>> music;
ClassDiagram.Class>> TvOwner =>=>=> RelationalSchema.Table>> tvowner;
ClassDiagram.Class>> MergeNotNullCollectionUsingIdentityTest =>=>=> RelationalSchema.Table>> mergenotnullcollectionusingidentitytest;
ClassDiagram.Class>> Apple =>=>=> RelationalSchema.Table>> apple;
ClassDiagram.Class>> Alarm =>=>=> RelationalSchema.Table>> alarm;
ClassDiagram.Class>> Folder =>=>=> RelationalSchema.Table>> folder;
ClassDiagram.Class>> SymbolicLink =>=>=> RelationalSchema.Table>> symboliclink;
ClassDiagram.Class>> Client =>=>=> RelationalSchema.Table>> client;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> File =>=>=> RelationalSchema.Table>> file;
ClassDiagram.Class>> Asset =>=>=> RelationalSchema.Table>> asset;
ClassDiagram.Class>> ProgramExecution =>=>=> RelationalSchema.Table>> programexecution;
ClassDiagram.Class>> Company =>=>=> RelationalSchema.Table>> company;
ClassDiagram.Class>> PropertyAsset =>=>=> RelationalSchema.Table>> propertyasset;
ClassDiagram.Class>> Document =>=>=> RelationalSchema.Table>> document;
ClassDiagram.Class>> Sweater =>=>=> RelationalSchema.Table>> sweater;
ClassDiagram.Class>> Customer =>=>=> RelationalSchema.Table>> customer;
ClassDiagram.Class>> EventInformation =>=>=> RelationalSchema.Table>> eventinformation;
ClassDiagram.Class>> Parent =>=>=> RelationalSchema.Table>> parent;
ClassDiagram.Class>> Pool =>=>=> RelationalSchema.Table>> pool;
ClassDiagram.Class>> Clothing =>=>=> RelationalSchema.Table>> clothing;
ClassDiagram.Class>> Account =>=>=> RelationalSchema.Table>> account;
ClassDiagram.Class>> FinancialAsset =>=>=> RelationalSchema.Table>> financialasset;
ClassDiagram.Class>> SwimmingPool =>=>=> RelationalSchema.Table>> swimmingpool;
ClassDiagram.Class>> Tomato =>=>=> RelationalSchema.Table>> tomato;
ClassDiagram.Class>> Vegetable =>=>=> RelationalSchema.Table>> vegetable;
ClassDiagram.Class>> SubClass2 =>=>=> RelationalSchema.Table>> subclass2;
ClassDiagram.Class>> BaseClass2 =>=>=> RelationalSchema.Table>> baseclass2;
ClassDiagram.Class>> BaseClass =>=>=> RelationalSchema.Table>> baseclass;
ClassDiagram.Class>> SubClass =>=>=> RelationalSchema.Table>> subclass;
ClassDiagram.Class>> Folder =>=>=> RelationalSchema.Table>> folder;
ClassDiagram.Class>> File =>=>=> RelationalSchema.Table>> file;
ClassDiagram.Class>> SymbolicLink =>=>=> RelationalSchema.Table>> symboliclink;
ClassDiagram.Class>> Document =>=>=> RelationalSchema.Table>> document;
ClassDiagram.Class>> Folder =>=>=> RelationalSchema.Table>> folder;
ClassDiagram.Class>> Document =>=>=> RelationalSchema.Table>> document;
ClassDiagram.Class>> SymbolicLink =>=>=> RelationalSchema.Table>> symboliclink;
ClassDiagram.Class>> File =>=>=> RelationalSchema.Table>> file;
ClassDiagram.Class>> House =>=>=> RelationalSchema.Table>> house;
ClassDiagram.Class>> Noise =>=>=> RelationalSchema.Table>> noise;
ClassDiagram.Class>> DuplicatedDiscriminatorValueTest =>=>=> RelationalSchema.Table>> duplicateddiscriminatorvaluetest;
ClassDiagram.Class>> Trash =>=>=> RelationalSchema.Table>> trash;
ClassDiagram.Class>> Music =>=>=> RelationalSchema.Table>> music;
ClassDiagram.Class>> PaperTrash =>=>=> RelationalSchema.Table>> papertrash;
ClassDiagram.Class>> Building =>=>=> RelationalSchema.Table>> building;
ClassDiagram.Class>> Funk =>=>=> RelationalSchema.Table>> funk;
ClassDiagram.Class>> Rock =>=>=> RelationalSchema.Table>> rock;
ClassDiagram.Class>> Carrot =>=>=> RelationalSchema.Table>> carrot;
ClassDiagram.Class>> Fruit =>=>=> RelationalSchema.Table>> fruit;
ClassDiagram.Class>> AmericaCupClass =>=>=> RelationalSchema.Table>> americacupclass;
ClassDiagram.Class>> Bid =>=>=> RelationalSchema.Table>> bid;
ClassDiagram.Class>> Item =>=>=> RelationalSchema.Table>> item;
ClassDiagram.Class>> HighestBid =>=>=> RelationalSchema.Table>> highestbid;
ClassDiagram.Class>> Trip =>=>=> RelationalSchema.Table>> trip;
ClassDiagram.Class>> Location =>=>=> RelationalSchema.Table>> location;
ClassDiagram.Class>> Addr =>=>=> RelationalSchema.Table>> addr;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> PropertyRecord =>=>=> RelationalSchema.Table>> propertyrecord;
ClassDiagram.Class>> PhoneNumber =>=>=> RelationalSchema.Table>> phonenumber;
ClassDiagram.Class>> BlogEntry =>=>=> RelationalSchema.Table>> blogentry;
ClassDiagram.Class>> SocialSite =>=>=> RelationalSchema.Table>> socialsite;
ClassDiagram.Class>> InheritedAttributeOverridingTest =>=>=> RelationalSchema.Table>> inheritedattributeoverridingtest;
ClassDiagram.Class>> Version =>=>=> RelationalSchema.Table>> version;
ClassDiagram.Class>> ExchangeOffice =>=>=> RelationalSchema.Table>> exchangeoffice;
ClassDiagram.Class>> AddressEntry =>=>=> RelationalSchema.Table>> addressentry;
ClassDiagram.Class>> News =>=>=> RelationalSchema.Table>> news;
ClassDiagram.Class>> Painter =>=>=> RelationalSchema.Table>> painter;
ClassDiagram.Class>> Atmosphere =>=>=> RelationalSchema.Table>> atmosphere;
ClassDiagram.Class>> Painting =>=>=> RelationalSchema.Table>> painting;
ClassDiagram.Class>> Atmosphere =>=>=> RelationalSchema.Table>> atmosphere;
ClassDiagram.Class>> GenerationUser =>=>=> RelationalSchema.Table>> generationuser;
ClassDiagram.Class>> Currency =>=>=> RelationalSchema.Table>> currency;
ClassDiagram.Class>> Gas =>=>=> RelationalSchema.Table>> gas;
ClassDiagram.Class>> Dress =>=>=> RelationalSchema.Table>> dress;
ClassDiagram.Class>> Trainee =>=>=> RelationalSchema.Table>> trainee;
ClassDiagram.Class>> Software =>=>=> RelationalSchema.Table>> software;
ClassDiagram.Class>> Newspaper =>=>=> RelationalSchema.Table>> newspaper;
ClassDiagram.Class>> Drawer =>=>=> RelationalSchema.Table>> drawer;
ClassDiagram.Class>> Training =>=>=> RelationalSchema.Table>> training;
ClassDiagram.Class>> GenerationGroup =>=>=> RelationalSchema.Table>> generationgroup;
ClassDiagram.Class>> AlphabeticalDirectory =>=>=> RelationalSchema.Table>> alphabeticaldirectory;
ClassDiagram.Class>> Wardrobe =>=>=> RelationalSchema.Table>> wardrobe;
ClassDiagram.Class>> PressReleaseAgency =>=>=> RelationalSchema.Table>> pressreleaseagency;
ClassDiagram.Class>> AddressBook =>=>=> RelationalSchema.Table>> addressbook;
ClassDiagram.Class>> GasKey =>=>=> RelationalSchema.Table>> gaskey;
ClassDiagram.Class>> ExchangeRate =>=>=> RelationalSchema.Table>> exchangerate;
ClassDiagram.Class>> JoinColumnOrFormulaTest =>=>=> RelationalSchema.Table>> joincolumnorformulatest;
ClassDiagram.Class>> FormulaWithAliasTest =>=>=> RelationalSchema.Table>> formulawithaliastest;
ClassDiagram.Class>> FormulaWithColumnTypesTest =>=>=> RelationalSchema.Table>> formulawithcolumntypestest;
ClassDiagram.Class>> FormulaWithPartitionByTest =>=>=> RelationalSchema.Table>> formulawithpartitionbytest;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> MedicalHistory =>=>=> RelationalSchema.Table>> medicalhistory;
ClassDiagram.Class>> MedicalHistory =>=>=> RelationalSchema.Table>> medicalhistory;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> Dependent =>=>=> RelationalSchema.Table>> dependent;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> ExclusiveDependent =>=>=> RelationalSchema.Table>> exclusivedependent;
ClassDiagram.Class>> Dependent =>=>=> RelationalSchema.Table>> dependent;
ClassDiagram.Class>> CustomerInventory =>=>=> RelationalSchema.Table>> customerinventory;
ClassDiagram.Class>> Item =>=>=> RelationalSchema.Table>> item;
ClassDiagram.Class>> CustomerTwo =>=>=> RelationalSchema.Table>> customertwo;
ClassDiagram.Class>> CustomerInventoryTwo =>=>=> RelationalSchema.Table>> customerinventorytwo;
ClassDiagram.Class>> Customer =>=>=> RelationalSchema.Table>> customer;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> CustomerInventory =>=>=> RelationalSchema.Table>> customerinventory;
ClassDiagram.Class>> Item =>=>=> RelationalSchema.Table>> item;
ClassDiagram.Class>> Customer =>=>=> RelationalSchema.Table>> customer;
ClassDiagram.Class>> Dependent =>=>=> RelationalSchema.Table>> dependent;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> MedicalHistory =>=>=> RelationalSchema.Table>> medicalhistory;
ClassDiagram.Class>> MedicalHistory =>=>=> RelationalSchema.Table>> medicalhistory;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> MedicalHistory =>=>=> RelationalSchema.Table>> medicalhistory;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> CompositeIdDerivedIdWithIdClassTest =>=>=> RelationalSchema.Table>> compositeidderivedidwithidclasstest;
ClassDiagram.Class>> Product =>=>=> RelationalSchema.Table>> product;
ClassDiagram.Class>> Bar =>=>=> RelationalSchema.Table>> bar;
ClassDiagram.Class>> Foo =>=>=> RelationalSchema.Table>> foo;
ClassDiagram.Class>> PersonInfo =>=>=> RelationalSchema.Table>> personinfo;
ClassDiagram.Class>> OrderLine =>=>=> RelationalSchema.Table>> orderline;
ClassDiagram.Class>> Dependent =>=>=> RelationalSchema.Table>> dependent;
ClassDiagram.Class>> Order =>=>=> RelationalSchema.Table>> order;
ClassDiagram.Class>> Dependent =>=>=> RelationalSchema.Table>> dependent;
ClassDiagram.Class>> Dependent =>=>=> RelationalSchema.Table>> dependent;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> Dependent =>=>=> RelationalSchema.Table>> dependent;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> Dependent =>=>=> RelationalSchema.Table>> dependent;
ClassDiagram.Class>> Policy =>=>=> RelationalSchema.Table>> policy;
ClassDiagram.Class>> Dependent =>=>=> RelationalSchema.Table>> dependent;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> Dependent =>=>=> RelationalSchema.Table>> dependent;
ClassDiagram.Class>> Policy =>=>=> RelationalSchema.Table>> policy;
ClassDiagram.Class>> Dependent =>=>=> RelationalSchema.Table>> dependent;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> MedicalHistory =>=>=> RelationalSchema.Table>> medicalhistory;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> MedicalHistory =>=>=> RelationalSchema.Table>> medicalhistory;
ClassDiagram.Class>> FinancialHistory =>=>=> RelationalSchema.Table>> financialhistory;
ClassDiagram.Class>> MedicalHistory =>=>=> RelationalSchema.Table>> medicalhistory;
ClassDiagram.Class>> FinancialHistory =>=>=> RelationalSchema.Table>> financialhistory;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> Simple =>=>=> RelationalSchema.Table>> simple;
ClassDiagram.Class>> Employer =>=>=> RelationalSchema.Table>> employer;
ClassDiagram.Class>> BigBed =>=>=> RelationalSchema.Table>> bigbed;
ClassDiagram.Class>> Course2 =>=>=> RelationalSchema.Table>> course2;
ClassDiagram.Class>> Horse =>=>=> RelationalSchema.Table>> horse;
ClassDiagram.Class>> Course6 =>=>=> RelationalSchema.Table>> course6;
ClassDiagram.Class>> Shape =>=>=> RelationalSchema.Table>> shape;
ClassDiagram.Class>> Gardenshed =>=>=> RelationalSchema.Table>> gardenshed;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> Course3 =>=>=> RelationalSchema.Table>> course3;
ClassDiagram.Class>> Circle =>=>=> RelationalSchema.Table>> circle;
ClassDiagram.Class>> Animal =>=>=> RelationalSchema.Table>> animal;
ClassDiagram.Class>> Furniture =>=>=> RelationalSchema.Table>> furniture;
ClassDiagram.Class>> Course7 =>=>=> RelationalSchema.Table>> course7;
ClassDiagram.Class>> Chair =>=>=> RelationalSchema.Table>> chair;
ClassDiagram.Class>> Course1 =>=>=> RelationalSchema.Table>> course1;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> Course5 =>=>=> RelationalSchema.Table>> course5;
ClassDiagram.Class>> Bed =>=>=> RelationalSchema.Table>> bed;
ClassDiagram.Class>> Student =>=>=> RelationalSchema.Table>> student;
ClassDiagram.Class>> Course4 =>=>=> RelationalSchema.Table>> course4;
ClassDiagram.Class>> BigBed =>=>=> RelationalSchema.Table>> bigbed;
ClassDiagram.Class>> Square =>=>=> RelationalSchema.Table>> square;
ClassDiagram.Class>> Course8 =>=>=> RelationalSchema.Table>> course8;
ClassDiagram.Class>> Being =>=>=> RelationalSchema.Table>> being;
ClassDiagram.Class>> Waiter =>=>=> RelationalSchema.Table>> waiter;
ClassDiagram.Class>> Driver =>=>=> RelationalSchema.Table>> driver;
ClassDiagram.Class>> RentalCar =>=>=> RelationalSchema.Table>> rentalcar;
ClassDiagram.Class>> Boy =>=>=> RelationalSchema.Table>> boy;
ClassDiagram.Class>> Cook =>=>=> RelationalSchema.Table>> cook;
ClassDiagram.Class>> Tourist =>=>=> RelationalSchema.Table>> tourist;
ClassDiagram.Class>> Bed =>=>=> RelationalSchema.Table>> bed;
ClassDiagram.Class>> Foobar =>=>=> RelationalSchema.Table>> foobar;
ClassDiagram.Class>> Gardenshed =>=>=> RelationalSchema.Table>> gardenshed;
ClassDiagram.Class>> AttributeAccessorTest =>=>=> RelationalSchema.Table>> attributeaccessortest;
ClassDiagram.Class>> Chair =>=>=> RelationalSchema.Table>> chair;
ClassDiagram.Class>> Furniture =>=>=> RelationalSchema.Table>> furniture;
ClassDiagram.Class>> SavingsAccount =>=>=> RelationalSchema.Table>> savingsaccount;
ClassDiagram.Class>> Account =>=>=> RelationalSchema.Table>> account;
ClassDiagram.Class>> Company =>=>=> RelationalSchema.Table>> company;
ClassDiagram.Class>> Vehicule =>=>=> RelationalSchema.Table>> vehicule;
ClassDiagram.Class>> Truck =>=>=> RelationalSchema.Table>> truck;
ClassDiagram.Class>> Antenna =>=>=> RelationalSchema.Table>> antenna;
ClassDiagram.Class>> VMTimestamped =>=>=> RelationalSchema.Table>> vmtimestamped;
ClassDiagram.Class>> Conductor =>=>=> RelationalSchema.Table>> conductor;
ClassDiagram.Class>> ProfessionalAgreement =>=>=> RelationalSchema.Table>> professionalagreement;
ClassDiagram.Class>> DBTimestamped =>=>=> RelationalSchema.Table>> dbtimestamped;
ClassDiagram.Class>> Staff =>=>=> RelationalSchema.Table>> staff;
ClassDiagram.Class>> TuplizerInstantiatesByteBuddySubclassTest =>=>=> RelationalSchema.Table>> tuplizerinstantiatesbytebuddysubclasstest;
ClassDiagram.Class>> Cuisine =>=>=> RelationalSchema.Table>> cuisine;
ClassDiagram.Class>> Country =>=>=> RelationalSchema.Table>> country;
ClassDiagram.Class>> Plane =>=>=> RelationalSchema.Table>> plane;
ClassDiagram.Class>> Player =>=>=> RelationalSchema.Table>> player;
ClassDiagram.Class>> LoaderWithInvalidQueryTest =>=>=> RelationalSchema.Table>> loaderwithinvalidquerytest;
ClassDiagram.Class>> Team =>=>=> RelationalSchema.Table>> team;
ClassDiagram.Class>> Model =>=>=> RelationalSchema.Table>> model;
ClassDiagram.Class>> Street =>=>=> RelationalSchema.Table>> street;
ClassDiagram.Class>> Politician =>=>=> RelationalSchema.Table>> politician;
ClassDiagram.Class>> Box =>=>=> RelationalSchema.Table>> box;
ClassDiagram.Class>> A =>=>=> RelationalSchema.Table>> a;
ClassDiagram.Class>> Parent =>=>=> RelationalSchema.Table>> parent;
ClassDiagram.Class>> Post =>=>=> RelationalSchema.Table>> post;
ClassDiagram.Class>> Soldier =>=>=> RelationalSchema.Table>> soldier;
ClassDiagram.Class>> City =>=>=> RelationalSchema.Table>> city;
ClassDiagram.Class>> BankAccount =>=>=> RelationalSchema.Table>> bankaccount;
ClassDiagram.Class>> Visitor =>=>=> RelationalSchema.Table>> visitor;
ClassDiagram.Class>> Order =>=>=> RelationalSchema.Table>> order;
ClassDiagram.Class>> Comment =>=>=> RelationalSchema.Table>> comment;
ClassDiagram.Class>> Child =>=>=> RelationalSchema.Table>> child;
ClassDiagram.Class>> Troop =>=>=> RelationalSchema.Table>> troop;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> Asset =>=>=> RelationalSchema.Table>> asset;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> OrderItem =>=>=> RelationalSchema.Table>> orderitem;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> Tiger =>=>=> RelationalSchema.Table>> tiger;
ClassDiagram.Class>> PoliticalParty =>=>=> RelationalSchema.Table>> politicalparty;
ClassDiagram.Class>> B =>=>=> RelationalSchema.Table>> b;
ClassDiagram.Class>> Zoo =>=>=> RelationalSchema.Table>> zoo;
ClassDiagram.Class>> Monkey =>=>=> RelationalSchema.Table>> monkey;
ClassDiagram.Class>> Computer =>=>=> RelationalSchema.Table>> computer;
ClassDiagram.Class>> Transaction =>=>=> RelationalSchema.Table>> transaction;
ClassDiagram.Class>> OneToManyTest =>=>=> RelationalSchema.Table>> onetomanytest;
ClassDiagram.Class>> Item =>=>=> RelationalSchema.Table>> item;
ClassDiagram.Class>> C =>=>=> RelationalSchema.Table>> c;
ClassDiagram.Class>> Forum =>=>=> RelationalSchema.Table>> forum;
ClassDiagram.Class>> Organisation =>=>=> RelationalSchema.Table>> organisation;
ClassDiagram.Class>> OrganisationUser =>=>=> RelationalSchema.Table>> organisationuser;
ClassDiagram.Class>> Trainer =>=>=> RelationalSchema.Table>> trainer;
ClassDiagram.Class>> Contest =>=>=> RelationalSchema.Table>> contest;
ClassDiagram.Class>> Competitor =>=>=> RelationalSchema.Table>> competitor;
ClassDiagram.Class>> ParentHierarchy22 =>=>=> RelationalSchema.Table>> parenthierarchy22;
ClassDiagram.Class>> ChildHierarchy22 =>=>=> RelationalSchema.Table>> childhierarchy22;
ClassDiagram.Class>> ChildHierarchy1 =>=>=> RelationalSchema.Table>> childhierarchy1;
ClassDiagram.Class>> ParentHierarchy1 =>=>=> RelationalSchema.Table>> parenthierarchy1;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> Branch =>=>=> RelationalSchema.Table>> branch;
ClassDiagram.Class>> Leaf =>=>=> RelationalSchema.Table>> leaf;
ClassDiagram.Class>> Stay =>=>=> RelationalSchema.Table>> stay;
ClassDiagram.Class>> T800 =>=>=> RelationalSchema.Table>> t800;
ClassDiagram.Class>> Machine =>=>=> RelationalSchema.Table>> machine;
ClassDiagram.Class>> Component =>=>=> RelationalSchema.Table>> component;
ClassDiagram.Class>> Product =>=>=> RelationalSchema.Table>> product;
ClassDiagram.Class>> Robot =>=>=> RelationalSchema.Table>> robot;
ClassDiagram.Class>> Deck =>=>=> RelationalSchema.Table>> deck;
ClassDiagram.Class>> Card =>=>=> RelationalSchema.Table>> card;
ClassDiagram.Class>> Discount =>=>=> RelationalSchema.Table>> discount;
ClassDiagram.Class>> SomeOtherEntity =>=>=> RelationalSchema.Table>> someotherentity;
ClassDiagram.Class>> SomeEntity =>=>=> RelationalSchema.Table>> someentity;
ClassDiagram.Class>> Ticket =>=>=> RelationalSchema.Table>> ticket;
ClassDiagram.Class>> SocialNetworkProfile =>=>=> RelationalSchema.Table>> socialnetworkprofile;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> EntityEnum =>=>=> RelationalSchema.Table>> entityenum;
ClassDiagram.Class>> EnumeratedSmokeTest =>=>=> RelationalSchema.Table>> enumeratedsmoketest;
ClassDiagram.Class>> EntityMapEnum =>=>=> RelationalSchema.Table>> entitymapenum;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> Human =>=>=> RelationalSchema.Table>> human;
ClassDiagram.Class>> Mammal =>=>=> RelationalSchema.Table>> mammal;
ClassDiagram.Class>> Club =>=>=> RelationalSchema.Table>> club;
ClassDiagram.Class>> Human =>=>=> RelationalSchema.Table>> human;
ClassDiagram.Class>> Mammal =>=>=> RelationalSchema.Table>> mammal;
ClassDiagram.Class>> Animal =>=>=> RelationalSchema.Table>> animal;
ClassDiagram.Class>> Human =>=>=> RelationalSchema.Table>> human;
ClassDiagram.Class>> Animal =>=>=> RelationalSchema.Table>> animal;
ClassDiagram.Class>> Mammal =>=>=> RelationalSchema.Table>> mammal;
ClassDiagram.Class>> Mammal =>=>=> RelationalSchema.Table>> mammal;
ClassDiagram.Class>> Animal =>=>=> RelationalSchema.Table>> animal;
ClassDiagram.Class>> Human =>=>=> RelationalSchema.Table>> human;
ClassDiagram.Class>> Ferry =>=>=> RelationalSchema.Table>> ferry;
ClassDiagram.Class>> Supplier =>=>=> RelationalSchema.Table>> supplier;
ClassDiagram.Class>> GroupWithSet =>=>=> RelationalSchema.Table>> groupwithset;
ClassDiagram.Class>> BuildingCompany =>=>=> RelationalSchema.Table>> buildingcompany;
ClassDiagram.Class>> ProgramManager =>=>=> RelationalSchema.Table>> programmanager;
ClassDiagram.Class>> PhoneNumber =>=>=> RelationalSchema.Table>> phonenumber;
ClassDiagram.Class>> Employer =>=>=> RelationalSchema.Table>> employer;
ClassDiagram.Class>> InspectorPrefixes =>=>=> RelationalSchema.Table>> inspectorprefixes;
ClassDiagram.Class>> Group =>=>=> RelationalSchema.Table>> group;
ClassDiagram.Class>> Friend =>=>=> RelationalSchema.Table>> friend;
ClassDiagram.Class>> Item =>=>=> RelationalSchema.Table>> item;
ClassDiagram.Class>> PhoneNumber =>=>=> RelationalSchema.Table>> phonenumber;
ClassDiagram.Class>> Store =>=>=> RelationalSchema.Table>> store;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> KnownClient =>=>=> RelationalSchema.Table>> knownclient;
ClassDiagram.Class>> City =>=>=> RelationalSchema.Table>> city;
ClassDiagram.Class>> Category =>=>=> RelationalSchema.Table>> category;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> Building =>=>=> RelationalSchema.Table>> building;
ClassDiagram.Class>> Man =>=>=> RelationalSchema.Table>> man;
ClassDiagram.Class>> City =>=>=> RelationalSchema.Table>> city;
ClassDiagram.Class>> Zone =>=>=> RelationalSchema.Table>> zone;
ClassDiagram.Class>> Contractor =>=>=> RelationalSchema.Table>> contractor;
ClassDiagram.Class>> Woman =>=>=> RelationalSchema.Table>> woman;
ClassDiagram.Class>> Cat =>=>=> RelationalSchema.Table>> cat;
ClassDiagram.Class>> KnownClient =>=>=> RelationalSchema.Table>> knownclient;
ClassDiagram.Class>> Store =>=>=> RelationalSchema.Table>> store;
ClassDiagram.Class>> Permission =>=>=> RelationalSchema.Table>> permission;
ClassDiagram.Class>> Inspector =>=>=> RelationalSchema.Table>> inspector;
ClassDiagram.Class>> Luggage =>=>=> RelationalSchema.Table>> luggage;
ClassDiagram.Class>> HousePlaces =>=>=> RelationalSchema.Table>> houseplaces;
ClassDiagram.Class>> ItemCost =>=>=> RelationalSchema.Table>> itemcost;
ClassDiagram.Class>> Clothes =>=>=> RelationalSchema.Table>> clothes;
ClassDiagram.Class>> Item =>=>=> RelationalSchema.Table>> item;
ClassDiagram.Class>> House =>=>=> RelationalSchema.Table>> house;
ClassDiagram.Class>> Rambler =>=>=> RelationalSchema.Table>> rambler;
ClassDiagram.Class>> Inhabitant =>=>=> RelationalSchema.Table>> inhabitant;
ClassDiagram.Class>> Vendor =>=>=> RelationalSchema.Table>> vendor;
ClassDiagram.Class>> WarehouseItem =>=>=> RelationalSchema.Table>> warehouseitem;
ClassDiagram.Class>> Postman =>=>=> RelationalSchema.Table>> postman;
ClassDiagram.Class>> Bag =>=>=> RelationalSchema.Table>> bag;
ClassDiagram.Class>> Place =>=>=> RelationalSchema.Table>> place;
ClassDiagram.Class>> Customer =>=>=> RelationalSchema.Table>> customer;
ClassDiagram.Class>> Entity2 =>=>=> RelationalSchema.Table>> entity2;
ClassDiagram.Class>> Entity1 =>=>=> RelationalSchema.Table>> entity1;
ClassDiagram.Class>> Dvd =>=>=> RelationalSchema.Table>> dvd;
ClassDiagram.Class>> A =>=>=> RelationalSchema.Table>> a;
ClassDiagram.Class>> Address =>=>=> RelationalSchema.Table>> address;
ClassDiagram.Class>> LongKeyNamingStrategyTest =>=>=> RelationalSchema.Table>> longkeynamingstrategytest;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> CollectionAsBasicTest =>=>=> RelationalSchema.Table>> collectionasbasictest;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> Child =>=>=> RelationalSchema.Table>> child;
ClassDiagram.Class>> CodedPairSetHolder =>=>=> RelationalSchema.Table>> codedpairsetholder;
ClassDiagram.Class>> Parent =>=>=> RelationalSchema.Table>> parent;
ClassDiagram.Class>> CodedPairHolder =>=>=> RelationalSchema.Table>> codedpairholder;
ClassDiagram.Class>> Tooth =>=>=> RelationalSchema.Table>> tooth;
ClassDiagram.Class>> Mouth =>=>=> RelationalSchema.Table>> mouth;
ClassDiagram.Class>> Language =>=>=> RelationalSchema.Table>> language;
ClassDiagram.Class>> Company =>=>=> RelationalSchema.Table>> company;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> Message =>=>=> RelationalSchema.Table>> message;
ClassDiagram.Class>> FoodItem =>=>=> RelationalSchema.Table>> fooditem;
ClassDiagram.Class>> Product =>=>=> RelationalSchema.Table>> product;
ClassDiagram.Class>> Menu =>=>=> RelationalSchema.Table>> menu;
ClassDiagram.Class>> Manufacturer =>=>=> RelationalSchema.Table>> manufacturer;
ClassDiagram.Class>> Contract =>=>=> RelationalSchema.Table>> contract;
ClassDiagram.Class>> Model =>=>=> RelationalSchema.Table>> model;
ClassDiagram.Class>> ProductSqlServer =>=>=> RelationalSchema.Table>> productsqlserver;
ClassDiagram.Class>> MyEntity =>=>=> RelationalSchema.Table>> myentity;
ClassDiagram.Class>> ContactImpl =>=>=> RelationalSchema.Table>> contactimpl;
ClassDiagram.Class>> UserImpl =>=>=> RelationalSchema.Table>> userimpl;
ClassDiagram.Class>> Flight =>=>=> RelationalSchema.Table>> flight;
ClassDiagram.Class>> Category =>=>=> RelationalSchema.Table>> category;
ClassDiagram.Class>> Printer =>=>=> RelationalSchema.Table>> printer;
ClassDiagram.Class>> Bug =>=>=> RelationalSchema.Table>> bug;
ClassDiagram.Class>> PrinterCable =>=>=> RelationalSchema.Table>> printercable;
ClassDiagram.Class>> AttributeOverrideEnhancedUserTypeTest =>=>=> RelationalSchema.Table>> attributeoverrideenhancedusertypetest;
ClassDiagram.Class>> BasicAttributeOverrideTest =>=>=> RelationalSchema.Table>> basicattributeoverridetest;
ClassDiagram.Class>> Investor =>=>=> RelationalSchema.Table>> investor;
ClassDiagram.Class>> Customer =>=>=> RelationalSchema.Table>> customer;
ClassDiagram.Class>> Customer =>=>=> RelationalSchema.Table>> customer;
ClassDiagram.Class>> EmbeddableWithOneToMany_HHH_11302_Test =>=>=> RelationalSchema.Table>> embeddablewithonetomany_hhh_11302_test;
ClassDiagram.Class>> EmbeddableWithManyToMany_HHH_11302_Test =>=>=> RelationalSchema.Table>> embeddablewithmanytomany_hhh_11302_test;
ClassDiagram.Class>> EmbeddableWithOneToMany_HHH_8860_Test =>=>=> RelationalSchema.Table>> embeddablewithonetomany_hhh_8860_test;
ClassDiagram.Class>> EmbeddableWithOneToMany_HHH_8564_Test =>=>=> RelationalSchema.Table>> embeddablewithonetomany_hhh_8564_test;
ClassDiagram.Class>> C =>=>=> RelationalSchema.Table>> c;
ClassDiagram.Class>> ClassB =>=>=> RelationalSchema.Table>> classb;
ClassDiagram.Class>> B =>=>=> RelationalSchema.Table>> b;
ClassDiagram.Class>> ClassC =>=>=> RelationalSchema.Table>> classc;
ClassDiagram.Class>> D =>=>=> RelationalSchema.Table>> d;
ClassDiagram.Class>> ClassA =>=>=> RelationalSchema.Table>> classa;
ClassDiagram.Class>> ClassD =>=>=> RelationalSchema.Table>> classd;
ClassDiagram.Class>> A =>=>=> RelationalSchema.Table>> a;
ClassDiagram.Class>> InternetProvider =>=>=> RelationalSchema.Table>> internetprovider;
ClassDiagram.Class>> SpreadDeal =>=>=> RelationalSchema.Table>> spreaddeal;
ClassDiagram.Class>> Book =>=>=> RelationalSchema.Table>> book;
ClassDiagram.Class>> CorpType =>=>=> RelationalSchema.Table>> corptype;
ClassDiagram.Class>> Alias =>=>=> RelationalSchema.Table>> alias;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> AddressType =>=>=> RelationalSchema.Table>> addresstype;
ClassDiagram.Class>> Manager =>=>=> RelationalSchema.Table>> manager;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> Nationality =>=>=> RelationalSchema.Table>> nationality;
ClassDiagram.Class>> RegionalArticle =>=>=> RelationalSchema.Table>> regionalarticle;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> Country =>=>=> RelationalSchema.Table>> country;
ClassDiagram.Class>> VanillaSwap =>=>=> RelationalSchema.Table>> vanillaswap;
ClassDiagram.Class>> FavoriteThings =>=>=> RelationalSchema.Table>> favoritethings;
ClassDiagram.Class>> WealthyPerson =>=>=> RelationalSchema.Table>> wealthyperson;
ClassDiagram.Class>> EntityWithNestedEmbeddables =>=>=> RelationalSchema.Table>> entitywithnestedembeddables;
ClassDiagram.Class>> Passport =>=>=> RelationalSchema.Table>> passport;
ClassDiagram.Class>> Customer =>=>=> RelationalSchema.Table>> customer;
ClassDiagram.Class>> Customer4 =>=>=> RelationalSchema.Table>> customer4;
ClassDiagram.Class>> SupportTickets =>=>=> RelationalSchema.Table>> supporttickets;
ClassDiagram.Class>> Customer5 =>=>=> RelationalSchema.Table>> customer5;
ClassDiagram.Class>> Customer3 =>=>=> RelationalSchema.Table>> customer3;
ClassDiagram.Class>> Customer2 =>=>=> RelationalSchema.Table>> customer2;
ClassDiagram.Class>> Country =>=>=> RelationalSchema.Table>> country;
ClassDiagram.Class>> Order =>=>=> RelationalSchema.Table>> order;
ClassDiagram.Class>> UpdateTimeStampInheritanceTest =>=>=> RelationalSchema.Table>> updatetimestampinheritancetest;
ClassDiagram.Class>> Parent =>=>=> RelationalSchema.Table>> parent;
ClassDiagram.Class>> Presenter =>=>=> RelationalSchema.Table>> presenter;
ClassDiagram.Class>> Product =>=>=> RelationalSchema.Table>> product;
ClassDiagram.Class>> A =>=>=> RelationalSchema.Table>> a;
ClassDiagram.Class>> TvProgram =>=>=> RelationalSchema.Table>> tvprogram;
ClassDiagram.Class>> Channel =>=>=> RelationalSchema.Table>> channel;
ClassDiagram.Class>> Card =>=>=> RelationalSchema.Table>> card;
ClassDiagram.Class>> CardField =>=>=> RelationalSchema.Table>> cardfield;
ClassDiagram.Class>> Key =>=>=> RelationalSchema.Table>> key;
ClassDiagram.Class>> Child =>=>=> RelationalSchema.Table>> child;
ClassDiagram.Class>> LittleGenius =>=>=> RelationalSchema.Table>> littlegenius;
ClassDiagram.Class>> Order =>=>=> RelationalSchema.Table>> order;
ClassDiagram.Class>> CompositeIdIdentityTest =>=>=> RelationalSchema.Table>> compositeididentitytest;
ClassDiagram.Class>> SomeEntity =>=>=> RelationalSchema.Table>> someentity;
ClassDiagram.Class>> C =>=>=> RelationalSchema.Table>> c;
ClassDiagram.Class>> TvProgramIdClass =>=>=> RelationalSchema.Table>> tvprogramidclass;
ClassDiagram.Class>> TvMagazin =>=>=> RelationalSchema.Table>> tvmagazin;
ClassDiagram.Class>> OrderLine =>=>=> RelationalSchema.Table>> orderline;
ClassDiagram.Class>> B =>=>=> RelationalSchema.Table>> b;
ClassDiagram.Class>> IntegerProperty =>=>=> RelationalSchema.Table>> integerproperty;
ClassDiagram.Class>> PropertySet =>=>=> RelationalSchema.Table>> propertyset;
ClassDiagram.Class>> CharProperty =>=>=> RelationalSchema.Table>> charproperty;
ClassDiagram.Class>> StringProperty =>=>=> RelationalSchema.Table>> stringproperty;
ClassDiagram.Class>> LongProperty =>=>=> RelationalSchema.Table>> longproperty;
ClassDiagram.Class>> PropertyMap =>=>=> RelationalSchema.Table>> propertymap;
ClassDiagram.Class>> PropertyList =>=>=> RelationalSchema.Table>> propertylist;
ClassDiagram.Class>> SportCar =>=>=> RelationalSchema.Table>> sportcar;
ClassDiagram.Class>> MarketRegion =>=>=> RelationalSchema.Table>> marketregion;
ClassDiagram.Class>> Car =>=>=> RelationalSchema.Table>> car;
ClassDiagram.Class>> SomeGuy =>=>=> RelationalSchema.Table>> someguy;
ClassDiagram.Class>> PaperType =>=>=> RelationalSchema.Table>> papertype;
ClassDiagram.Class>> DNA =>=>=> RelationalSchema.Table>> dna;
ClassDiagram.Class>> WildEntity =>=>=> RelationalSchema.Table>> wildentity;
ClassDiagram.Class>> Classes =>=>=> RelationalSchema.Table>> classes;
ClassDiagram.Class>> Dummy =>=>=> RelationalSchema.Table>> dummy;
ClassDiagram.Class>> Paper =>=>=> RelationalSchema.Table>> paper;
ClassDiagram.Class>> Price =>=>=> RelationalSchema.Table>> price;
ClassDiagram.Class>> Gene =>=>=> RelationalSchema.Table>> gene;
ClassDiagram.Class>> A320 =>=>=> RelationalSchema.Table>> a320;
ClassDiagram.Class>> Importer =>=>=> RelationalSchema.Table>> importer;
ClassDiagram.Class>> Car =>=>=> RelationalSchema.Table>> car;
ClassDiagram.Class>> ListMappingTest =>=>=> RelationalSchema.Table>> listmappingtest;
ClassDiagram.Class>> Port =>=>=> RelationalSchema.Table>> port;
ClassDiagram.Class>> Room =>=>=> RelationalSchema.Table>> room;
ClassDiagram.Class>> UniqueConstraintValidationTest =>=>=> RelationalSchema.Table>> uniqueconstraintvalidationtest;
ClassDiagram.Class>> MySQLDropConstraintThrowsExceptionTest =>=>=> RelationalSchema.Table>> mysqldropconstraintthrowsexceptiontest;
ClassDiagram.Class>> UniqueConstraintThrowsConstraintViolationExceptionTest =>=>=> RelationalSchema.Table>> uniqueconstraintthrowsconstraintviolationexceptiontest;
ClassDiagram.Class>> House =>=>=> RelationalSchema.Table>> house;
ClassDiagram.Class>> UniqueConstraintUnitTests =>=>=> RelationalSchema.Table>> uniqueconstraintunittests;
ClassDiagram.Class>> Simple2 =>=>=> RelationalSchema.Table>> simple2;
ClassDiagram.Class>> Simple =>=>=> RelationalSchema.Table>> simple;
ClassDiagram.Class>> Multiple =>=>=> RelationalSchema.Table>> multiple;
ClassDiagram.Class>> Citizen =>=>=> RelationalSchema.Table>> citizen;
ClassDiagram.Class>> State =>=>=> RelationalSchema.Table>> state;
ClassDiagram.Class>> D =>=>=> RelationalSchema.Table>> d;
ClassDiagram.Class>> NaturalIdOnManyToOne =>=>=> RelationalSchema.Table>> naturalidonmanytoone;
ClassDiagram.Class>> A =>=>=> RelationalSchema.Table>> a;
ClassDiagram.Class>> A =>=>=> RelationalSchema.Table>> a;
ClassDiagram.Class>> Boat =>=>=> RelationalSchema.Table>> boat;
ClassDiagram.Class>> Address =>=>=> RelationalSchema.Table>> address;
ClassDiagram.Class>> OwnerAddress =>=>=> RelationalSchema.Table>> owneraddress;
ClassDiagram.Class>> OneToOneMapsIdJoinColumnTest =>=>=> RelationalSchema.Table>> onetoonemapsidjoincolumntest;
ClassDiagram.Class>> Computer =>=>=> RelationalSchema.Table>> computer;
ClassDiagram.Class>> Owner =>=>=> RelationalSchema.Table>> owner;
ClassDiagram.Class>> Show =>=>=> RelationalSchema.Table>> show;
ClassDiagram.Class>> PersonAddress =>=>=> RelationalSchema.Table>> personaddress;
ClassDiagram.Class>> Owner =>=>=> RelationalSchema.Table>> owner;
ClassDiagram.Class>> DeviceGroupConfig =>=>=> RelationalSchema.Table>> devicegroupconfig;
ClassDiagram.Class>> Hardware =>=>=> RelationalSchema.Table>> hardware;
ClassDiagram.Class>> Device =>=>=> RelationalSchema.Table>> device;
ClassDiagram.Class>> ManagedDevice =>=>=> RelationalSchema.Table>> manageddevice;
ClassDiagram.Class>> OneToOneMapsIdTest =>=>=> RelationalSchema.Table>> onetoonemapsidtest;
ClassDiagram.Class>> OneToOneJoinTableNonOptionalTest =>=>=> RelationalSchema.Table>> onetoonejointablenonoptionaltest;
ClassDiagram.Class>> SerialNumber =>=>=> RelationalSchema.Table>> serialnumber;
ClassDiagram.Class>> Address =>=>=> RelationalSchema.Table>> address;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> Heart =>=>=> RelationalSchema.Table>> heart;
ClassDiagram.Class>> PartyAffiliate =>=>=> RelationalSchema.Table>> partyaffiliate;
ClassDiagram.Class>> Trousers =>=>=> RelationalSchema.Table>> trousers;
ClassDiagram.Class>> Client =>=>=> RelationalSchema.Table>> client;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> ShowDescription =>=>=> RelationalSchema.Table>> showdescription;
ClassDiagram.Class>> Party =>=>=> RelationalSchema.Table>> party;
ClassDiagram.Class>> TrousersZip =>=>=> RelationalSchema.Table>> trouserszip;
ClassDiagram.Class>> Body =>=>=> RelationalSchema.Table>> body;
ClassDiagram.Class>> Shipment =>=>=> RelationalSchema.Table>> shipment;
ClassDiagram.Class>> Item =>=>=> RelationalSchema.Table>> item;
ClassDiagram.Class>> OneToOneJoinTableOptionalTest =>=>=> RelationalSchema.Table>> onetoonejointableoptionaltest;
ClassDiagram.Class>> Stamp =>=>=> RelationalSchema.Table>> stamp;
ClassDiagram.Class>> Passport =>=>=> RelationalSchema.Table>> passport;
ClassDiagram.Class>> C =>=>=> RelationalSchema.Table>> c;
ClassDiagram.Class>> Life =>=>=> RelationalSchema.Table>> life;
ClassDiagram.Class>> SysUserOrm =>=>=> RelationalSchema.Table>> sysuserorm;
ClassDiagram.Class>> B =>=>=> RelationalSchema.Table>> b;
ClassDiagram.Class>> Dog =>=>=> RelationalSchema.Table>> dog;
ClassDiagram.Class>> Cat =>=>=> RelationalSchema.Table>> cat;
ClassDiagram.Class>> SimpleCat =>=>=> RelationalSchema.Table>> simplecat;
ClassDiagram.Class>> Life =>=>=> RelationalSchema.Table>> life;
ClassDiagram.Class>> SysGroupsOrm =>=>=> RelationalSchema.Table>> sysgroupsorm;
ClassDiagram.Class>> Death =>=>=> RelationalSchema.Table>> death;
ClassDiagram.Class>> DomainAdmin =>=>=> RelationalSchema.Table>> domainadmin;
ClassDiagram.Class>> IdClassMappedSuperclassTest =>=>=> RelationalSchema.Table>> idclassmappedsuperclasstest;
ClassDiagram.Class>> LobHolder =>=>=> RelationalSchema.Table>> lobholder;
ClassDiagram.Class>> LobTestEntity =>=>=> RelationalSchema.Table>> lobtestentity;
ClassDiagram.Class>> EntitySerialize =>=>=> RelationalSchema.Table>> entityserialize;
ClassDiagram.Class>> VersionedBook =>=>=> RelationalSchema.Table>> versionedbook;
ClassDiagram.Class>> MaterializedBlobEntity =>=>=> RelationalSchema.Table>> materializedblobentity;
ClassDiagram.Class>> LongStringHolder =>=>=> RelationalSchema.Table>> longstringholder;
ClassDiagram.Class>> Document =>=>=> RelationalSchema.Table>> document;
ClassDiagram.Class>> Book =>=>=> RelationalSchema.Table>> book;
ClassDiagram.Class>> ImageHolder =>=>=> RelationalSchema.Table>> imageholder;
ClassDiagram.Class>> VersionedCompiledCode =>=>=> RelationalSchema.Table>> versionedcompiledcode;
ClassDiagram.Class>> CompiledCode =>=>=> RelationalSchema.Table>> compiledcode;
ClassDiagram.Class>> NationalizedScalarQueryTest =>=>=> RelationalSchema.Table>> nationalizedscalarquerytest;
ClassDiagram.Class>> TimeAndTimestampTest =>=>=> RelationalSchema.Table>> timeandtimestamptest;
ClassDiagram.Class>> ArrayTypeContributorTest =>=>=> RelationalSchema.Table>> arraytypecontributortest;
ClassDiagram.Class>> LocalDateTest =>=>=> RelationalSchema.Table>> localdatetest;
ClassDiagram.Class>> BinaryTypeTest =>=>=> RelationalSchema.Table>> binarytypetest;
ClassDiagram.Class>> OffsetDateTimeTest =>=>=> RelationalSchema.Table>> offsetdatetimetest;
ClassDiagram.Class>> Java8DateTimeTests =>=>=> RelationalSchema.Table>> java8datetimetests;
ClassDiagram.Class>> LongListTypeContributorTest =>=>=> RelationalSchema.Table>> longlisttypecontributortest;
ClassDiagram.Class>> SmallIntToShortClassMappingTest =>=>=> RelationalSchema.Table>> smallinttoshortclassmappingtest;
ClassDiagram.Class>> SQLServer2008NVarCharTypeTest =>=>=> RelationalSchema.Table>> sqlserver2008nvarchartypetest;
ClassDiagram.Class>> OracleLongLobTypeTest =>=>=> RelationalSchema.Table>> oraclelonglobtypetest;
ClassDiagram.Class>> ZonedDateTimeTest =>=>=> RelationalSchema.Table>> zoneddatetimetest;
ClassDiagram.Class>> AnnotatedMaster =>=>=> RelationalSchema.Table>> annotatedmaster;
ClassDiagram.Class>> AnnotatedDetail =>=>=> RelationalSchema.Table>> annotateddetail;
ClassDiagram.Class>> JoinedInheritanceTest =>=>=> RelationalSchema.Table>> joinedinheritancetest;
ClassDiagram.Class>> MultiInheritanceImplicitDowncastTest =>=>=> RelationalSchema.Table>> multiinheritanceimplicitdowncasttest;
ClassDiagram.Class>> Polygon =>=>=> RelationalSchema.Table>> polygon;
ClassDiagram.Class>> TablePerClassInheritancePersistTest =>=>=> RelationalSchema.Table>> tableperclassinheritancepersisttest;
ClassDiagram.Class>> MultiSingleTableLoadTest =>=>=> RelationalSchema.Table>> multisingletableloadtest;
ClassDiagram.Class>> SingleTableRelationsTest =>=>=> RelationalSchema.Table>> singletablerelationstest;
ClassDiagram.Class>> JoinedInheritanceEagerTest =>=>=> RelationalSchema.Table>> joinedinheritanceeagertest;
ClassDiagram.Class>> SingleTableInheritancePersistTest =>=>=> RelationalSchema.Table>> singletableinheritancepersisttest;
ClassDiagram.Class>> ParentEntity =>=>=> RelationalSchema.Table>> parententity;
ClassDiagram.Class>> Quadrilateral =>=>=> RelationalSchema.Table>> quadrilateral;
ClassDiagram.Class>> MappedSuperclassExtendsEntityTest =>=>=> RelationalSchema.Table>> mappedsuperclassextendsentitytest;
ClassDiagram.Class>> SingleTableWithEmbeddableTest =>=>=> RelationalSchema.Table>> singletablewithembeddabletest;
ClassDiagram.Class>> JoinedSubclassWithEmbeddableTest =>=>=> RelationalSchema.Table>> joinedsubclasswithembeddabletest;
ClassDiagram.Class>> TablePerClassWithEmbeddableTest =>=>=> RelationalSchema.Table>> tableperclasswithembeddabletest;
ClassDiagram.Class>> InheritingEntity =>=>=> RelationalSchema.Table>> inheritingentity;
ClassDiagram.Class>> SubEntity =>=>=> RelationalSchema.Table>> subentity;
ClassDiagram.Class>> SubSubEntity =>=>=> RelationalSchema.Table>> subsubentity;
ClassDiagram.Class>> RootEntity =>=>=> RelationalSchema.Table>> rootentity;
ClassDiagram.Class>> SubSubSubEntity =>=>=> RelationalSchema.Table>> subsubsubentity;
ClassDiagram.Class>> JoinedInheritanceWithOneToManyTest =>=>=> RelationalSchema.Table>> joinedinheritancewithonetomanytest;
ClassDiagram.Class>> JoinedInheritancePropertyNameConflictTest =>=>=> RelationalSchema.Table>> joinedinheritancepropertynameconflicttest;
ClassDiagram.Class>> BatchFetchNotFoundIgnoreDefaultStyleTest =>=>=> RelationalSchema.Table>> batchfetchnotfoundignoredefaultstyletest;
ClassDiagram.Class>> B =>=>=> RelationalSchema.Table>> b;
ClassDiagram.Class>> BatchLoadableEntity =>=>=> RelationalSchema.Table>> batchloadableentity;
ClassDiagram.Class>> A =>=>=> RelationalSchema.Table>> a;
ClassDiagram.Class>> Library =>=>=> RelationalSchema.Table>> library;
ClassDiagram.Class>> Book =>=>=> RelationalSchema.Table>> book;
ClassDiagram.Class>> Product =>=>=> RelationalSchema.Table>> product;
ClassDiagram.Class>> Book =>=>=> RelationalSchema.Table>> book;
ClassDiagram.Class>> Library =>=>=> RelationalSchema.Table>> library;
ClassDiagram.Class>> Product =>=>=> RelationalSchema.Table>> product;
ClassDiagram.Class>> Book =>=>=> RelationalSchema.Table>> book;
ClassDiagram.Class>> Product =>=>=> RelationalSchema.Table>> product;
ClassDiagram.Class>> Library =>=>=> RelationalSchema.Table>> library;
ClassDiagram.Class>> MultiLoadTest =>=>=> RelationalSchema.Table>> multiloadtest;
ClassDiagram.Class>> BasicGetLoadAccessTest =>=>=> RelationalSchema.Table>> basicgetloadaccesstest;
ClassDiagram.Class>> ProxiedGetLoadAccessTest =>=>=> RelationalSchema.Table>> proxiedgetloadaccesstest;
ClassDiagram.Class>> RemoveOrderingTest =>=>=> RelationalSchema.Table>> removeorderingtest;
ClassDiagram.Class>> LimitExpressionTest =>=>=> RelationalSchema.Table>> limitexpressiontest;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> Customer =>=>=> RelationalSchema.Table>> customer;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> ByteArrayIdTest =>=>=> RelationalSchema.Table>> bytearrayidtest;
ClassDiagram.Class>> CharacterArrayIdTest =>=>=> RelationalSchema.Table>> characterarrayidtest;
ClassDiagram.Class>> PrimitiveCharacterArrayIdTest =>=>=> RelationalSchema.Table>> primitivecharacterarrayidtest;
ClassDiagram.Class>> PrimitiveByteArrayIdTest =>=>=> RelationalSchema.Table>> primitivebytearrayidtest;
ClassDiagram.Class>> SQLServer2012SequenceGeneratorAnnotationTest =>=>=> RelationalSchema.Table>> sqlserver2012sequencegeneratorannotationtest;
ClassDiagram.Class>> UserTypeNonComparableIdTest =>=>=> RelationalSchema.Table>> usertypenoncomparableidtest;
ClassDiagram.Class>> UserTypeComparableIdTest =>=>=> RelationalSchema.Table>> usertypecomparableidtest;
ClassDiagram.Class>> UUIDBasedIdInterpretationTest =>=>=> RelationalSchema.Table>> uuidbasedidinterpretationtest;
ClassDiagram.Class>> PooledHiLoSequenceIdentifierTest =>=>=> RelationalSchema.Table>> pooledhilosequenceidentifiertest;
ClassDiagram.Class>> OptimizerTest =>=>=> RelationalSchema.Table>> optimizertest;
ClassDiagram.Class>> NegativeValueSequenceTest =>=>=> RelationalSchema.Table>> negativevaluesequencetest;
ClassDiagram.Class>> LegacySequenceExportTest =>=>=> RelationalSchema.Table>> legacysequenceexporttest;
ClassDiagram.Class>> SequenceExportTest =>=>=> RelationalSchema.Table>> sequenceexporttest;
ClassDiagram.Class>> JoinedSubclassWithImplicitDiscriminatorTest =>=>=> RelationalSchema.Table>> joinedsubclasswithimplicitdiscriminatortest;
ClassDiagram.Class>> JoinedSubclassWithIgnoredExplicitDiscriminatorTest =>=>=> RelationalSchema.Table>> joinedsubclasswithignoredexplicitdiscriminatortest;
ClassDiagram.Class>> JoinedSubclassWithExplicitDiscriminatorTest =>=>=> RelationalSchema.Table>> joinedsubclasswithexplicitdiscriminatortest;
ClassDiagram.Class>> JoinedSubclassWithEmbeddableTest =>=>=> RelationalSchema.Table>> joinedsubclasswithembeddabletest;
ClassDiagram.Class>> NationalizedIgnoreCaseTest =>=>=> RelationalSchema.Table>> nationalizedignorecasetest;
ClassDiagram.Class>> QueryHintSQLServer2012Test =>=>=> RelationalSchema.Table>> queryhintsqlserver2012test;
ClassDiagram.Class>> QueryHintTest =>=>=> RelationalSchema.Table>> queryhinttest;
ClassDiagram.Class>> ProductEntity =>=>=> RelationalSchema.Table>> productentity;
ClassDiagram.Class>> Publisher =>=>=> RelationalSchema.Table>> publisher;
ClassDiagram.Class>> NonTransactionalDataAccessTest =>=>=> RelationalSchema.Table>> nontransactionaldataaccesstest;
ClassDiagram.Class>> UnrelatedEntity =>=>=> RelationalSchema.Table>> unrelatedentity;
ClassDiagram.Class>> BookStore =>=>=> RelationalSchema.Table>> bookstore;
ClassDiagram.Class>> Book =>=>=> RelationalSchema.Table>> book;
ClassDiagram.Class>> Author =>=>=> RelationalSchema.Table>> author;
ClassDiagram.Class>> ProxyInterfaceClassLoaderTest =>=>=> RelationalSchema.Table>> proxyinterfaceclassloadertest;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> EmployeeGroup =>=>=> RelationalSchema.Table>> employeegroup;
ClassDiagram.Class>> Inventory =>=>=> RelationalSchema.Table>> inventory;
ClassDiagram.Class>> Product =>=>=> RelationalSchema.Table>> product;
ClassDiagram.Class>> CacheLazyLoadNoTransTest =>=>=> RelationalSchema.Table>> cachelazyloadnotranstest;
ClassDiagram.Class>> Store =>=>=> RelationalSchema.Table>> store;
ClassDiagram.Class>> StructuredQueryCacheTest =>=>=> RelationalSchema.Table>> structuredquerycachetest;
ClassDiagram.Class>> EntityWithStringCompositeKey =>=>=> RelationalSchema.Table>> entitywithstringcompositekey;
ClassDiagram.Class>> EntityWithCompositeKey =>=>=> RelationalSchema.Table>> entitywithcompositekey;
ClassDiagram.Class>> SortTest =>=>=> RelationalSchema.Table>> sorttest;
ClassDiagram.Class>> ATable =>=>=> RelationalSchema.Table>> atable;
ClassDiagram.Class>> TableB =>=>=> RelationalSchema.Table>> tableb;
ClassDiagram.Class>> TableA =>=>=> RelationalSchema.Table>> tablea;
ClassDiagram.Class>> UseReservedKeywordInOrderByTest =>=>=> RelationalSchema.Table>> usereservedkeywordinorderbytest;
ClassDiagram.Class>> HqlOrderByIdsTest =>=>=> RelationalSchema.Table>> hqlorderbyidstest;
ClassDiagram.Class>> StatelessSessionNativeQueryInsertTest =>=>=> RelationalSchema.Table>> statelesssessionnativequeryinserttest;
ClassDiagram.Class>> StatelessSessionConnectionTest =>=>=> RelationalSchema.Table>> statelesssessionconnectiontest;
ClassDiagram.Class>> Contact =>=>=> RelationalSchema.Table>> contact;
ClassDiagram.Class>> SQLServerDialectTest =>=>=> RelationalSchema.Table>> sqlserverdialecttest;
ClassDiagram.Class>> SQLServerDialectPaginationTest =>=>=> RelationalSchema.Table>> sqlserverdialectpaginationtest;
ClassDiagram.Class>> HANABooleanTest =>=>=> RelationalSchema.Table>> hanabooleantest;
ClassDiagram.Class>> SQLServerDialectCollationTest =>=>=> RelationalSchema.Table>> sqlserverdialectcollationtest;
ClassDiagram.Class>> OracleFollowOnLockingTest =>=>=> RelationalSchema.Table>> oraclefollowonlockingtest;
ClassDiagram.Class>> Product2 =>=>=> RelationalSchema.Table>> product2;
ClassDiagram.Class>> Folder =>=>=> RelationalSchema.Table>> folder;
ClassDiagram.Class>> Category =>=>=> RelationalSchema.Table>> category;
ClassDiagram.Class>> HSQLTruncFunctionTest =>=>=> RelationalSchema.Table>> hsqltruncfunctiontest;
ClassDiagram.Class>> AbstractSequenceInformationExtractorTest =>=>=> RelationalSchema.Table>> abstractsequenceinformationextractortest;
ClassDiagram.Class>> OracleStoredProcedureTest =>=>=> RelationalSchema.Table>> oraclestoredproceduretest;
ClassDiagram.Class>> Phone =>=>=> RelationalSchema.Table>> phone;
ClassDiagram.Class>> HANAStoredProcedureTest =>=>=> RelationalSchema.Table>> hanastoredproceduretest;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> OraclePaginationTest =>=>=> RelationalSchema.Table>> oraclepaginationtest;
ClassDiagram.Class>> Shop =>=>=> RelationalSchema.Table>> shop;
ClassDiagram.Class>> Product =>=>=> RelationalSchema.Table>> product;
ClassDiagram.Class>> Child1 =>=>=> RelationalSchema.Table>> child1;
ClassDiagram.Class>> Parent1 =>=>=> RelationalSchema.Table>> parent1;
ClassDiagram.Class>> Child2 =>=>=> RelationalSchema.Table>> child2;
ClassDiagram.Class>> UnidirectionalOneToManyNonPkJoinColumnTest =>=>=> RelationalSchema.Table>> unidirectionalonetomanynonpkjoincolumntest;
ClassDiagram.Class>> NationalizedLobFieldTest =>=>=> RelationalSchema.Table>> nationalizedlobfieldtest;
ClassDiagram.Class>> StringNationalizedTest =>=>=> RelationalSchema.Table>> stringnationalizedtest;
ClassDiagram.Class>> UseNationalizedCharDataSettingTest =>=>=> RelationalSchema.Table>> usenationalizedchardatasettingtest;
ClassDiagram.Class>> SimpleNationalizedTest =>=>=> RelationalSchema.Table>> simplenationalizedtest;
ClassDiagram.Class>> InsertOrderingWithBidirectionalOneToMany =>=>=> RelationalSchema.Table>> insertorderingwithbidirectionalonetomany;
ClassDiagram.Class>> InsertOrderingWithJoinedTableInheritance =>=>=> RelationalSchema.Table>> insertorderingwithjoinedtableinheritance;
ClassDiagram.Class>> InsertOrderingHasParentTest =>=>=> RelationalSchema.Table>> insertorderinghasparenttest;
ClassDiagram.Class>> InsertOrderingWithBidirectionalManyToMany =>=>=> RelationalSchema.Table>> insertorderingwithbidirectionalmanytomany;
ClassDiagram.Class>> InsertOrderingDuplicateTest =>=>=> RelationalSchema.Table>> insertorderingduplicatetest;
ClassDiagram.Class>> InsertOrderingWithCompositeTypeAssociation =>=>=> RelationalSchema.Table>> insertorderingwithcompositetypeassociation;
ClassDiagram.Class>> ElementCollectionTest =>=>=> RelationalSchema.Table>> elementcollectiontest;
ClassDiagram.Class>> InsertOrderingWithTablePerClassInheritance =>=>=> RelationalSchema.Table>> insertorderingwithtableperclassinheritance;
ClassDiagram.Class>> InsertOrderingWithBidirectionalOneToManyFlushProblem =>=>=> RelationalSchema.Table>> insertorderingwithbidirectionalonetomanyflushproblem;
ClassDiagram.Class>> InsertOrderingWithJoinedTableMultiLevelInheritance =>=>=> RelationalSchema.Table>> insertorderingwithjoinedtablemultilevelinheritance;
ClassDiagram.Class>> InsertOrderingWithBidirectionalOneToOneFlushProblem =>=>=> RelationalSchema.Table>> insertorderingwithbidirectionalonetooneflushproblem;
ClassDiagram.Class>> InsertOrderingWithSingleTableInheritance =>=>=> RelationalSchema.Table>> insertorderingwithsingletableinheritance;
ClassDiagram.Class>> InsertOrderingWithMultipleManyToOne =>=>=> RelationalSchema.Table>> insertorderingwithmultiplemanytoone;
ClassDiagram.Class>> InsertOrderingWithCascadeOnPersist =>=>=> RelationalSchema.Table>> insertorderingwithcascadeonpersist;
ClassDiagram.Class>> InsertOrderingWithBidirectionalOneToOne =>=>=> RelationalSchema.Table>> insertorderingwithbidirectionalonetoone;
ClassDiagram.Class>> InsertOrderingWithBidirectionalMapsIdOneToOne =>=>=> RelationalSchema.Table>> insertorderingwithbidirectionalmapsidonetoone;
ClassDiagram.Class>> InsertOrderingWithManyToOne =>=>=> RelationalSchema.Table>> insertorderingwithmanytoone;
ClassDiagram.Class>> InsertOrderingWithSecondaryTable =>=>=> RelationalSchema.Table>> insertorderingwithsecondarytable;
ClassDiagram.Class>> InsertOrderingWithUnidirectionalOneToOne =>=>=> RelationalSchema.Table>> insertorderingwithunidirectionalonetoone;
ClassDiagram.Class>> EntityLoadedInTwoPhaseLoadTest =>=>=> RelationalSchema.Table>> entityloadedintwophaseloadtest;
ClassDiagram.Class>> CollectionLoadedInTwoPhaseLoadTest =>=>=> RelationalSchema.Table>> collectionloadedintwophaseloadtest;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> WrongCircularityDetectionTest =>=>=> RelationalSchema.Table>> wrongcircularitydetectiontest;
ClassDiagram.Class>> Palmtree =>=>=> RelationalSchema.Table>> palmtree;
ClassDiagram.Class>> Portal =>=>=> RelationalSchema.Table>> portal;
ClassDiagram.Class>> Gate =>=>=> RelationalSchema.Table>> gate;
ClassDiagram.Class>> Window =>=>=> RelationalSchema.Table>> window;
ClassDiagram.Class>> Tree =>=>=> RelationalSchema.Table>> tree;
ClassDiagram.Class>> AnnotationBinderTest =>=>=> RelationalSchema.Table>> annotationbindertest;
ClassDiagram.Class>> DefaultCacheConcurrencyPropertyTest =>=>=> RelationalSchema.Table>> defaultcacheconcurrencypropertytest;
ClassDiagram.Class>> ReplicateTest =>=>=> RelationalSchema.Table>> replicatetest;
ClassDiagram.Class>> LazyAbstractEntityReference =>=>=> RelationalSchema.Table>> lazyabstractentityreference;
ClassDiagram.Class>> AbstractEntity =>=>=> RelationalSchema.Table>> abstractentity;
ClassDiagram.Class>> ConcreteEntity =>=>=> RelationalSchema.Table>> concreteentity;
ClassDiagram.Class>> ProxyReferenceEqualityTest =>=>=> RelationalSchema.Table>> proxyreferenceequalitytest;
ClassDiagram.Class>> HibernateUnproxyTest =>=>=> RelationalSchema.Table>> hibernateunproxytest;
ClassDiagram.Class>> MergeListPreAndPostPersistTest =>=>=> RelationalSchema.Table>> mergelistpreandpostpersisttest;
ClassDiagram.Class>> MergeListPreAndPostPersistWithIdentityTest =>=>=> RelationalSchema.Table>> mergelistpreandpostpersistwithidentitytest;
ClassDiagram.Class>> Alias =>=>=> RelationalSchema.Table>> alias;
ClassDiagram.Class>> Character =>=>=> RelationalSchema.Table>> character;
ClassDiagram.Class>> MultipleCollectionRefEntity1 =>=>=> RelationalSchema.Table>> multiplecollectionrefentity1;
ClassDiagram.Class>> MultipleCollectionEntity =>=>=> RelationalSchema.Table>> multiplecollectionentity;
ClassDiagram.Class>> MultipleCollectionRefEntity2 =>=>=> RelationalSchema.Table>> multiplecollectionrefentity2;
ClassDiagram.Class>> DefaultGeneratedValueTest =>=>=> RelationalSchema.Table>> defaultgeneratedvaluetest;
ClassDiagram.Class>> AbstractSkipAutoCommitTest =>=>=> RelationalSchema.Table>> abstractskipautocommittest;
ClassDiagram.Class>> EntityA =>=>=> RelationalSchema.Table>> entitya;
ClassDiagram.Class>> NaturalIdCachingTest =>=>=> RelationalSchema.Table>> naturalidcachingtest;
ClassDiagram.Class>> Category =>=>=> RelationalSchema.Table>> category;
ClassDiagram.Class>> Element =>=>=> RelationalSchema.Table>> element;
ClassDiagram.Class>> GroupStep =>=>=> RelationalSchema.Table>> groupstep;
ClassDiagram.Class>> Step =>=>=> RelationalSchema.Table>> step;
ClassDiagram.Class>> ColumnNamesTest =>=>=> RelationalSchema.Table>> columnnamestest;
ClassDiagram.Class>> SchemaExportWithIndexAndDefaultSchema =>=>=> RelationalSchema.Table>> schemaexportwithindexanddefaultschema;
ClassDiagram.Class>> ConnectionsReleaseTest =>=>=> RelationalSchema.Table>> connectionsreleasetest;
ClassDiagram.Class>> SchemaUpdateHaltOnErrorTest =>=>=> RelationalSchema.Table>> schemaupdatehaltonerrortest;
ClassDiagram.Class>> SchemaUpdateWithFunctionIndexTest =>=>=> RelationalSchema.Table>> schemaupdatewithfunctionindextest;
ClassDiagram.Class>> SequenceReadingTest =>=>=> RelationalSchema.Table>> sequencereadingtest;
ClassDiagram.Class>> ColumnLengthTest =>=>=> RelationalSchema.Table>> columnlengthtest;
ClassDiagram.Class>> SchemaUpdateTest =>=>=> RelationalSchema.Table>> schemaupdatetest;
ClassDiagram.Class>> SchemaDropTest =>=>=> RelationalSchema.Table>> schemadroptest;
ClassDiagram.Class>> SchemaExportWithGlobalQuotingEnabledTest =>=>=> RelationalSchema.Table>> schemaexportwithglobalquotingenabledtest;
ClassDiagram.Class>> SchemaUpdateDelimiterTest =>=>=> RelationalSchema.Table>> schemaupdatedelimitertest;
ClassDiagram.Class>> SchemaUpdateSQLServerTest =>=>=> RelationalSchema.Table>> schemaupdatesqlservertest;
ClassDiagram.Class>> SchemaUpdateProceedOnErrorTest =>=>=> RelationalSchema.Table>> schemaupdateproceedonerrortest;
ClassDiagram.Class>> QuotedTableNameSchemaUpdateTest =>=>=> RelationalSchema.Table>> quotedtablenameschemaupdatetest;
ClassDiagram.Class>> HANASchemaMigrationTargetScriptCreationTest =>=>=> RelationalSchema.Table>> hanaschemamigrationtargetscriptcreationtest;
ClassDiagram.Class>> SchemaMigratorHaltOnErrorTest =>=>=> RelationalSchema.Table>> schemamigratorhaltonerrortest;
ClassDiagram.Class>> SchemaUpdateFormatterTest =>=>=> RelationalSchema.Table>> schemaupdateformattertest;
ClassDiagram.Class>> ComponentIndexTest =>=>=> RelationalSchema.Table>> componentindextest;
ClassDiagram.Class>> IndexesCreationTest =>=>=> RelationalSchema.Table>> indexescreationtest;
ClassDiagram.Class>> MixedFieldPropertyAnnotationTest =>=>=> RelationalSchema.Table>> mixedfieldpropertyannotationtest;
ClassDiagram.Class>> PostgreSQLMultipleSchemaSequenceTest =>=>=> RelationalSchema.Table>> postgresqlmultipleschemasequencetest;
ClassDiagram.Class>> TestFkUpdating =>=>=> RelationalSchema.Table>> testfkupdating;
ClassDiagram.Class>> SchemaUpdateWithViewsTest =>=>=> RelationalSchema.Table>> schemaupdatewithviewstest;
ClassDiagram.Class>> SchemaTwoEntity =>=>=> RelationalSchema.Table>> schematwoentity;
ClassDiagram.Class>> SchemaOneEntity =>=>=> RelationalSchema.Table>> schemaoneentity;
ClassDiagram.Class>> ForeignKeyDropTest =>=>=> RelationalSchema.Table>> foreignkeydroptest;
ClassDiagram.Class>> SchemaUpdateWithKeywordAutoQuotingEnabledTest =>=>=> RelationalSchema.Table>> schemaupdatewithkeywordautoquotingenabledtest;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> Group =>=>=> RelationalSchema.Table>> group;
ClassDiagram.Class>> JoinedInheritanceForeignKeyTest =>=>=> RelationalSchema.Table>> joinedinheritanceforeignkeytest;
ClassDiagram.Class>> Project =>=>=> RelationalSchema.Table>> project;
ClassDiagram.Class>> UserSetting =>=>=> RelationalSchema.Table>> usersetting;
ClassDiagram.Class>> Phone =>=>=> RelationalSchema.Table>> phone;
ClassDiagram.Class>> ForeignKeyMigrationTest =>=>=> RelationalSchema.Table>> foreignkeymigrationtest;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> Employee =>=>=> RelationalSchema.Table>> employee;
ClassDiagram.Class>> ForeignKeyDefinitionOneToOneTest =>=>=> RelationalSchema.Table>> foreignkeydefinitiononetoonetest;
ClassDiagram.Class>> ForeignKeyDefinitionSecondaryTableTest =>=>=> RelationalSchema.Table>> foreignkeydefinitionsecondarytabletest;
ClassDiagram.Class>> ForeignKeyDefinitionOneToManyJoinTableTest =>=>=> RelationalSchema.Table>> foreignkeydefinitiononetomanyjointabletest;
ClassDiagram.Class>> ForeignKeyDefinitionManyToOneTest =>=>=> RelationalSchema.Table>> foreignkeydefinitionmanytoonetest;
ClassDiagram.Class>> MigrationTest =>=>=> RelationalSchema.Table>> migrationtest;
ClassDiagram.Class>> SchemaUpdateGeneratingOnlyScriptFileTest =>=>=> RelationalSchema.Table>> schemaupdategeneratingonlyscriptfiletest;
ClassDiagram.Class>> SchemaMigrationTargetScriptCreationTest =>=>=> RelationalSchema.Table>> schemamigrationtargetscriptcreationtest;
ClassDiagram.Class>> SchemaUpdateSchemaNameTest =>=>=> RelationalSchema.Table>> schemaupdateschemanametest;
ClassDiagram.Class>> TableCommentTest =>=>=> RelationalSchema.Table>> tablecommenttest;
ClassDiagram.Class>> ImplicitCompositeKeyJoinTest =>=>=> RelationalSchema.Table>> implicitcompositekeyjointest;
ClassDiagram.Class>> SessionJdbcBatchTest =>=>=> RelationalSchema.Table>> sessionjdbcbatchtest;
ClassDiagram.Class>> QualifiedTableNamingTest =>=>=> RelationalSchema.Table>> qualifiedtablenamingtest;
ClassDiagram.Class>> HiloOptimizerConcurrencyTest =>=>=> RelationalSchema.Table>> hilooptimizerconcurrencytest;
ClassDiagram.Class>> IdentityGeneratorExtendsTest =>=>=> RelationalSchema.Table>> identitygeneratorextendstest;
ClassDiagram.Class>> SaveEntityTest =>=>=> RelationalSchema.Table>> saveentitytest;
ClassDiagram.Class>> Sub =>=>=> RelationalSchema.Table>> sub;
ClassDiagram.Class>> Super =>=>=> RelationalSchema.Table>> super;
ClassDiagram.Class>> BeforeCompletionFailureTest =>=>=> RelationalSchema.Table>> beforecompletionfailuretest;
ClassDiagram.Class>> House =>=>=> RelationalSchema.Table>> house;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> Phone =>=>=> RelationalSchema.Table>> phone;
ClassDiagram.Class>> Role =>=>=> RelationalSchema.Table>> role;
ClassDiagram.Class>> QuoteTest =>=>=> RelationalSchema.Table>> quotetest;
ClassDiagram.Class>> ColumnDefinitionQuotingTest =>=>=> RelationalSchema.Table>> columndefinitionquotingtest;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> TableGeneratorQuotingTest =>=>=> RelationalSchema.Table>> tablegeneratorquotingtest;
ClassDiagram.Class>> Bid =>=>=> RelationalSchema.Table>> bid;
ClassDiagram.Class>> SessionCreateQueryFromCriteriaTest =>=>=> RelationalSchema.Table>> sessioncreatequeryfromcriteriatest;
ClassDiagram.Class>> ListActionRole =>=>=> RelationalSchema.Table>> listactionrole;
ClassDiagram.Class>> Role =>=>=> RelationalSchema.Table>> role;
ClassDiagram.Class>> Item =>=>=> RelationalSchema.Table>> item;
ClassDiagram.Class>> Customer =>=>=> RelationalSchema.Table>> customer;
ClassDiagram.Class>> Seller =>=>=> RelationalSchema.Table>> seller;
ClassDiagram.Class>> CriteriaAliasFetchTest =>=>=> RelationalSchema.Table>> criteriaaliasfetchtest;
ClassDiagram.Class>> LazyPersistWithDetachedAssociationTest =>=>=> RelationalSchema.Table>> lazypersistwithdetachedassociationtest;
ClassDiagram.Class>> MixedAccessTest =>=>=> RelationalSchema.Table>> mixedaccesstest;
ClassDiagram.Class>> MappedSuperclassTest =>=>=> RelationalSchema.Table>> mappedsuperclasstest;
ClassDiagram.Class>> BasicEnhancementTest =>=>=> RelationalSchema.Table>> basicenhancementtest;
ClassDiagram.Class>> CrossEnhancementTest =>=>=> RelationalSchema.Table>> crossenhancementtest;
ClassDiagram.Class>> BasicSessionTest =>=>=> RelationalSchema.Table>> basicsessiontest;
ClassDiagram.Class>> InheritedTest =>=>=> RelationalSchema.Table>> inheritedtest;
ClassDiagram.Class>> ExtendedAssociationManagementTest =>=>=> RelationalSchema.Table>> extendedassociationmanagementtest;
ClassDiagram.Class>> OnDemandLoadTest =>=>=> RelationalSchema.Table>> ondemandloadtest;
ClassDiagram.Class>> DirtyTrackingNonUpdateableTest =>=>=> RelationalSchema.Table>> dirtytrackingnonupdateabletest;
ClassDiagram.Class>> DirtyTrackingCollectionTest =>=>=> RelationalSchema.Table>> dirtytrackingcollectiontest;
ClassDiagram.Class>> DirtyTrackingTest =>=>=> RelationalSchema.Table>> dirtytrackingtest;
ClassDiagram.Class>> OtherEntityEntryContextTest =>=>=> RelationalSchema.Table>> otherentityentrycontexttest;
ClassDiagram.Class>> OneToOneAssociationTest =>=>=> RelationalSchema.Table>> onetooneassociationtest;
ClassDiagram.Class>> OneToManyAssociationTest =>=>=> RelationalSchema.Table>> onetomanyassociationtest;
ClassDiagram.Class>> ManyToManyAssociationTest =>=>=> RelationalSchema.Table>> manytomanyassociationtest;
ClassDiagram.Class>> InheritedAttributeAssociationTest =>=>=> RelationalSchema.Table>> inheritedattributeassociationtest;
ClassDiagram.Class>> InitFromCacheTest =>=>=> RelationalSchema.Table>> initfromcachetest;
ClassDiagram.Class>> EmbeddedPKTest =>=>=> RelationalSchema.Table>> embeddedpktest;
ClassDiagram.Class>> LazyBasicFieldNotInitializedTest =>=>=> RelationalSchema.Table>> lazybasicfieldnotinitializedtest;
ClassDiagram.Class>> LazyBasicFieldAccessTest =>=>=> RelationalSchema.Table>> lazybasicfieldaccesstest;
ClassDiagram.Class>> LazyBasicPropertyAccessTest =>=>=> RelationalSchema.Table>> lazybasicpropertyaccesstest;
ClassDiagram.Class>> LazyInCacheTest =>=>=> RelationalSchema.Table>> lazyincachetest;
ClassDiagram.Class>> LGMB_From =>=>=> RelationalSchema.Table>> lgmb_from;
ClassDiagram.Class>> SimpleLazyGroupUpdateTest =>=>=> RelationalSchema.Table>> simplelazygroupupdatetest;
ClassDiagram.Class>> LazyGroupTest =>=>=> RelationalSchema.Table>> lazygrouptest;
ClassDiagram.Class>> LGMB_To =>=>=> RelationalSchema.Table>> lgmb_to;
ClassDiagram.Class>> UnexpectedDeleteTest2 =>=>=> RelationalSchema.Table>> unexpecteddeletetest2;
ClassDiagram.Class>> UnexpectedDeleteTest3 =>=>=> RelationalSchema.Table>> unexpecteddeletetest3;
ClassDiagram.Class>> UnexpectedDeleteTest1 =>=>=> RelationalSchema.Table>> unexpecteddeletetest1;
ClassDiagram.Class>> LazyCollectionDetachTest =>=>=> RelationalSchema.Table>> lazycollectiondetachtest;
ClassDiagram.Class>> LazyLoadingTest =>=>=> RelationalSchema.Table>> lazyloadingtest;
ClassDiagram.Class>> LazyCollectionDeletedTest =>=>=> RelationalSchema.Table>> lazycollectiondeletedtest;
ClassDiagram.Class>> LazyCollectionLoadingTest =>=>=> RelationalSchema.Table>> lazycollectionloadingtest;
ClassDiagram.Class>> LazyLoadingByEnhancerSetterTest =>=>=> RelationalSchema.Table>> lazyloadingbyenhancersettertest;
ClassDiagram.Class>> LazyProxyOnEnhancedEntityTest =>=>=> RelationalSchema.Table>> lazyproxyonenhancedentitytest;
ClassDiagram.Class>> LazyBasicFieldMergeTest =>=>=> RelationalSchema.Table>> lazybasicfieldmergetest;
ClassDiagram.Class>> LazyLoadingIntegrationTest =>=>=> RelationalSchema.Table>> lazyloadingintegrationtest;
ClassDiagram.Class>> EvictionTest =>=>=> RelationalSchema.Table>> evictiontest;
ClassDiagram.Class>> HHH3949Test =>=>=> RelationalSchema.Table>> hhh3949test;
ClassDiagram.Class>> DetachedGetIdentifierTest =>=>=> RelationalSchema.Table>> detachedgetidentifiertest;
ClassDiagram.Class>> CascadeDeleteTest =>=>=> RelationalSchema.Table>> cascadedeletetest;
ClassDiagram.Class>> CascadeWithFkConstraintTest =>=>=> RelationalSchema.Table>> cascadewithfkconstrainttest;
ClassDiagram.Class>> CascadeDetachedTest =>=>=> RelationalSchema.Table>> cascadedetachedtest;
ClassDiagram.Class>> MergeEnhancedEntityTest =>=>=> RelationalSchema.Table>> mergeenhancedentitytest;
ClassDiagram.Class>> CompositeMergeTest =>=>=> RelationalSchema.Table>> compositemergetest;
ClassDiagram.Class>> DoesNotWork =>=>=> RelationalSchema.Table>> doesnotwork;
ClassDiagram.Class>> LobEntity =>=>=> RelationalSchema.Table>> lobentity;
ClassDiagram.Class>> LobStringTest =>=>=> RelationalSchema.Table>> lobstringtest;
ClassDiagram.Class>> PostgreSqlLobStringTest =>=>=> RelationalSchema.Table>> postgresqllobstringtest;
ClassDiagram.Class>> VariousTypesEntity =>=>=> RelationalSchema.Table>> varioustypesentity;
ClassDiagram.Class>> Issue =>=>=> RelationalSchema.Table>> issue;
ClassDiagram.Class>> PageAdvertisement =>=>=> RelationalSchema.Table>> pageadvertisement;
ClassDiagram.Class>> Advertisement =>=>=> RelationalSchema.Table>> advertisement;
ClassDiagram.Class>> Attachment =>=>=> RelationalSchema.Table>> attachment;
ClassDiagram.Class>> B =>=>=> RelationalSchema.Table>> b;
ClassDiagram.Class>> AllCached =>=>=> RelationalSchema.Table>> allcached;
ClassDiagram.Class>> Another =>=>=> RelationalSchema.Table>> another;
ClassDiagram.Class>> A =>=>=> RelationalSchema.Table>> a;
ClassDiagram.Class>> IdentifierGeneratorWithNaturalIdCacheTest =>=>=> RelationalSchema.Table>> identifiergeneratorwithnaturalidcachetest;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> Principal =>=>=> RelationalSchema.Table>> principal;
ClassDiagram.Class>> MappedSuperclassOverrideTest =>=>=> RelationalSchema.Table>> mappedsuperclassoverridetest;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> ExtendedEntity =>=>=> RelationalSchema.Table>> extendedentity;
ClassDiagram.Class>> MyEntity =>=>=> RelationalSchema.Table>> myentity;
ClassDiagram.Class>> Principal =>=>=> RelationalSchema.Table>> principal;
ClassDiagram.Class>> B =>=>=> RelationalSchema.Table>> b;
ClassDiagram.Class>> C =>=>=> RelationalSchema.Table>> c;
ClassDiagram.Class>> A =>=>=> RelationalSchema.Table>> a;
ClassDiagram.Class>> D =>=>=> RelationalSchema.Table>> d;
ClassDiagram.Class>> Building =>=>=> RelationalSchema.Table>> building;
ClassDiagram.Class>> PostalCarrier =>=>=> RelationalSchema.Table>> postalcarrier;
ClassDiagram.Class>> Student =>=>=> RelationalSchema.Table>> student;
ClassDiagram.Class>> Championship =>=>=> RelationalSchema.Table>> championship;
ClassDiagram.Class>> School =>=>=> RelationalSchema.Table>> school;
ClassDiagram.Class>> QueryTimeOutTest =>=>=> RelationalSchema.Table>> querytimeouttest;
ClassDiagram.Class>> IdentityJoinedSubclassBatchingTest =>=>=> RelationalSchema.Table>> identityjoinedsubclassbatchingtest;
ClassDiagram.Class>> JoinedSubclassBatchingTest =>=>=> RelationalSchema.Table>> joinedsubclassbatchingtest;
ClassDiagram.Class>> TableNamesWithUnderscoreTest =>=>=> RelationalSchema.Table>> tablenameswithunderscoretest;
ClassDiagram.Class>> LongVarcharValidationTest =>=>=> RelationalSchema.Table>> longvarcharvalidationtest;
ClassDiagram.Class>> NumericValidationTest =>=>=> RelationalSchema.Table>> numericvalidationtest;
ClassDiagram.Class>> SynonymValidationTest =>=>=> RelationalSchema.Table>> synonymvalidationtest;
ClassDiagram.Class>> ViewValidationTest =>=>=> RelationalSchema.Table>> viewvalidationtest;
ClassDiagram.Class>> JoinTableWithDefaultSchemaTest =>=>=> RelationalSchema.Table>> jointablewithdefaultschematest;
ClassDiagram.Class>> ComponentEmptyEmbeddedOwner =>=>=> RelationalSchema.Table>> componentemptyembeddedowner;
ClassDiagram.Class>> EmptyCompositeManyToOneKeyCachedTest =>=>=> RelationalSchema.Table>> emptycompositemanytoonekeycachedtest;
ClassDiagram.Class>> EmptyCompositeCollectionKeyLazyTest =>=>=> RelationalSchema.Table>> emptycompositecollectionkeylazytest;
ClassDiagram.Class>> EmptyCompositeCollectionKeyEagerTest =>=>=> RelationalSchema.Table>> emptycompositecollectionkeyeagertest;
ClassDiagram.Class>> EmptyCompositeManyToOneKeyTest =>=>=> RelationalSchema.Table>> emptycompositemanytoonekeytest;
ClassDiagram.Class>> SelectBeforeUpdateEmbeddedTest =>=>=> RelationalSchema.Table>> selectbeforeupdateembeddedtest;
ClassDiagram.Class>> EmptyCompositeEquivalentToNullTest =>=>=> RelationalSchema.Table>> emptycompositeequivalenttonulltest;
ClassDiagram.Class>> Person =>=>=> RelationalSchema.Table>> person;
ClassDiagram.Class>> Component =>=>=> RelationalSchema.Table>> component;
ClassDiagram.Class>> BasicJodaTimeConversionTest =>=>=> RelationalSchema.Table>> basicjodatimeconversiontest;
ClassDiagram.Class>> SimpleConvertAnnotationTest =>=>=> RelationalSchema.Table>> simpleconvertannotationtest;
ClassDiagram.Class>> ExplicitJavaTypeDescriptorTest =>=>=> RelationalSchema.Table>> explicitjavatypedescriptortest;
ClassDiagram.Class>> AndLobTest =>=>=> RelationalSchema.Table>> andlobtest;
ClassDiagram.Class>> NullHandlingTests =>=>=> RelationalSchema.Table>> nullhandlingtests;
ClassDiagram.Class>> ExplicitDateConvertersTest =>=>=> RelationalSchema.Table>> explicitdateconverterstest;
ClassDiagram.Class>> SimpleOverriddenConverterTest =>=>=> RelationalSchema.Table>> simpleoverriddenconvertertest;
ClassDiagram.Class>> QueryTest =>=>=> RelationalSchema.Table>> querytest;
ClassDiagram.Class>> Address =>=>=> RelationalSchema.Table>> address;
ClassDiagram.Class>> SimpleConvertsAnnotationTest =>=>=> RelationalSchema.Table>> simpleconvertsannotationtest;
ClassDiagram.Class>> LongToDateConversionTest =>=>=> RelationalSchema.Table>> longtodateconversiontest;
ClassDiagram.Class>> ExplicitlyNamedConverterClassesTest =>=>=> RelationalSchema.Table>> explicitlynamedconverterclassestest;
ClassDiagram.Class>> AndNationalizedTests =>=>=> RelationalSchema.Table>> andnationalizedtests;
ClassDiagram.Class>> SimpleXmlOverriddenTest =>=>=> RelationalSchema.Table>> simplexmloverriddentest;
ClassDiagram.Class>> ExplicitEnumConvertersTest =>=>=> RelationalSchema.Table>> explicitenumconverterstest;
ClassDiagram.Class>> XmlWithExplicitConvertAnnotationsTest =>=>=> RelationalSchema.Table>> xmlwithexplicitconvertannotationstest;
ClassDiagram.Class>> ElementCollectionTests =>=>=> RelationalSchema.Table>> elementcollectiontests;
ClassDiagram.Class>> CollectionElementConversionTest =>=>=> RelationalSchema.Table>> collectionelementconversiontest;
ClassDiagram.Class>> CollectionElementExplicitConversionTest =>=>=> RelationalSchema.Table>> collectionelementexplicitconversiontest;
ClassDiagram.Class>> CollectionCompositeElementConversionTest =>=>=> RelationalSchema.Table>> collectioncompositeelementconversiontest;
ClassDiagram.Class>> CollectionCompositeElementExplicitConversionTest =>=>=> RelationalSchema.Table>> collectioncompositeelementexplicitconversiontest;
ClassDiagram.Class>> Address =>=>=> RelationalSchema.Table>> address;
ClassDiagram.Class>> QueryLiteralTest =>=>=> RelationalSchema.Table>> queryliteraltest;
ClassDiagram.Class>> MapKeyConversionTest =>=>=> RelationalSchema.Table>> mapkeyconversiontest;
ClassDiagram.Class>> MapKeyAttributeConverterTest =>=>=> RelationalSchema.Table>> mapkeyattributeconvertertest;
ClassDiagram.Class>> MapElementConversionTest =>=>=> RelationalSchema.Table>> mapelementconversiontest;
ClassDiagram.Class>> AttributeConverterTest =>=>=> RelationalSchema.Table>> attributeconvertertest;
ClassDiagram.Class>> ParameterizedAttributeConverterParameterTypeTest =>=>=> RelationalSchema.Table>> parameterizedattributeconverterparametertypetest;
ClassDiagram.Class>> SimpleEmbeddableOverriddenConverterTest =>=>=> RelationalSchema.Table>> simpleembeddableoverriddenconvertertest;
ClassDiagram.Class>> DirtyCheckingTest =>=>=> RelationalSchema.Table>> dirtycheckingtest;
ClassDiagram.Class>> Customer =>=>=> RelationalSchema.Table>> customer;
ClassDiagram.Class>> Invoice =>=>=> RelationalSchema.Table>> invoice;
ClassDiagram.Class>> HANAOptimisticLockingTest =>=>=> RelationalSchema.Table>> hanaoptimisticlockingtest;
ClassDiagram.Class>> AbstractSkipLockedTest =>=>=> RelationalSchema.Table>> abstractskiplockedtest;
ClassDiagram.Class>> Door =>=>=> RelationalSchema.Table>> door;
ClassDiagram.Class>> LockNoneWarmingTest =>=>=> RelationalSchema.Table>> locknonewarmingtest;
ClassDiagram.Class>> A =>=>=> RelationalSchema.Table>> a;
ClassDiagram.Class>> Group =>=>=> RelationalSchema.Table>> group;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> Membership =>=>=> RelationalSchema.Table>> membership;
ClassDiagram.Class>> NativeQueryScrollableResults =>=>=> RelationalSchema.Table>> nativequeryscrollableresults;
ClassDiagram.Class>> NativeQuerySyncSpaceCachingTest =>=>=> RelationalSchema.Table>> nativequerysyncspacecachingtest;
ClassDiagram.Class>> NumValue =>=>=> RelationalSchema.Table>> numvalue;
ClassDiagram.Class>> NativeQueryDoesNotSupportIterationTest =>=>=> RelationalSchema.Table>> nativequerydoesnotsupportiterationtest;
ClassDiagram.Class>> StoredProcedureResultSetMappingTest =>=>=> RelationalSchema.Table>> storedprocedureresultsetmappingtest;
ClassDiagram.Class>> StoredProcedureTest =>=>=> RelationalSchema.Table>> storedproceduretest;
ClassDiagram.Class>> PostgresRefCursorSupportTest =>=>=> RelationalSchema.Table>> postgresrefcursorsupporttest;
ClassDiagram.Class>> JpaFunctionTest =>=>=> RelationalSchema.Table>> jpafunctiontest;
ClassDiagram.Class>> IsolatedEvictableEntity =>=>=> RelationalSchema.Table>> isolatedevictableentity;
ClassDiagram.Class>> JdbcTimestampWithoutUTCTimeZoneTest =>=>=> RelationalSchema.Table>> jdbctimestampwithoututctimezonetest;
ClassDiagram.Class>> JdbcTimestampCustomTimeZoneTest =>=>=> RelationalSchema.Table>> jdbctimestampcustomtimezonetest;
ClassDiagram.Class>> JdbcTimestampCustomSessionLevelTimeZoneTest =>=>=> RelationalSchema.Table>> jdbctimestampcustomsessionleveltimezonetest;
ClassDiagram.Class>> JdbcTimeCustomTimeZoneTest =>=>=> RelationalSchema.Table>> jdbctimecustomtimezonetest;
ClassDiagram.Class>> JdbcTimestampDefaultTimeZoneTest =>=>=> RelationalSchema.Table>> jdbctimestampdefaulttimezonetest;
ClassDiagram.Class>> JdbcTimeDefaultTimeZoneTest =>=>=> RelationalSchema.Table>> jdbctimedefaulttimezonetest;
ClassDiagram.Class>> LocalDateCustomSessionLevelTimeZoneTest =>=>=> RelationalSchema.Table>> localdatecustomsessionleveltimezonetest;
ClassDiagram.Class>> OneToOneLazyOrphanRemovalTest =>=>=> RelationalSchema.Table>> onetoonelazyorphanremovaltest;
ClassDiagram.Class>> OneToOneProxyOrphanRemovalTest =>=>=> RelationalSchema.Table>> onetooneproxyorphanremovaltest;
ClassDiagram.Class>> OneToOneEagerNonOptionalOrphanRemovalTest =>=>=> RelationalSchema.Table>> onetooneeagernonoptionalorphanremovaltest;
ClassDiagram.Class>> Y =>=>=> RelationalSchema.Table>> y;
ClassDiagram.Class>> Tranche =>=>=> RelationalSchema.Table>> tranche;
ClassDiagram.Class>> X =>=>=> RelationalSchema.Table>> x;
ClassDiagram.Class>> Preisregelung =>=>=> RelationalSchema.Table>> preisregelung;
ClassDiagram.Class>> Tranchenmodell =>=>=> RelationalSchema.Table>> tranchenmodell;
ClassDiagram.Class>> Preisregelung =>=>=> RelationalSchema.Table>> preisregelung;
ClassDiagram.Class>> Tranche =>=>=> RelationalSchema.Table>> tranche;
ClassDiagram.Class>> Tranchenmodell =>=>=> RelationalSchema.Table>> tranchenmodell;
ClassDiagram.Class>> OneToOneEagerOrphanRemovalTest =>=>=> RelationalSchema.Table>> onetooneeagerorphanremovaltest;
ClassDiagram.Class>> OneToOneLazyNonOptionalOrphanRemovalTest =>=>=> RelationalSchema.Table>> onetoonelazynonoptionalorphanremovaltest;
ClassDiagram.Class>> Product =>=>=> RelationalSchema.Table>> product;
ClassDiagram.Class>> Feature =>=>=> RelationalSchema.Table>> feature;
ClassDiagram.Class>> WildFlyDdlEntity =>=>=> RelationalSchema.Table>> wildflyddlentity;
ClassDiagram.Class>> SubselectFetchCollectionFromBatchTest =>=>=> RelationalSchema.Table>> subselectfetchcollectionfrombatchtest;
ClassDiagram.Class>> Table2 =>=>=> RelationalSchema.Table>> table2;
ClassDiagram.Class>> PersistOnLazyCollectionTest =>=>=> RelationalSchema.Table>> persistonlazycollectiontest;
ClassDiagram.Class>> ConfEntity =>=>=> RelationalSchema.Table>> confentity;
ClassDiagram.Class>> UserEntity =>=>=> RelationalSchema.Table>> userentity;
ClassDiagram.Class>> Table1 =>=>=> RelationalSchema.Table>> table1;
ClassDiagram.Class>> UserConfEntity =>=>=> RelationalSchema.Table>> userconfentity;
ClassDiagram.Class>> ByteCodeEnhancedImmutableReferenceCacheTest =>=>=> RelationalSchema.Table>> bytecodeenhancedimmutablereferencecachetest;
ClassDiagram.Class>> EntityUpdateCacheModeIgnoreTest =>=>=> RelationalSchema.Table>> entityupdatecachemodeignoretest;
ClassDiagram.Class>> Company =>=>=> RelationalSchema.Table>> company;
ClassDiagram.Class>> CollectionCacheEvictionWithoutMappedByTest =>=>=> RelationalSchema.Table>> collectioncacheevictionwithoutmappedbytest;
ClassDiagram.Class>> SharedRegionTest =>=>=> RelationalSchema.Table>> sharedregiontest;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Class>> CacheableItem =>=>=> RelationalSchema.Table>> cacheableitem;
ClassDiagram.Class>> NonRootEntityWithCacheAnnotationTest =>=>=> RelationalSchema.Table>> nonrootentitywithcacheannotationtest;
ClassDiagram.Class>> It =>=>=> RelationalSchema.Table>> it;
ClassDiagram.Class>> ItWithPkClass =>=>=> RelationalSchema.Table>> itwithpkclass;
ClassDiagram.Class>> ReferenceCacheTest =>=>=> RelationalSchema.Table>> referencecachetest;
ClassDiagram.Class>> NonRootEntityWithCacheableAnnotationTest =>=>=> RelationalSchema.Table>> nonrootentitywithcacheableannotationtest;
ClassDiagram.Class>> ManyToManyCollectionCacheEvictionTest =>=>=> RelationalSchema.Table>> manytomanycollectioncacheevictiontest;
ClassDiagram.Class>> AbstractCachedItem =>=>=> RelationalSchema.Table>> abstractcacheditem;
ClassDiagram.Class>> CachedItem2 =>=>=> RelationalSchema.Table>> cacheditem2;
ClassDiagram.Class>> CachedItem1 =>=>=> RelationalSchema.Table>> cacheditem1;
ClassDiagram.Class>> RefreshUpdatedDataTest =>=>=> RelationalSchema.Table>> refreshupdateddatatest;
ClassDiagram.Class>> InheritanceManyToManyForeignKeyTest =>=>=> RelationalSchema.Table>> inheritancemanytomanyforeignkeytest;
ClassDiagram.Class>> ManyToManyTarget =>=>=> RelationalSchema.Table>> manytomanytarget;
ClassDiagram.Class>> ManyToManyOwner =>=>=> RelationalSchema.Table>> manytomanyowner;
ClassDiagram.Class>> DB2390DialectTestCase =>=>=> RelationalSchema.Table>> db2390dialecttestcase;
ClassDiagram.Class>> ExtraStateTest =>=>=> RelationalSchema.Table>> extrastatetest;
ClassDiagram.Class>> InformixFunctionTest =>=>=> RelationalSchema.Table>> informixfunctiontest;
ClassDiagram.Class>> In =>=>=> RelationalSchema.Table>> in;
ClassDiagram.Class>> Any =>=>=> RelationalSchema.Table>> any;
ClassDiagram.Attribut>> ClassPropertyHolder.GeneratedName:PersistentClass =>=>=> RelationalSchema.Column>> classpropertyholder.GeneratedName;
ClassDiagram.Attribut>> ClassPropertyHolder.joins:Map<String,Join> =>=>=> RelationalSchema.Column>> classpropertyholder.joins;
ClassDiagram.Attribut>> ClassPropertyHolder.joinsperrealtablename:Map<String,Join> =>=>=> RelationalSchema.Column>> classpropertyholder.joinsperrealtablename;
ClassDiagram.Attribut>> ClassPropertyHolder.GeneratedName:EntityBinder =>=>=> RelationalSchema.Column>> classpropertyholder.GeneratedName;
ClassDiagram.Attribut>> ClassPropertyHolder.inheritancestateperclass:Map<XClass,InheritanceState> =>=>=> RelationalSchema.Column>> classpropertyholder.inheritancestateperclass;
ClassDiagram.Attribut>> ClassPropertyHolder.attributeconversioninfomap:Map<String,AttributeConversionInfo> =>=>=> RelationalSchema.Column>> classpropertyholder.attributeconversioninfomap;
ClassDiagram.Attribut>> AnnotationBinder.log:CoreMessageLogger =>=>=> RelationalSchema.Column>> annotationbinder.log;
ClassDiagram.Attribut>> ResultsetMappingSecondPass.log:CoreMessageLogger =>=>=> RelationalSchema.Column>> resultsetmappingsecondpass.log;
ClassDiagram.Attribut>> ResultsetMappingSecondPass.ann:SqlResultSetMapping =>=>=> RelationalSchema.Column>> resultsetmappingsecondpass.ann;
ClassDiagram.Attribut>> ResultsetMappingSecondPass.context:MetadataBuildingContext =>=>=> RelationalSchema.Column>> resultsetmappingsecondpass.context;
ClassDiagram.Attribut>> ResultsetMappingSecondPass.isdefault:boolean =>=>=> RelationalSchema.Column>> resultsetmappingsecondpass.isdefault;
ClassDiagram.Attribut>> EntityBinder.log:CoreMessageLogger =>=>=> RelationalSchema.Column>> entitybinder.log;
ClassDiagram.Attribut>> EntityBinder.natural_id_cache_suffix:String =>=>=> RelationalSchema.Column>> entitybinder.natural_id_cache_suffix;
ClassDiagram.Attribut>> EntityBinder.context:MetadataBuildingContext =>=>=> RelationalSchema.Column>> entitybinder.context;
ClassDiagram.Attribut>> EntityBinder.name:String =>=>=> RelationalSchema.Column>> entitybinder.name;
ClassDiagram.Attribut>> EntityBinder.annotatedclass:XClass =>=>=> RelationalSchema.Column>> entitybinder.annotatedclass;
ClassDiagram.Attribut>> EntityBinder.GeneratedName:PersistentClass =>=>=> RelationalSchema.Column>> entitybinder.GeneratedName;
ClassDiagram.Attribut>> EntityBinder.discriminatorvalue:String =>=>=> RelationalSchema.Column>> entitybinder.discriminatorvalue;
ClassDiagram.Attribut>> EntityBinder.forcediscriminator:Boolean =>=>=> RelationalSchema.Column>> entitybinder.forcediscriminator;
ClassDiagram.Attribut>> EntityBinder.insertablediscriminator:Boolean =>=>=> RelationalSchema.Column>> entitybinder.insertablediscriminator;
ClassDiagram.Attribut>> EntityBinder.dynamicinsert:boolean =>=>=> RelationalSchema.Column>> entitybinder.dynamicinsert;
ClassDiagram.Attribut>> EntityBinder.dynamicupdate:boolean =>=>=> RelationalSchema.Column>> entitybinder.dynamicupdate;
ClassDiagram.Attribut>> EntityBinder.explicithibernateentityannotation:boolean =>=>=> RelationalSchema.Column>> entitybinder.explicithibernateentityannotation;
ClassDiagram.Attribut>> EntityBinder.GeneratedName:OptimisticLockType =>=>=> RelationalSchema.Column>> entitybinder.GeneratedName;
ClassDiagram.Attribut>> EntityBinder.GeneratedName:PolymorphismType =>=>=> RelationalSchema.Column>> entitybinder.GeneratedName;
ClassDiagram.Attribut>> EntityBinder.selectbeforeupdate:boolean =>=>=> RelationalSchema.Column>> entitybinder.selectbeforeupdate;
ClassDiagram.Attribut>> EntityBinder.batchsize:int =>=>=> RelationalSchema.Column>> entitybinder.batchsize;
ClassDiagram.Attribut>> EntityBinder.lazy:boolean =>=>=> RelationalSchema.Column>> entitybinder.lazy;
ClassDiagram.Attribut>> EntityBinder.proxyclass:XClass =>=>=> RelationalSchema.Column>> entitybinder.proxyclass;
ClassDiagram.Attribut>> EntityBinder.where:String =>=>=> RelationalSchema.Column>> entitybinder.where;
ClassDiagram.Attribut>> EntityBinder.secondarytables:java.util.Map<String,Join> =>=>=> RelationalSchema.Column>> entitybinder.secondarytables;
ClassDiagram.Attribut>> EntityBinder.secondarytablejoins:java.util.Map<String,Object> =>=>=> RelationalSchema.Column>> entitybinder.secondarytablejoins;
ClassDiagram.Attribut>> EntityBinder.cacheconcurrentstrategy:String =>=>=> RelationalSchema.Column>> entitybinder.cacheconcurrentstrategy;
ClassDiagram.Attribut>> EntityBinder.cacheregion:String =>=>=> RelationalSchema.Column>> entitybinder.cacheregion;
ClassDiagram.Attribut>> EntityBinder.naturalidcacheregion:String =>=>=> RelationalSchema.Column>> entitybinder.naturalidcacheregion;
ClassDiagram.Attribut>> EntityBinder.filters:List<Filter> =>=>=> RelationalSchema.Column>> entitybinder.filters;
ClassDiagram.Attribut>> EntityBinder.GeneratedName:InheritanceState =>=>=> RelationalSchema.Column>> entitybinder.GeneratedName;
ClassDiagram.Attribut>> EntityBinder.ignoreidannotations:boolean =>=>=> RelationalSchema.Column>> entitybinder.ignoreidannotations;
ClassDiagram.Attribut>> EntityBinder.cachelazyproperty:boolean =>=>=> RelationalSchema.Column>> entitybinder.cachelazyproperty;
ClassDiagram.Attribut>> EntityBinder.property:AccessType =>=>=> RelationalSchema.Column>> entitybinder.property;
ClassDiagram.Attribut>> EntityBinder.wrapidsinembeddedcomponents:boolean =>=>=> RelationalSchema.Column>> entitybinder.wrapidsinembeddedcomponents;
ClassDiagram.Attribut>> EntityBinder.subselect:String =>=>=> RelationalSchema.Column>> entitybinder.subselect;
ClassDiagram.Attribut>> EntityBinder.sec_tbl_ns_helper:SecondaryTableNamingStrategyHelper =>=>=> RelationalSchema.Column>> entitybinder.sec_tbl_ns_helper;
ClassDiagram.Attribut>> Item.itemnumber:int =>=>=> RelationalSchema.Column>> item.itemnumber PRIMARY KEY;
ClassDiagram.Attribut>> Order.ordernumber:int =>=>=> RelationalSchema.Column>> order.ordernumber PRIMARY KEY;
ClassDiagram.Attribut>> Order.name:String =>=>=> RelationalSchema.Column>> order.name;
ClassDiagram.Attribut>> GetAndIsVariantGetterTest.ssr:StandardServiceRegistry =>=>=> RelationalSchema.Column>> getandisvariantgettertest.ssr;
ClassDiagram.Attribut>> AnnotationEntity._id:Long =>=>=> RelationalSchema.Column>> annotationentity._id PRIMARY KEY;
ClassDiagram.Attribut>> Order.id:Long =>=>=> RelationalSchema.Column>> order.id PRIMARY KEY;
ClassDiagram.Attribut>> Order.version:long =>=>=> RelationalSchema.Column>> order.version;
ClassDiagram.Attribut>> Customer.id:Long =>=>=> RelationalSchema.Column>> customer.id PRIMARY KEY;
ClassDiagram.Attribut>> Customer.version:long =>=>=> RelationalSchema.Column>> customer.version;
ClassDiagram.Attribut>> TestEntity.id:long =>=>=> RelationalSchema.Column>> testentity.id PRIMARY KEY;
ClassDiagram.Attribut>> ImageReader.id:long =>=>=> RelationalSchema.Column>> imagereader.id PRIMARY KEY;
ClassDiagram.Attribut>> ImageReader.image:Blob =>=>=> RelationalSchema.Column>> imagereader.image;
ClassDiagram.Attribut>> ImageReader.text:Clob =>=>=> RelationalSchema.Column>> imagereader.text;
ClassDiagram.Attribut>> Distributor.id:Integer =>=>=> RelationalSchema.Column>> distributor.id PRIMARY KEY;
ClassDiagram.Attribut>> Distributor.name:String =>=>=> RelationalSchema.Column>> distributor.name;
ClassDiagram.Attribut>> Account.id:Long =>=>=> RelationalSchema.Column>> account.id PRIMARY KEY;
ClassDiagram.Attribut>> Account.name:String =>=>=> RelationalSchema.Column>> account.name;
ClassDiagram.Attribut>> Account.regioncode:String =>=>=> RelationalSchema.Column>> account.regioncode;
ClassDiagram.Attribut>> AccountGroup.id:Long =>=>=> RelationalSchema.Column>> accountgroup.id PRIMARY KEY;
ClassDiagram.Attribut>> Wallet.serial:String =>=>=> RelationalSchema.Column>> wallet.serial PRIMARY KEY;
ClassDiagram.Attribut>> Wallet.model:String =>=>=> RelationalSchema.Column>> wallet.model;
ClassDiagram.Attribut>> Wallet.marketentrance:Date =>=>=> RelationalSchema.Column>> wallet.marketentrance;
ClassDiagram.Attribut>> Wallet.brand:String =>=>=> RelationalSchema.Column>> wallet.brand;
ClassDiagram.Attribut>> Oven.id:Long =>=>=> RelationalSchema.Column>> oven.id PRIMARY KEY;
ClassDiagram.Attribut>> Kitchen.id:Long =>=>=> RelationalSchema.Column>> kitchen.id PRIMARY KEY;
ClassDiagram.Attribut>> IncidentStatus.id:String =>=>=> RelationalSchema.Column>> incidentstatus.id PRIMARY KEY;
ClassDiagram.Attribut>> Incident.id:String =>=>=> RelationalSchema.Column>> incident.id PRIMARY KEY;
ClassDiagram.Attribut>> CupHolder.id:Integer =>=>=> RelationalSchema.Column>> cupholder.id PRIMARY KEY;
ClassDiagram.Attribut>> CupHolder.radius:BigDecimal =>=>=> RelationalSchema.Column>> cupholder.radius;
ClassDiagram.Attribut>> CupHolder.title:String =>=>=> RelationalSchema.Column>> cupholder.title;
ClassDiagram.Attribut>> DataPoint.id:long =>=>=> RelationalSchema.Column>> datapoint.id PRIMARY KEY;
ClassDiagram.Attribut>> UnlistedDataPoint.id:long =>=>=> RelationalSchema.Column>> unlisteddatapoint.id PRIMARY KEY;
ClassDiagram.Attribut>> Person.firstname:String =>=>=> RelationalSchema.Column>> person.firstname PRIMARY KEY;
ClassDiagram.Attribut>> Person.lastname:String =>=>=> RelationalSchema.Column>> person.lastname PRIMARY KEY;
ClassDiagram.Attribut>> Person.age:Short =>=>=> RelationalSchema.Column>> person.age;
ClassDiagram.Attribut>> JoinedManyToOneOwner.id:Long =>=>=> RelationalSchema.Column>> joinedmanytooneowner.id PRIMARY KEY;
ClassDiagram.Attribut>> JoinedManyToOneOwner.GeneratedName:House =>=>=> RelationalSchema.Column>> joinedmanytooneowner.GeneratedName;
ClassDiagram.Attribut>> Child.id:Integer =>=>=> RelationalSchema.Column>> child.id PRIMARY KEY;
ClassDiagram.Attribut>> Child.name:String =>=>=> RelationalSchema.Column>> child.name;
ClassDiagram.Attribut>> Giant.height:long =>=>=> RelationalSchema.Column>> giant.height;
ClassDiagram.Attribut>> DeskWithRawType.id:String =>=>=> RelationalSchema.Column>> deskwithrawtype.id PRIMARY KEY;
ClassDiagram.Attribut>> DeskWithRawType.name:String =>=>=> RelationalSchema.Column>> deskwithrawtype.name;
ClassDiagram.Attribut>> Flower.id:Long =>=>=> RelationalSchema.Column>> flower.id PRIMARY KEY;
ClassDiagram.Attribut>> Flower.name:String =>=>=> RelationalSchema.Column>> flower.name;
ClassDiagram.Attribut>> Fridge.id:Long =>=>=> RelationalSchema.Column>> fridge.id PRIMARY KEY;
ClassDiagram.Attribut>> Fridge.brand:String =>=>=> RelationalSchema.Column>> fridge.brand;
ClassDiagram.Attribut>> Fridge.temperature:int =>=>=> RelationalSchema.Column>> fridge.temperature;
ClassDiagram.Attribut>> FoodItem.id:Long =>=>=> RelationalSchema.Column>> fooditem.id PRIMARY KEY;
ClassDiagram.Attribut>> FoodItem.name:String =>=>=> RelationalSchema.Column>> fooditem.name;
ClassDiagram.Attribut>> FoodItem.version:Long =>=>=> RelationalSchema.Column>> fooditem.version;
ClassDiagram.Attribut>> Cat.nickname:String =>=>=> RelationalSchema.Column>> cat.nickname;
ClassDiagram.Attribut>> Dog.name:String =>=>=> RelationalSchema.Column>> dog.name;
ClassDiagram.Attribut>> Parent.id:Integer =>=>=> RelationalSchema.Column>> parent.id PRIMARY KEY;
ClassDiagram.Attribut>> Parent.name:String =>=>=> RelationalSchema.Column>> parent.name;
ClassDiagram.Attribut>> Parent.siblings:Relatives<Child> =>=>=> RelationalSchema.Column>> parent.siblings;
ClassDiagram.Attribut>> House.GeneratedName:Key =>=>=> RelationalSchema.Column>> house.GeneratedName;
ClassDiagram.Attribut>> House.GeneratedName:Address =>=>=> RelationalSchema.Column>> house.GeneratedName;
ClassDiagram.Attribut>> House.rooms:Set<Room> =>=>=> RelationalSchema.Column>> house.rooms;
ClassDiagram.Attribut>> House.roomsbyname:Map<String,Room> =>=>=> RelationalSchema.Column>> house.roomsbyname;
ClassDiagram.Attribut>> House.roomsbysize:List<Room> =>=>=> RelationalSchema.Column>> house.roomsbysize;
ClassDiagram.Attribut>> Garden.id:Long =>=>=> RelationalSchema.Column>> garden.id PRIMARY KEY;
ClassDiagram.Attribut>> Garden.name:String =>=>=> RelationalSchema.Column>> garden.name;
ClassDiagram.Attribut>> WithGenericCollection.id:String =>=>=> RelationalSchema.Column>> withgenericcollection.id PRIMARY KEY;
ClassDiagram.Attribut>> WithGenericCollection.d:double =>=>=> RelationalSchema.Column>> withgenericcollection.d;
ClassDiagram.Attribut>> EmployeeWithRawType.id:String =>=>=> RelationalSchema.Column>> employeewithrawtype.id PRIMARY KEY;
ClassDiagram.Attribut>> EmployeeWithRawType.name:String =>=>=> RelationalSchema.Column>> employeewithrawtype.name;
ClassDiagram.Attribut>> SimpleMedicalHistory.lastup:Date =>=>=> RelationalSchema.Column>> simplemedicalhistory.lastup;
ClassDiagram.Attribut>> SimpleMedicalHistory.patient:SimplePerson =>=>=> RelationalSchema.Column>> simplemedicalhistory.patient PRIMARY KEY;
ClassDiagram.Attribut>> Feline.color:String =>=>=> RelationalSchema.Column>> feline.color;
ClassDiagram.Attribut>> SimplePerson.ssn:String =>=>=> RelationalSchema.Column>> simpleperson.ssn PRIMARY KEY;
ClassDiagram.Attribut>> Troop.id:Integer =>=>=> RelationalSchema.Column>> troop.id PRIMARY KEY;
ClassDiagram.Attribut>> Troop.name:String =>=>=> RelationalSchema.Column>> troop.name;
ClassDiagram.Attribut>> Author.id:Long =>=>=> RelationalSchema.Column>> author.id PRIMARY KEY;
ClassDiagram.Attribut>> Parent.id:Integer =>=>=> RelationalSchema.Column>> parent.id PRIMARY KEY;
ClassDiagram.Attribut>> Top.id:Long =>=>=> RelationalSchema.Column>> top.id PRIMARY KEY;
ClassDiagram.Attribut>> Middle.id:Long =>=>=> RelationalSchema.Column>> middle.id PRIMARY KEY;
ClassDiagram.Attribut>> MultiLevelCascadeToStringTest.log:Logger =>=>=> RelationalSchema.Column>> multilevelcascadetostringtest.log;
ClassDiagram.Attribut>> Bottom.id:Long =>=>=> RelationalSchema.Column>> bottom.id PRIMARY KEY;
ClassDiagram.Attribut>> Soldier2.id:Integer =>=>=> RelationalSchema.Column>> soldier2.id PRIMARY KEY;
ClassDiagram.Attribut>> Soldier2.name:String =>=>=> RelationalSchema.Column>> soldier2.name;
ClassDiagram.Attribut>> ExtractionDocumentInfo.id:Long =>=>=> RelationalSchema.Column>> extractiondocumentinfo.id PRIMARY KEY;
ClassDiagram.Attribut>> ExtractionDocumentInfo.lastmodified:Date =>=>=> RelationalSchema.Column>> extractiondocumentinfo.lastmodified;
ClassDiagram.Attribut>> ExtractionDocumentInfo.GeneratedName:Conference =>=>=> RelationalSchema.Column>> extractiondocumentinfo.GeneratedName;
ClassDiagram.Attribut>> Teacher.id:Long =>=>=> RelationalSchema.Column>> teacher.id PRIMARY KEY;
ClassDiagram.Attribut>> Teacher.name:String =>=>=> RelationalSchema.Column>> teacher.name;
ClassDiagram.Attribut>> ExtractionDocument.id:Long =>=>=> RelationalSchema.Column>> extractiondocument.id PRIMARY KEY;
ClassDiagram.Attribut>> ExtractionDocument.body:byte =>=>=> RelationalSchema.Column>> extractiondocument.body;
ClassDiagram.Attribut>> Grandson.id:Integer =>=>=> RelationalSchema.Column>> grandson.id PRIMARY KEY;
ClassDiagram.Attribut>> Troop2./*fails:*/id:Integer =>=>=> RelationalSchema.Column>> troop2./*fails:*/id PRIMARY KEY;
ClassDiagram.Attribut>> Troop2.name:String =>=>=> RelationalSchema.Column>> troop2.name;
ClassDiagram.Attribut>> Conference.id:Long =>=>=> RelationalSchema.Column>> conference.id PRIMARY KEY;
ClassDiagram.Attribut>> Conference.GeneratedName:Date =>=>=> RelationalSchema.Column>> conference.GeneratedName;
ClassDiagram.Attribut>> Student.id:Long =>=>=> RelationalSchema.Column>> student.id PRIMARY KEY;
ClassDiagram.Attribut>> Student.name:String =>=>=> RelationalSchema.Column>> student.name;
ClassDiagram.Attribut>> Soldier.id:Integer =>=>=> RelationalSchema.Column>> soldier.id PRIMARY KEY;
ClassDiagram.Attribut>> Soldier.name:String =>=>=> RelationalSchema.Column>> soldier.name;
ClassDiagram.Attribut>> Soldier.GeneratedName:Troop =>=>=> RelationalSchema.Column>> soldier.GeneratedName;
ClassDiagram.Attribut>> Song.id:Long =>=>=> RelationalSchema.Column>> song.id PRIMARY KEY;
ClassDiagram.Attribut>> Son.id:Integer =>=>=> RelationalSchema.Column>> son.id PRIMARY KEY;
ClassDiagram.Attribut>> Item.name:String =>=>=> RelationalSchema.Column>> item.name PRIMARY KEY;
ClassDiagram.Attribut>> Item.descr:String =>=>=> RelationalSchema.Column>> item.descr;
ClassDiagram.Attribut>> Item.intval:Integer =>=>=> RelationalSchema.Column>> item.intval;
ClassDiagram.Attribut>> Product.id:Long =>=>=> RelationalSchema.Column>> product.id PRIMARY KEY;
ClassDiagram.Attribut>> Product1.overridenname:String =>=>=> RelationalSchema.Column>> product1.overridenname;
ClassDiagram.Attribut>> Company.id:Long =>=>=> RelationalSchema.Column>> company.id PRIMARY KEY;
ClassDiagram.Attribut>> Product.description:String =>=>=> RelationalSchema.Column>> product.description;
ClassDiagram.Attribut>> ProductAttribute.owner:String =>=>=> RelationalSchema.Column>> productattribute.owner PRIMARY KEY;
ClassDiagram.Attribut>> Customer.comments:String =>=>=> RelationalSchema.Column>> customer.comments;
ClassDiagram.Attribut>> VideoSystem.transientcounter:int =>=>=> RelationalSchema.Column>> videosystem.transientcounter;
ClassDiagram.Attribut>> Plant.id:String =>=>=> RelationalSchema.Column>> plant.id PRIMARY KEY;
ClassDiagram.Attribut>> Plant.name:String =>=>=> RelationalSchema.Column>> plant.name;
ClassDiagram.Attribut>> Employee.title:String =>=>=> RelationalSchema.Column>> employee.title;
ClassDiagram.Attribut>> Employee.salary:BigDecimal =>=>=> RelationalSchema.Column>> employee.salary;
ClassDiagram.Attribut>> Person.id:long =>=>=> RelationalSchema.Column>> person.id PRIMARY KEY;
ClassDiagram.Attribut>> Person.name:String =>=>=> RelationalSchema.Column>> person.name;
ClassDiagram.Attribut>> Person.address:String =>=>=> RelationalSchema.Column>> person.address;
ClassDiagram.Attribut>> Person.zip:String =>=>=> RelationalSchema.Column>> person.zip;
ClassDiagram.Attribut>> Person.country:String =>=>=> RelationalSchema.Column>> person.country;
ClassDiagram.Attribut>> Person.sex:char =>=>=> RelationalSchema.Column>> person.sex;
ClassDiagram.Attribut>> Rythm.id:Integer =>=>=> RelationalSchema.Column>> rythm.id PRIMARY KEY;
ClassDiagram.Attribut>> RemoteControl.id:Integer =>=>=> RelationalSchema.Column>> remotecontrol.id PRIMARY KEY;
ClassDiagram.Attribut>> RemoteControl.creation:Date =>=>=> RelationalSchema.Column>> remotecontrol.creation;
ClassDiagram.Attribut>> Television.id:Integer =>=>=> RelationalSchema.Column>> television.id PRIMARY KEY;
ClassDiagram.Attribut>> Television.name:String =>=>=> RelationalSchema.Column>> television.name;
ClassDiagram.Attribut>> CommunicationSystem.communication:int =>=>=> RelationalSchema.Column>> communicationsystem.communication;
ClassDiagram.Attribut>> CommunicationSystem.isfirst:boolean =>=>=> RelationalSchema.Column>> communicationsystem.isfirst;
ClassDiagram.Attribut>> CommunicationSystem.islast:boolean =>=>=> RelationalSchema.Column>> communicationsystem.islast;
ClassDiagram.Attribut>> Translation.id:Integer =>=>=> RelationalSchema.Column>> translation.id PRIMARY KEY;
ClassDiagram.Attribut>> Translation.into:String =>=>=> RelationalSchema.Column>> translation.into;
ClassDiagram.Attribut>> B.id:Integer =>=>=> RelationalSchema.Column>> b.id PRIMARY KEY;
ClassDiagram.Attribut>> B.GeneratedName:A =>=>=> RelationalSchema.Column>> b.GeneratedName;
ClassDiagram.Attribut>> Y.id:Long =>=>=> RelationalSchema.Column>> y.id PRIMARY KEY;
ClassDiagram.Attribut>> X.id:Long =>=>=> RelationalSchema.Column>> x.id PRIMARY KEY;
ClassDiagram.Attribut>> Tranchenmodell.id:Long =>=>=> RelationalSchema.Column>> tranchenmodell.id PRIMARY KEY;
ClassDiagram.Attribut>> Preisregelung.id:Long =>=>=> RelationalSchema.Column>> preisregelung.id PRIMARY KEY;
ClassDiagram.Attribut>> Tranche.id:Long =>=>=> RelationalSchema.Column>> tranche.id PRIMARY KEY;
ClassDiagram.Attribut>> A.id:Integer =>=>=> RelationalSchema.Column>> a.id PRIMARY KEY;
ClassDiagram.Attribut>> A.GeneratedName:B =>=>=> RelationalSchema.Column>> a.GeneratedName;
ClassDiagram.Attribut>> Feature.id:Long =>=>=> RelationalSchema.Column>> feature.id PRIMARY KEY;
ClassDiagram.Attribut>> Feature.name:String =>=>=> RelationalSchema.Column>> feature.name;
ClassDiagram.Attribut>> Product.id:Long =>=>=> RelationalSchema.Column>> product.id PRIMARY KEY;
ClassDiagram.Attribut>> Product.name:String =>=>=> RelationalSchema.Column>> product.name;
ClassDiagram.Attribut>> DeleteSharedOneToManyOrphansTest.1alongwiththeinitializationoftheitem#higheritemrelations	collectioncausestheissue	*/batch_fetch_size:String =>=>=> RelationalSchema.Column>> deletesharedonetomanyorphanstest.1alongwiththeinitializationoftheitem#higheritemrelations	collectioncausestheissue	*/batch_fetch_size;
ClassDiagram.Attribut>> Item.name:String =>=>=> RelationalSchema.Column>> item.name PRIMARY KEY;
ClassDiagram.Attribut>> Item.descr:String =>=>=> RelationalSchema.Column>> item.descr;
ClassDiagram.Attribut>> SchemaCreateDropUtf8WithoutHbm2DdlCharsetNameTest.createschema:File =>=>=> RelationalSchema.Column>> schemacreatedroputf8withouthbm2ddlcharsetnametest.createschema;
ClassDiagram.Attribut>> SchemaCreateDropUtf8WithoutHbm2DdlCharsetNameTest.dropschema:File =>=>=> RelationalSchema.Column>> schemacreatedroputf8withouthbm2ddlcharsetnametest.dropschema;
ClassDiagram.Attribut>> SchemaCreateDropUtf8WithoutHbm2DdlCharsetNameTest.GeneratedName:EntityManagerFactoryBuilder =>=>=> RelationalSchema.Column>> schemacreatedroputf8withouthbm2ddlcharsetnametest.GeneratedName;
ClassDiagram.Attribut>> Document.id:Long =>=>=> RelationalSchema.Column>> document.id PRIMARY KEY;
ClassDiagram.Attribut>> Document.name:String =>=>=> RelationalSchema.Column>> document.name;
ClassDiagram.Attribut>> SchemaScriptFileGenerationTest.createschema:File =>=>=> RelationalSchema.Column>> schemascriptfilegenerationtest.createschema;
ClassDiagram.Attribut>> SchemaScriptFileGenerationTest.dropschema:File =>=>=> RelationalSchema.Column>> schemascriptfilegenerationtest.dropschema;
ClassDiagram.Attribut>> SchemaScriptFileGenerationTest.GeneratedName:EntityManagerFactoryBuilder =>=>=> RelationalSchema.Column>> schemascriptfilegenerationtest.GeneratedName;
ClassDiagram.Attribut>> Kitten.id:Integer =>=>=> RelationalSchema.Column>> kitten.id PRIMARY KEY;
ClassDiagram.Attribut>> Kitten.name:String =>=>=> RelationalSchema.Column>> kitten.name;
ClassDiagram.Attribut>> Pasta.id:Integer =>=>=> RelationalSchema.Column>> pasta.id PRIMARY KEY;
ClassDiagram.Attribut>> Pasta.type:String =>=>=> RelationalSchema.Column>> pasta.type;
ClassDiagram.Attribut>> Thing.id:String =>=>=> RelationalSchema.Column>> thing.id PRIMARY KEY;
ClassDiagram.Attribut>> Thing.name:String =>=>=> RelationalSchema.Column>> thing.name;
ClassDiagram.Attribut>> Entity1.id:long =>=>=> RelationalSchema.Column>> entity1.id PRIMARY KEY;
ClassDiagram.Attribut>> Entity1.value:String =>=>=> RelationalSchema.Column>> entity1.value;
ClassDiagram.Attribut>> CreditCard.id:String =>=>=> RelationalSchema.Column>> creditcard.id PRIMARY KEY;
ClassDiagram.Attribut>> CreditCard.number:String =>=>=> RelationalSchema.Column>> creditcard.number;
ClassDiagram.Attribut>> CreditCard.type:String =>=>=> RelationalSchema.Column>> creditcard.type;
ClassDiagram.Attribut>> CreditCard.expires:String =>=>=> RelationalSchema.Column>> creditcard.expires;
ClassDiagram.Attribut>> CreditCard.approved:boolean =>=>=> RelationalSchema.Column>> creditcard.approved;
ClassDiagram.Attribut>> CreditCard.balance:double =>=>=> RelationalSchema.Column>> creditcard.balance;
ClassDiagram.Attribut>> CreditCard.GeneratedName:Order =>=>=> RelationalSchema.Column>> creditcard.GeneratedName;
ClassDiagram.Attribut>> CreditCard.GeneratedName:Customer =>=>=> RelationalSchema.Column>> creditcard.GeneratedName;
ClassDiagram.Attribut>> Info.id:String =>=>=> RelationalSchema.Column>> info.id PRIMARY KEY;
ClassDiagram.Attribut>> Info.street:String =>=>=> RelationalSchema.Column>> info.street;
ClassDiagram.Attribut>> Info.city:String =>=>=> RelationalSchema.Column>> info.city;
ClassDiagram.Attribut>> Info.state:String =>=>=> RelationalSchema.Column>> info.state;
ClassDiagram.Attribut>> Info.zip:String =>=>=> RelationalSchema.Column>> info.zip;
ClassDiagram.Attribut>> Info.GeneratedName:Spouse =>=>=> RelationalSchema.Column>> info.GeneratedName;
ClassDiagram.Attribut>> SomeMappedSuperclassSubclass.thedata:String =>=>=> RelationalSchema.Column>> somemappedsuperclasssubclass.thedata;
ClassDiagram.Attribut>> Person.firstname:String =>=>=> RelationalSchema.Column>> person.firstname;
ClassDiagram.Attribut>> Person.lastname:String =>=>=> RelationalSchema.Column>> person.lastname;
ClassDiagram.Attribut>> Customer.id:String =>=>=> RelationalSchema.Column>> customer.id PRIMARY KEY;
ClassDiagram.Attribut>> Customer.name:String =>=>=> RelationalSchema.Column>> customer.name;
ClassDiagram.Attribut>> Customer.age:Integer =>=>=> RelationalSchema.Column>> customer.age;
ClassDiagram.Attribut>> Customer.GeneratedName:Country =>=>=> RelationalSchema.Column>> customer.GeneratedName;
ClassDiagram.Attribut>> Customer.GeneratedName:Spouse =>=>=> RelationalSchema.Column>> customer.GeneratedName;
ClassDiagram.Attribut>> MapEntity.key:String =>=>=> RelationalSchema.Column>> mapentity.key PRIMARY KEY;
ClassDiagram.Attribut>> MapEntity.localized:Map<String,MapEntityLocal> =>=>=> RelationalSchema.Column>> mapentity.localized;
ClassDiagram.Attribut>> VersionedEntity.id:String =>=>=> RelationalSchema.Column>> versionedentity.id PRIMARY KEY;
ClassDiagram.Attribut>> VersionedEntity.name:String =>=>=> RelationalSchema.Column>> versionedentity.name;
ClassDiagram.Attribut>> VersionedEntity.version:int =>=>=> RelationalSchema.Column>> versionedentity.version;
ClassDiagram.Attribut>> Phone.id:String =>=>=> RelationalSchema.Column>> phone.id PRIMARY KEY;
ClassDiagram.Attribut>> Phone.area:String =>=>=> RelationalSchema.Column>> phone.area;
ClassDiagram.Attribut>> Phone.number:String =>=>=> RelationalSchema.Column>> phone.number;
ClassDiagram.Attribut>> Phone.GeneratedName:Address =>=>=> RelationalSchema.Column>> phone.GeneratedName;
ClassDiagram.Attribut>> Phone.types:Set<Type> =>=>=> RelationalSchema.Column>> phone.types;
ClassDiagram.Attribut>> Order.id:String =>=>=> RelationalSchema.Column>> order.id PRIMARY KEY;
ClassDiagram.Attribut>> Order.totalprice:double =>=>=> RelationalSchema.Column>> order.totalprice;
ClassDiagram.Attribut>> Order.GeneratedName:Customer =>=>=> RelationalSchema.Column>> order.GeneratedName;
ClassDiagram.Attribut>> Order.GeneratedName:CreditCard =>=>=> RelationalSchema.Column>> order.GeneratedName;
ClassDiagram.Attribut>> Order.sample:LineItem =>=>=> RelationalSchema.Column>> order.sample;
ClassDiagram.Attribut>> Order.domen:char =>=>=> RelationalSchema.Column>> order.domen;
ClassDiagram.Attribut>> Order.number:byte =>=>=> RelationalSchema.Column>> order.number;
ClassDiagram.Attribut>> LineItem.id:String =>=>=> RelationalSchema.Column>> lineitem.id PRIMARY KEY;
ClassDiagram.Attribut>> LineItem.quantity:int =>=>=> RelationalSchema.Column>> lineitem.quantity;
ClassDiagram.Attribut>> LineItem.GeneratedName:Order =>=>=> RelationalSchema.Column>> lineitem.GeneratedName;
ClassDiagram.Attribut>> LineItem.GeneratedName:Product =>=>=> RelationalSchema.Column>> lineitem.GeneratedName;
ClassDiagram.Attribut>> Address.id:String =>=>=> RelationalSchema.Column>> address.id PRIMARY KEY;
ClassDiagram.Attribut>> Address.street:String =>=>=> RelationalSchema.Column>> address.street;
ClassDiagram.Attribut>> Address.city:String =>=>=> RelationalSchema.Column>> address.city;
ClassDiagram.Attribut>> Address.state:String =>=>=> RelationalSchema.Column>> address.state;
ClassDiagram.Attribut>> Address.zip:String =>=>=> RelationalSchema.Column>> address.zip;
ClassDiagram.Attribut>> Translation.id:Integer =>=>=> RelationalSchema.Column>> translation.id PRIMARY KEY;
ClassDiagram.Attribut>> Translation.title:String =>=>=> RelationalSchema.Column>> translation.title;
ClassDiagram.Attribut>> Translation.text:String =>=>=> RelationalSchema.Column>> translation.text;
ClassDiagram.Attribut>> Product.id:String =>=>=> RelationalSchema.Column>> product.id PRIMARY KEY;
ClassDiagram.Attribut>> Product.name:String =>=>=> RelationalSchema.Column>> product.name;
ClassDiagram.Attribut>> Product.price:double =>=>=> RelationalSchema.Column>> product.price;
ClassDiagram.Attribut>> Product.rating:float =>=>=> RelationalSchema.Column>> product.rating;
ClassDiagram.Attribut>> Product.quantity:int =>=>=> RelationalSchema.Column>> product.quantity;
ClassDiagram.Attribut>> Product.partnumber:long =>=>=> RelationalSchema.Column>> product.partnumber;
ClassDiagram.Attribut>> Product.some:BigInteger =>=>=> RelationalSchema.Column>> product.some;
ClassDiagram.Attribut>> Product.some:BigDecimal =>=>=> RelationalSchema.Column>> product.some;
ClassDiagram.Attribut>> Product.warehouse:String =>=>=> RelationalSchema.Column>> product.warehouse;
ClassDiagram.Attribut>> Product.GeneratedName:ShelfLife =>=>=> RelationalSchema.Column>> product.GeneratedName;
ClassDiagram.Attribut>> Entity2.id:long =>=>=> RelationalSchema.Column>> entity2.id PRIMARY KEY;
ClassDiagram.Attribut>> Entity2.value:String =>=>=> RelationalSchema.Column>> entity2.value;
ClassDiagram.Attribut>> ThingWithQuantity.quantity:int =>=>=> RelationalSchema.Column>> thingwithquantity.quantity;
ClassDiagram.Attribut>> Entity3.id:long =>=>=> RelationalSchema.Column>> entity3.id PRIMARY KEY;
ClassDiagram.Attribut>> Entity3.value:String =>=>=> RelationalSchema.Column>> entity3.value;
ClassDiagram.Attribut>> Article.id:Integer =>=>=> RelationalSchema.Column>> article.id PRIMARY KEY;
ClassDiagram.Attribut>> Spouse.id:String =>=>=> RelationalSchema.Column>> spouse.id PRIMARY KEY;
ClassDiagram.Attribut>> Spouse.first:String =>=>=> RelationalSchema.Column>> spouse.first;
ClassDiagram.Attribut>> Spouse.maiden:String =>=>=> RelationalSchema.Column>> spouse.maiden;
ClassDiagram.Attribut>> Spouse.last:String =>=>=> RelationalSchema.Column>> spouse.last;
ClassDiagram.Attribut>> Spouse.snumber:String =>=>=> RelationalSchema.Column>> spouse.snumber;
ClassDiagram.Attribut>> Spouse.GeneratedName:Info =>=>=> RelationalSchema.Column>> spouse.GeneratedName;
ClassDiagram.Attribut>> Spouse.GeneratedName:Customer =>=>=> RelationalSchema.Column>> spouse.GeneratedName;
ClassDiagram.Attribut>> Alias.id:String =>=>=> RelationalSchema.Column>> alias.id PRIMARY KEY;
ClassDiagram.Attribut>> Alias.alias:String =>=>=> RelationalSchema.Column>> alias.alias;
ClassDiagram.Attribut>> Alias.noop:Customer =>=>=> RelationalSchema.Column>> alias.noop;
ClassDiagram.Attribut>> NestedLegacyEntity.GeneratedName:LegacyEntity =>=>=> RelationalSchema.Column>> nestedlegacyentity.GeneratedName PRIMARY KEY;
ClassDiagram.Attribut>> NestedLegacyEntity.GeneratedName:ModernEntity =>=>=> RelationalSchema.Column>> nestedlegacyentity.GeneratedName PRIMARY KEY;
ClassDiagram.Attribut>> LegacyEntity.primitivepk1:int =>=>=> RelationalSchema.Column>> legacyentity.primitivepk1 PRIMARY KEY;
ClassDiagram.Attribut>> LegacyEntity.primitivepk2:int =>=>=> RelationalSchema.Column>> legacyentity.primitivepk2 PRIMARY KEY;
ClassDiagram.Attribut>> LegacyEntity.foo:String =>=>=> RelationalSchema.Column>> legacyentity.foo;
ClassDiagram.Attribut>> ModernEntity.id:int =>=>=> RelationalSchema.Column>> modernentity.id PRIMARY KEY;
ClassDiagram.Attribut>> ModernEntity.foo:int =>=>=> RelationalSchema.Column>> modernentity.foo;
ClassDiagram.Attribut>> Reptile.temperature:float =>=>=> RelationalSchema.Column>> reptile.temperature;
ClassDiagram.Attribut>> Animal.name:String =>=>=> RelationalSchema.Column>> animal.name;
ClassDiagram.Attribut>> Animal.id:Long =>=>=> RelationalSchema.Column>> animal.id PRIMARY KEY;
ClassDiagram.Attribut>> Workload.id:Integer =>=>=> RelationalSchema.Column>> workload.id PRIMARY KEY;
ClassDiagram.Attribut>> Workload.name:String =>=>=> RelationalSchema.Column>> workload.name;
ClassDiagram.Attribut>> Workload.load:Integer =>=>=> RelationalSchema.Column>> workload.load;
ClassDiagram.Attribut>> Mammal.mamalnbr:int =>=>=> RelationalSchema.Column>> mammal.mamalnbr;
ClassDiagram.Attribut>> BasicCdiTest.emf:EntityManagerFactory =>=>=> RelationalSchema.Column>> basiccditest.emf;
ClassDiagram.Attribut>> BasicCdiTest.utx:UserTransaction =>=>=> RelationalSchema.Column>> basiccditest.utx;
ClassDiagram.Attribut>> BasicCdiTest.count:int =>=>=> RelationalSchema.Column>> basiccditest.count;
ClassDiagram.Attribut>> Event.id:Long =>=>=> RelationalSchema.Column>> event.id PRIMARY KEY;
ClassDiagram.Attribut>> Event.name:String =>=>=> RelationalSchema.Column>> event.name;
ClassDiagram.Attribut>> StoreProcedureRefCursorOutParameterByNameTest.GeneratedName:EntityManagerFactory =>=>=> RelationalSchema.Column>> storeprocedurerefcursoroutparameterbynametest.GeneratedName;
ClassDiagram.Attribut>> StoredProcedureNullParameterByNameTest.GeneratedName:EntityManagerFactory =>=>=> RelationalSchema.Column>> storedprocedurenullparameterbynametest.GeneratedName;
ClassDiagram.Attribut>> StoreProcedureOutParameterByPositionTest.GeneratedName:EntityManagerFactory =>=>=> RelationalSchema.Column>> storeprocedureoutparameterbypositiontest.GeneratedName;
ClassDiagram.Attribut>> DateTimeParameterTest.entitymanagerfactory:HibernateEntityManagerFactory =>=>=> RelationalSchema.Column>> datetimeparametertest.entitymanagerfactory;
ClassDiagram.Attribut>> DateTimeParameterTest.nowcal:GregorianCalendar =>=>=> RelationalSchema.Column>> datetimeparametertest.nowcal;
ClassDiagram.Attribut>> DateTimeParameterTest.now:Date =>=>=> RelationalSchema.Column>> datetimeparametertest.now;
ClassDiagram.Attribut>> User.id:int =>=>=> RelationalSchema.Column>> user.id PRIMARY KEY;
ClassDiagram.Attribut>> User.name:String =>=>=> RelationalSchema.Column>> user.name;
ClassDiagram.Attribut>> HSQLStoreProcedureTest.GeneratedName:EntityManagerFactory =>=>=> RelationalSchema.Column>> hsqlstoreproceduretest.GeneratedName;
ClassDiagram.Attribut>> StoreProcedureOutParameterByNameTest.GeneratedName:EntityManagerFactory =>=>=> RelationalSchema.Column>> storeprocedureoutparameterbynametest.GeneratedName;
ClassDiagram.Attribut>> StoreProcedureRefCursorOutParameterByPositionTest.GeneratedName:EntityManagerFactory =>=>=> RelationalSchema.Column>> storeprocedurerefcursoroutparameterbypositiontest.GeneratedName;
ClassDiagram.Attribut>> TestConnectionPool.connection_pool_size:int =>=>=> RelationalSchema.Column>> testconnectionpool.connection_pool_size;
ClassDiagram.Attribut>> Music.id:Integer =>=>=> RelationalSchema.Column>> music.id PRIMARY KEY;
ClassDiagram.Attribut>> Music.version:Integer =>=>=> RelationalSchema.Column>> music.version;
ClassDiagram.Attribut>> Music.name:String =>=>=> RelationalSchema.Column>> music.name;
ClassDiagram.Attribut>> Instrument.id:int =>=>=> RelationalSchema.Column>> instrument.id PRIMARY KEY;
ClassDiagram.Attribut>> Instrument.name:String =>=>=> RelationalSchema.Column>> instrument.name;
ClassDiagram.Attribut>> Instrument.GeneratedName:Type =>=>=> RelationalSchema.Column>> instrument.GeneratedName;
ClassDiagram.Attribut>> Musician.id:Integer =>=>=> RelationalSchema.Column>> musician.id PRIMARY KEY;
ClassDiagram.Attribut>> Musician.name:String =>=>=> RelationalSchema.Column>> musician.name;
ClassDiagram.Attribut>> Musician.favourite:Music =>=>=> RelationalSchema.Column>> musician.favourite;
ClassDiagram.Attribut>> Category.id:Long =>=>=> RelationalSchema.Column>> category.id PRIMARY KEY;
ClassDiagram.Attribut>> Category.name:String =>=>=> RelationalSchema.Column>> category.name;
ClassDiagram.Attribut>> Category.version:int =>=>=> RelationalSchema.Column>> category.version;
ClassDiagram.Attribut>> Decorate.id:int =>=>=> RelationalSchema.Column>> decorate.id PRIMARY KEY;
ClassDiagram.Attribut>> Decorate.name:String =>=>=> RelationalSchema.Column>> decorate.name;
ClassDiagram.Attribut>> Decorate.GeneratedName:Pet =>=>=> RelationalSchema.Column>> decorate.GeneratedName;
ClassDiagram.Attribut>> Pet.id:int =>=>=> RelationalSchema.Column>> pet.id PRIMARY KEY;
ClassDiagram.Attribut>> Pet.name:String =>=>=> RelationalSchema.Column>> pet.name;
ClassDiagram.Attribut>> Pet.weight:double =>=>=> RelationalSchema.Column>> pet.weight;
ClassDiagram.Attribut>> Competition.id:Integer =>=>=> RelationalSchema.Column>> competition.id PRIMARY KEY;
ClassDiagram.Attribut>> Competitor.id:Integer =>=>=> RelationalSchema.Column>> competitor.id PRIMARY KEY;
ClassDiagram.Attribut>> Competitor.name:String =>=>=> RelationalSchema.Column>> competitor.name;
ClassDiagram.Attribut>> B2.id:int =>=>=> RelationalSchema.Column>> b2.id PRIMARY KEY;
ClassDiagram.Attribut>> A.id:int =>=>=> RelationalSchema.Column>> a.id PRIMARY KEY;
ClassDiagram.Attribut>> A.name:String =>=>=> RelationalSchema.Column>> a.name;
ClassDiagram.Attribut>> C2.id:int =>=>=> RelationalSchema.Column>> c2.id PRIMARY KEY;
ClassDiagram.Attribut>> B3.id:int =>=>=> RelationalSchema.Column>> b3.id PRIMARY KEY;
ClassDiagram.Attribut>> C1.id:int =>=>=> RelationalSchema.Column>> c1.id PRIMARY KEY;
ClassDiagram.Attribut>> B1.id:int =>=>=> RelationalSchema.Column>> b1.id PRIMARY KEY;
ClassDiagram.Attribut>> B4.id:int =>=>=> RelationalSchema.Column>> b4.id PRIMARY KEY;
ClassDiagram.Attribut>> Music.id:Integer =>=>=> RelationalSchema.Column>> music.id PRIMARY KEY;
ClassDiagram.Attribut>> Music.name:String =>=>=> RelationalSchema.Column>> music.name;
ClassDiagram.Attribut>> Music.version:Integer =>=>=> RelationalSchema.Column>> music.version;
ClassDiagram.Attribut>> Item.id:Long =>=>=> RelationalSchema.Column>> item.id PRIMARY KEY;
ClassDiagram.Attribut>> Item.version:int =>=>=> RelationalSchema.Column>> item.version;
ClassDiagram.Attribut>> Item.name:String =>=>=> RelationalSchema.Column>> item.name;
ClassDiagram.Attribut>> Dress.name:String =>=>=> RelationalSchema.Column>> dress.name PRIMARY KEY;
ClassDiagram.Attribut>> Hoarder.id:Long =>=>=> RelationalSchema.Column>> hoarder.id PRIMARY KEY;
ClassDiagram.Attribut>> Hoarder.name:String =>=>=> RelationalSchema.Column>> hoarder.name;
ClassDiagram.Attribut>> Race.id:Integer =>=>=> RelationalSchema.Column>> race.id PRIMARY KEY;
ClassDiagram.Attribut>> Race.name:String =>=>=> RelationalSchema.Column>> race.name;
ClassDiagram.Attribut>> Mail.id:Long =>=>=> RelationalSchema.Column>> mail.id PRIMARY KEY;
ClassDiagram.Attribut>> Mail.from:String =>=>=> RelationalSchema.Column>> mail.from;
ClassDiagram.Attribut>> Colony.id:Long =>=>=> RelationalSchema.Column>> colony.id PRIMARY KEY;
ClassDiagram.Attribut>> Cat.lives:int =>=>=> RelationalSchema.Column>> cat.lives;
ClassDiagram.Attribut>> Empire.id:Long =>=>=> RelationalSchema.Column>> empire.id PRIMARY KEY;
ClassDiagram.Attribut>> Dog.numbones:int =>=>=> RelationalSchema.Column>> dog.numbones;
ClassDiagram.Attribut>> Wall.id:Long =>=>=> RelationalSchema.Column>> wall.id PRIMARY KEY;
ClassDiagram.Attribut>> Wall.width:long =>=>=> RelationalSchema.Column>> wall.width;
ClassDiagram.Attribut>> Wall.height:long =>=>=> RelationalSchema.Column>> wall.height;
ClassDiagram.Attribut>> Wall.color:String =>=>=> RelationalSchema.Column>> wall.color;
ClassDiagram.Attribut>> Payment.id:Long =>=>=> RelationalSchema.Column>> payment.id PRIMARY KEY;
ClassDiagram.Attribut>> Payment.amount:BigDecimal =>=>=> RelationalSchema.Column>> payment.amount;
ClassDiagram.Attribut>> Payment.GeneratedName:Date =>=>=> RelationalSchema.Column>> payment.GeneratedName;
ClassDiagram.Attribut>> Store.id:Integer =>=>=> RelationalSchema.Column>> store.id PRIMARY KEY;
ClassDiagram.Attribut>> Store.name:String =>=>=> RelationalSchema.Column>> store.name;
ClassDiagram.Attribut>> Store.address:String =>=>=> RelationalSchema.Column>> store.address;
ClassDiagram.Attribut>> AbstractCriteriaLiteralHandlingModeTest.connectionprovider:PreparedStatementSpyConnectionProvider =>=>=> RelationalSchema.Column>> abstractcriterialiteralhandlingmodetest.connectionprovider;
ClassDiagram.Attribut>> Tool.cost:Double =>=>=> RelationalSchema.Column>> tool.cost;
ClassDiagram.Attribut>> Widget.code:String =>=>=> RelationalSchema.Column>> widget.code PRIMARY KEY;
ClassDiagram.Attribut>> Widget.division:String =>=>=> RelationalSchema.Column>> widget.division PRIMARY KEY;
ClassDiagram.Attribut>> Widget.cost:Double =>=>=> RelationalSchema.Column>> widget.cost;
ClassDiagram.Attribut>> Person.id:long =>=>=> RelationalSchema.Column>> person.id PRIMARY KEY;
ClassDiagram.Attribut>> CriteriaLiteralsTest.connectionprovider:PreparedStatementSpyConnectionProvider =>=>=> RelationalSchema.Column>> criterialiteralstest.connectionprovider;
ClassDiagram.Attribut>> Subject.id:long =>=>=> RelationalSchema.Column>> subject.id PRIMARY KEY;
ClassDiagram.Attribut>> Subject.name:String =>=>=> RelationalSchema.Column>> subject.name;
ClassDiagram.Attribut>> Facility.serialversionuid:long =>=>=> RelationalSchema.Column>> facility.serialversionuid;
ClassDiagram.Attribut>> Facility.id:Long =>=>=> RelationalSchema.Column>> facility.id PRIMARY KEY;
ClassDiagram.Attribut>> Facility.name:String =>=>=> RelationalSchema.Column>> facility.name;
ClassDiagram.Attribut>> Facility.GeneratedName:Site =>=>=> RelationalSchema.Column>> facility.GeneratedName;
ClassDiagram.Attribut>> Facility.GeneratedName:Customer =>=>=> RelationalSchema.Column>> facility.GeneratedName;
ClassDiagram.Attribut>> PurchaseOrg.serialversionuid:long =>=>=> RelationalSchema.Column>> purchaseorg.serialversionuid;
ClassDiagram.Attribut>> PurchaseOrg.id:Long =>=>=> RelationalSchema.Column>> purchaseorg.id PRIMARY KEY;
ClassDiagram.Attribut>> PurchaseOrg.name:String =>=>=> RelationalSchema.Column>> purchaseorg.name;
ClassDiagram.Attribut>> PurchaseOrg.GeneratedName:Customer =>=>=> RelationalSchema.Column>> purchaseorg.GeneratedName;
ClassDiagram.Attribut>> Site.serialversionuid:long =>=>=> RelationalSchema.Column>> site.serialversionuid;
ClassDiagram.Attribut>> Site.id:Long =>=>=> RelationalSchema.Column>> site.id PRIMARY KEY;
ClassDiagram.Attribut>> Site.name:String =>=>=> RelationalSchema.Column>> site.name;
ClassDiagram.Attribut>> Site.GeneratedName:Customer =>=>=> RelationalSchema.Column>> site.GeneratedName;
ClassDiagram.Attribut>> Customer.id:Long =>=>=> RelationalSchema.Column>> customer.id PRIMARY KEY;
ClassDiagram.Attribut>> Customer.name:String =>=>=> RelationalSchema.Column>> customer.name;
ClassDiagram.Attribut>> Product.id:ProductId =>=>=> RelationalSchema.Column>> product.id PRIMARY KEY;
ClassDiagram.Attribut>> Product.number:String =>=>=> RelationalSchema.Column>> product.number;
ClassDiagram.Attribut>> Product.GeneratedName:Facility =>=>=> RelationalSchema.Column>> product.GeneratedName;
ClassDiagram.Attribut>> Order.id:OrderId =>=>=> RelationalSchema.Column>> order.id;
ClassDiagram.Attribut>> Order.GeneratedName:PurchaseOrg =>=>=> RelationalSchema.Column>> order.GeneratedName;
ClassDiagram.Attribut>> OrderLine.id:OrderLineId =>=>=> RelationalSchema.Column>> orderline.id;
ClassDiagram.Attribut>> OrderLine.GeneratedName:Product =>=>=> RelationalSchema.Column>> orderline.GeneratedName;
ClassDiagram.Attribut>> User.id:Long =>=>=> RelationalSchema.Column>> user.id PRIMARY KEY;
ClassDiagram.Attribut>> User.roles:Set<Role> =>=>=> RelationalSchema.Column>> user.roles;
ClassDiagram.Attribut>> Book.id:Integer =>=>=> RelationalSchema.Column>> book.id PRIMARY KEY;
ClassDiagram.Attribut>> Alias.id:Long =>=>=> RelationalSchema.Column>> alias.id PRIMARY KEY;
ClassDiagram.Attribut>> Alias.GeneratedName:Name =>=>=> RelationalSchema.Column>> alias.GeneratedName;
ClassDiagram.Attribut>> Alias.source:String =>=>=> RelationalSchema.Column>> alias.source;
ClassDiagram.Attribut>> EntitySuperclassComponentWithCollectionTest.GeneratedName:Projects =>=>=> RelationalSchema.Column>> entitysuperclasscomponentwithcollectiontest.GeneratedName;
ClassDiagram.Attribut>> ComponentInWhereClauseTest.GeneratedName:Projects =>=>=> RelationalSchema.Column>> componentinwhereclausetest.GeneratedName;
ClassDiagram.Attribut>> MappedSuperclassComponentWithCollectionTest.GeneratedName:Projects =>=>=> RelationalSchema.Column>> mappedsuperclasscomponentwithcollectiontest.GeneratedName;
ClassDiagram.Attribut>> Client.id:int =>=>=> RelationalSchema.Column>> client.id PRIMARY KEY;
ClassDiagram.Attribut>> Client.GeneratedName:Name =>=>=> RelationalSchema.Column>> client.GeneratedName;
ClassDiagram.Attribut>> ManyToOneType.id:Long =>=>=> RelationalSchema.Column>> manytoonetype.id PRIMARY KEY;
ClassDiagram.Attribut>> ManyToOneType.value:String =>=>=> RelationalSchema.Column>> manytoonetype.value;
ClassDiagram.Attribut>> MultiTypedBasicAttributesEntity.id:Long =>=>=> RelationalSchema.Column>> multitypedbasicattributesentity.id PRIMARY KEY;
ClassDiagram.Attribut>> MultiTypedBasicAttributesEntity.somes:byte =>=>=> RelationalSchema.Column>> multitypedbasicattributesentity.somes;
ClassDiagram.Attribut>> MultiTypedBasicAttributesEntity.somewrappeds:Byte =>=>=> RelationalSchema.Column>> multitypedbasicattributesentity.somewrappeds;
ClassDiagram.Attribut>> Animal.id:Long =>=>=> RelationalSchema.Column>> animal.id PRIMARY KEY;
ClassDiagram.Attribut>> Animal.name:String =>=>=> RelationalSchema.Column>> animal.name;
ClassDiagram.Attribut>> Animal.born:Date =>=>=> RelationalSchema.Column>> animal.born;
ClassDiagram.Attribut>> TestLazyPropertyOnPreUpdate.entity:EntityWithLazyProperty =>=>=> RelationalSchema.Column>> testlazypropertyonpreupdate.entity;
ClassDiagram.Attribut>> ExplicitlyNonCacheableEntity.id:Long =>=>=> RelationalSchema.Column>> explicitlynoncacheableentity.id PRIMARY KEY;
ClassDiagram.Attribut>> ExplicitlyNonCacheableEntity.name:String =>=>=> RelationalSchema.Column>> explicitlynoncacheableentity.name;
ClassDiagram.Attribut>> NoCacheableAnnotationEntity.id:Long =>=>=> RelationalSchema.Column>> nocacheableannotationentity.id PRIMARY KEY;
ClassDiagram.Attribut>> NoCacheableAnnotationEntity.name:String =>=>=> RelationalSchema.Column>> nocacheableannotationentity.name;
ClassDiagram.Attribut>> ExplicitlyCacheableEntity.id:Long =>=>=> RelationalSchema.Column>> explicitlycacheableentity.id PRIMARY KEY;
ClassDiagram.Attribut>> ExplicitlyCacheableEntity.name:String =>=>=> RelationalSchema.Column>> explicitlycacheableentity.name;
ClassDiagram.Attribut>> Order.id:int =>=>=> RelationalSchema.Column>> order.id PRIMARY KEY;
ClassDiagram.Attribut>> Order.total:int =>=>=> RelationalSchema.Column>> order.total;
ClassDiagram.Attribut>> SimpleEntity.id:Long =>=>=> RelationalSchema.Column>> simpleentity.id PRIMARY KEY;
ClassDiagram.Attribut>> SimpleEntity.name:String =>=>=> RelationalSchema.Column>> simpleentity.name;
ClassDiagram.Attribut>> Cat.log:Logger =>=>=> RelationalSchema.Column>> cat.log;
ClassDiagram.Attribut>> Cat.//usedforassertionsids:List =>=>=> RelationalSchema.Column>> cat.//usedforassertionsids;
ClassDiagram.Attribut>> Cat.//usedforassertionspostversion:int =>=>=> RelationalSchema.Column>> cat.//usedforassertionspostversion;
ClassDiagram.Attribut>> Cat.id:Integer =>=>=> RelationalSchema.Column>> cat.id PRIMARY KEY;
ClassDiagram.Attribut>> Cat.name:String =>=>=> RelationalSchema.Column>> cat.name;
ClassDiagram.Attribut>> Cat.ofbirth:Date =>=>=> RelationalSchema.Column>> cat.ofbirth;
ClassDiagram.Attribut>> Cat.age:int =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> Cat.length:long =>=>=> RelationalSchema.Column>> cat.length;
ClassDiagram.Attribut>> Cat.lastup:Date =>=>=> RelationalSchema.Column>> cat.lastup;
ClassDiagram.Attribut>> Cat.manualversion:int =>=>=> RelationalSchema.Column>> cat.manualversion;
ClassDiagram.Attribut>> NamedQueryTest.game_titles:String =>=>=> RelationalSchema.Column>> namedquerytest.game_titles;
ClassDiagram.Attribut>> DateTimeParameterTest.nowcal:GregorianCalendar =>=>=> RelationalSchema.Column>> datetimeparametertest.nowcal;
ClassDiagram.Attribut>> DateTimeParameterTest.now:Date =>=>=> RelationalSchema.Column>> datetimeparametertest.now;
ClassDiagram.Attribut>> NamedQueryCommentTest.connectionprovider:PreparedStatementSpyConnectionProvider =>=>=> RelationalSchema.Column>> namedquerycommenttest.connectionprovider;
ClassDiagram.Attribut>> NamedQueryCommentTest.game_titles:String =>=>=> RelationalSchema.Column>> namedquerycommenttest.game_titles;
ClassDiagram.Attribut>> Contractor.company:String =>=>=> RelationalSchema.Column>> contractor.company;
ClassDiagram.Attribut>> NativeQueryOrdinalParametersTest.game_titles:String =>=>=> RelationalSchema.Column>> nativequeryordinalparameterstest.game_titles;
ClassDiagram.Attribut>> TypedValueParametersTest.docid:int =>=>=> RelationalSchema.Column>> typedvalueparameterstest.docid;
ClassDiagram.Attribut>> Employee.id:Long =>=>=> RelationalSchema.Column>> employee.id PRIMARY KEY;
ClassDiagram.Attribut>> Employee.name:String =>=>=> RelationalSchema.Column>> employee.name;
ClassDiagram.Attribut>> Employee.salary:Double =>=>=> RelationalSchema.Column>> employee.salary;
ClassDiagram.Attribut>> ApplicationServer.id:Integer =>=>=> RelationalSchema.Column>> applicationserver.id PRIMARY KEY;
ClassDiagram.Attribut>> ApplicationServer.name:String =>=>=> RelationalSchema.Column>> applicationserver.name;
ClassDiagram.Attribut>> ApplicationServer.GeneratedName:Version =>=>=> RelationalSchema.Column>> applicationserver.GeneratedName;
ClassDiagram.Attribut>> Money.id:Integer =>=>=> RelationalSchema.Column>> money.id PRIMARY KEY;
ClassDiagram.Attribut>> ApplicationServer1.id:Integer =>=>=> RelationalSchema.Column>> applicationserver1.id PRIMARY KEY;
ClassDiagram.Attribut>> ApplicationServer1.name:String =>=>=> RelationalSchema.Column>> applicationserver1.name;
ClassDiagram.Attribut>> ApplicationServer1.version:Version1 =>=>=> RelationalSchema.Column>> applicationserver1.version;
ClassDiagram.Attribut>> Money1.id:Integer =>=>=> RelationalSchema.Column>> money1.id PRIMARY KEY;
ClassDiagram.Attribut>> Caipirinha.id:Integer =>=>=> RelationalSchema.Column>> caipirinha.id PRIMARY KEY;
ClassDiagram.Attribut>> Caipirinha.name:String =>=>=> RelationalSchema.Column>> caipirinha.name;
ClassDiagram.Attribut>> Money.id:Integer =>=>=> RelationalSchema.Column>> money.id PRIMARY KEY;
ClassDiagram.Attribut>> ApplicationServer.id:Integer =>=>=> RelationalSchema.Column>> applicationserver.id PRIMARY KEY;
ClassDiagram.Attribut>> ApplicationServer.name:String =>=>=> RelationalSchema.Column>> applicationserver.name;
ClassDiagram.Attribut>> ApplicationServer.GeneratedName:Version =>=>=> RelationalSchema.Column>> applicationserver.GeneratedName;
ClassDiagram.Attribut>> Scooter.model:String =>=>=> RelationalSchema.Column>> scooter.model PRIMARY KEY;
ClassDiagram.Attribut>> Scooter.speed:Long =>=>=> RelationalSchema.Column>> scooter.speed;
ClassDiagram.Attribut>> Bug.id:Long =>=>=> RelationalSchema.Column>> bug.id PRIMARY KEY;
ClassDiagram.Attribut>> Bug.subject:String =>=>=> RelationalSchema.Column>> bug.subject;
ClassDiagram.Attribut>> Bug.comment:String =>=>=> RelationalSchema.Column>> bug.comment;
ClassDiagram.Attribut>> Bug.id:Long =>=>=> RelationalSchema.Column>> bug.id PRIMARY KEY;
ClassDiagram.Attribut>> Bug.subject:String =>=>=> RelationalSchema.Column>> bug.subject;
ClassDiagram.Attribut>> Bug.comment:String =>=>=> RelationalSchema.Column>> bug.comment;
ClassDiagram.Attribut>> Carpet.id:Integer =>=>=> RelationalSchema.Column>> carpet.id PRIMARY KEY;
ClassDiagram.Attribut>> Carpet.country:String =>=>=> RelationalSchema.Column>> carpet.country;
ClassDiagram.Attribut>> Morito.id:Integer =>=>=> RelationalSchema.Column>> morito.id PRIMARY KEY;
ClassDiagram.Attribut>> Morito.power:String =>=>=> RelationalSchema.Column>> morito.power;
ClassDiagram.Attribut>> Phone.id:Integer =>=>=> RelationalSchema.Column>> phone.id PRIMARY KEY;
ClassDiagram.Attribut>> Phone.brandname:String =>=>=> RelationalSchema.Column>> phone.brandname;
ClassDiagram.Attribut>> Phone.price:float =>=>=> RelationalSchema.Column>> phone.price;
ClassDiagram.Attribut>> QueryTest.salary:float =>=>=> RelationalSchema.Column>> querytest.salary;
ClassDiagram.Attribut>> Fruit.id:Long =>=>=> RelationalSchema.Column>> fruit.id PRIMARY KEY;
ClassDiagram.Attribut>> Strawberry.size:Long =>=>=> RelationalSchema.Column>> strawberry.size;
ClassDiagram.Attribut>> Book.id:Integer =>=>=> RelationalSchema.Column>> book.id PRIMARY KEY;
ClassDiagram.Attribut>> Book.name:String =>=>=> RelationalSchema.Column>> book.name;
ClassDiagram.Attribut>> Book.version:Integer =>=>=> RelationalSchema.Column>> book.version;
ClassDiagram.Attribut>> Bell.id:Integer =>=>=> RelationalSchema.Column>> bell.id PRIMARY KEY;
ClassDiagram.Attribut>> Cable.id:Integer =>=>=> RelationalSchema.Column>> cable.id PRIMARY KEY;
ClassDiagram.Attribut>> Cable.name:String =>=>=> RelationalSchema.Column>> cable.name;
ClassDiagram.Attribut>> Child.id:Integer =>=>=> RelationalSchema.Column>> child.id PRIMARY KEY;
ClassDiagram.Attribut>> Parent.id:Integer =>=>=> RelationalSchema.Column>> parent.id PRIMARY KEY;
ClassDiagram.Attribut>> Parent.nrofchildren:int =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> EntityWithCompositeId.id:CompositeId =>=>=> RelationalSchema.Column>> entitywithcompositeid.id;
ClassDiagram.Attribut>> EntityWithCompositeId.description:String =>=>=> RelationalSchema.Column>> entitywithcompositeid.description;
ClassDiagram.Attribut>> UnversionedLock.id:Integer =>=>=> RelationalSchema.Column>> unversionedlock.id PRIMARY KEY;
ClassDiagram.Attribut>> UnversionedLock.name:String =>=>=> RelationalSchema.Column>> unversionedlock.name;
ClassDiagram.Attribut>> Person.id:Long =>=>=> RelationalSchema.Column>> person.id PRIMARY KEY;
ClassDiagram.Attribut>> Lockable.id:Integer =>=>=> RelationalSchema.Column>> lockable.id PRIMARY KEY;
ClassDiagram.Attribut>> Lockable.version:Integer =>=>=> RelationalSchema.Column>> lockable.version;
ClassDiagram.Attribut>> Lockable.name:String =>=>=> RelationalSchema.Column>> lockable.name;
ClassDiagram.Attribut>> Lock.id:Integer =>=>=> RelationalSchema.Column>> lock.id PRIMARY KEY;
ClassDiagram.Attribut>> Lock.version:Integer =>=>=> RelationalSchema.Column>> lock.version;
ClassDiagram.Attribut>> Lock.name:String =>=>=> RelationalSchema.Column>> lock.name;
ClassDiagram.Attribut>> Article.id:Integer =>=>=> RelationalSchema.Column>> article.id PRIMARY KEY;
ClassDiagram.Attribut>> Article.name:String =>=>=> RelationalSchema.Column>> article.name;
ClassDiagram.Attribut>> Article.next:Article =>=>=> RelationalSchema.Column>> article.next;
ClassDiagram.Attribut>> Employee.id:Long =>=>=> RelationalSchema.Column>> employee.id PRIMARY KEY;
ClassDiagram.Attribut>> Employee.name:String =>=>=> RelationalSchema.Column>> employee.name;
ClassDiagram.Attribut>> Employee./*@embedded@attributeoverrides({@attributeoverride(name:Address =>=>=> RelationalSchema.Column>> employee./*@embedded@attributeoverrides({@attributeoverride(name;
ClassDiagram.Attribut>> Employee./*@embedded@attributeoverrides({@attributeoverride(name:Address =>=>=> RelationalSchema.Column>> employee./*@embedded@attributeoverrides({@attributeoverride(name;
ClassDiagram.Attribut>> Employee.id:Long =>=>=> RelationalSchema.Column>> employee.id PRIMARY KEY;
ClassDiagram.Attribut>> Employee.name:String =>=>=> RelationalSchema.Column>> employee.name;
ClassDiagram.Attribut>> Employee./*@embedded@attributeoverrides({@attributeoverride(name:Address =>=>=> RelationalSchema.Column>> employee./*@embedded@attributeoverrides({@attributeoverride(name;
ClassDiagram.Attribut>> Employee./*@embedded@attributeoverrides({@attributeoverride(name:Address =>=>=> RelationalSchema.Column>> employee./*@embedded@attributeoverrides({@attributeoverride(name;
ClassDiagram.Attribut>> Article.id:Integer =>=>=> RelationalSchema.Column>> article.id PRIMARY KEY;
ClassDiagram.Attribut>> Article.name:String =>=>=> RelationalSchema.Column>> article.name;
ClassDiagram.Attribut>> Article.next:Article =>=>=> RelationalSchema.Column>> article.next;
ClassDiagram.Attribut>> Employee.id:long =>=>=> RelationalSchema.Column>> employee.id PRIMARY KEY;
ClassDiagram.Attribut>> Course.id:int =>=>=> RelationalSchema.Column>> course.id PRIMARY KEY;
ClassDiagram.Attribut>> Course.name:String =>=>=> RelationalSchema.Column>> course.name;
ClassDiagram.Attribut>> Student.id:int =>=>=> RelationalSchema.Column>> student.id PRIMARY KEY;
ClassDiagram.Attribut>> Student.name:String =>=>=> RelationalSchema.Column>> student.name;
ClassDiagram.Attribut>> Employee.id:Long =>=>=> RelationalSchema.Column>> employee.id PRIMARY KEY;
ClassDiagram.Attribut>> Employee.name:String =>=>=> RelationalSchema.Column>> employee.name;
ClassDiagram.Attribut>> Employee.salary:double =>=>=> RelationalSchema.Column>> employee.salary;
ClassDiagram.Attribut>> Person.id:Long =>=>=> RelationalSchema.Column>> person.id PRIMARY KEY;
ClassDiagram.Attribut>> Person.id:Long =>=>=> RelationalSchema.Column>> person.id PRIMARY KEY;
ClassDiagram.Attribut>> Foo2.id:long =>=>=> RelationalSchema.Column>> foo2.id PRIMARY KEY;
ClassDiagram.Attribut>> Bar.id:long =>=>=> RelationalSchema.Column>> bar.id PRIMARY KEY;
ClassDiagram.Attribut>> Company.id:long =>=>=> RelationalSchema.Column>> company.id PRIMARY KEY;
ClassDiagram.Attribut>> Company.markets:Set<Market> =>=>=> RelationalSchema.Column>> company.markets;
ClassDiagram.Attribut>> Company.phonenumbers:Set<String> =>=>=> RelationalSchema.Column>> company.phonenumbers;
ClassDiagram.Attribut>> Location.id:long =>=>=> RelationalSchema.Column>> location.id PRIMARY KEY;
ClassDiagram.Attribut>> Location.address:String =>=>=> RelationalSchema.Column>> location.address;
ClassDiagram.Attribut>> Location.zip:int =>=>=> RelationalSchema.Column>> location.zip;
ClassDiagram.Attribut>> EntityGraphWithFetchAnnotationTest.connectionprovider:PreparedStatementSpyConnectionProvider =>=>=> RelationalSchema.Column>> entitygraphwithfetchannotationtest.connectionprovider;
ClassDiagram.Attribut>> Sickness.begintime:Date =>=>=> RelationalSchema.Column>> sickness.begintime;
ClassDiagram.Attribut>> Sickness.type:String =>=>=> RelationalSchema.Column>> sickness.type PRIMARY KEY;
ClassDiagram.Attribut>> Sickness.classification:String =>=>=> RelationalSchema.Column>> sickness.classification PRIMARY KEY;
ClassDiagram.Attribut>> Umbrella.id:PK =>=>=> RelationalSchema.Column>> umbrella.id;
ClassDiagram.Attribut>> Umbrella.size:int =>=>=> RelationalSchema.Column>> umbrella.size;
ClassDiagram.Attribut>> Author.id:Integer =>=>=> RelationalSchema.Column>> author.id PRIMARY KEY;
ClassDiagram.Attribut>> Article.id:Integer =>=>=> RelationalSchema.Column>> article.id PRIMARY KEY;
ClassDiagram.Attribut>> Book.id:Long =>=>=> RelationalSchema.Column>> book.id PRIMARY KEY;
ClassDiagram.Attribut>> Book.name:String =>=>=> RelationalSchema.Column>> book.name;
ClassDiagram.Attribut>> IrrelevantEntity.id:Integer =>=>=> RelationalSchema.Column>> irrelevantentity.id PRIMARY KEY;
ClassDiagram.Attribut>> IrrelevantEntity.name:String =>=>=> RelationalSchema.Column>> irrelevantentity.name;
ClassDiagram.Attribut>> MergeContextTest.session:EventSource =>=>=> RelationalSchema.Column>> mergecontexttest.session;
ClassDiagram.Attribut>> User.id:Integer =>=>=> RelationalSchema.Column>> user.id PRIMARY KEY;
ClassDiagram.Attribut>> Department.id:Integer =>=>=> RelationalSchema.Column>> department.id PRIMARY KEY;
ClassDiagram.Attribut>> ConstraintTest.max_name_length:int =>=>=> RelationalSchema.Column>> constrainttest.max_name_length;
ClassDiagram.Attribut>> ConstraintTest.explicit_fk_name_native:String =>=>=> RelationalSchema.Column>> constrainttest.explicit_fk_name_native;
ClassDiagram.Attribut>> ConstraintTest.explicit_fk_name_jpa:String =>=>=> RelationalSchema.Column>> constrainttest.explicit_fk_name_jpa;
ClassDiagram.Attribut>> ConstraintTest.explicit_uk_name:String =>=>=> RelationalSchema.Column>> constrainttest.explicit_uk_name;
ClassDiagram.Attribut>> Thing.id:Long =>=>=> RelationalSchema.Column>> thing.id PRIMARY KEY;
ClassDiagram.Attribut>> Thing.name:String =>=>=> RelationalSchema.Column>> thing.name;
ClassDiagram.Attribut>> Thing.mutableproperty:Date =>=>=> RelationalSchema.Column>> thing.mutableproperty;
ClassDiagram.Attribut>> Thing.changedvalues:Map<String,Object> =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> Item.id:Long =>=>=> RelationalSchema.Column>> item.id PRIMARY KEY;
ClassDiagram.Attribut>> Item.price:BigDecimal =>=>=> RelationalSchema.Column>> item.price;
ClassDiagram.Attribut>> Item.description:String =>=>=> RelationalSchema.Column>> item.description;
ClassDiagram.Attribut>> Item.quantity:Integer =>=>=> RelationalSchema.Column>> item.quantity;
ClassDiagram.Attribut>> DestinationEntity.id:Integer =>=>=> RelationalSchema.Column>> destinationentity.id PRIMARY KEY;
ClassDiagram.Attribut>> DestinationEntity.fullnamefrom:String =>=>=> RelationalSchema.Column>> destinationentity.fullnamefrom;
ClassDiagram.Attribut>> FromEntity.id:Integer =>=>=> RelationalSchema.Column>> fromentity.id PRIMARY KEY;
ClassDiagram.Attribut>> FromEntity.name:String =>=>=> RelationalSchema.Column>> fromentity.name;
ClassDiagram.Attribut>> FromEntity.lastname:String =>=>=> RelationalSchema.Column>> fromentity.lastname;
ClassDiagram.Attribut>> Group.id:Integer =>=>=> RelationalSchema.Column>> group.id PRIMARY KEY;
ClassDiagram.Attribut>> Group.name:String =>=>=> RelationalSchema.Column>> group.name;
ClassDiagram.Attribut>> ClassWithIdentityColumn.id:long =>=>=> RelationalSchema.Column>> classwithidentitycolumn.id PRIMARY KEY;
ClassDiagram.Attribut>> ClassWithIdentityColumn.name:String =>=>=> RelationalSchema.Column>> classwithidentitycolumn.name;
ClassDiagram.Attribut>> CriteriaQueryWithAppliedFilterTest.student_id:Identifier =>=>=> RelationalSchema.Column>> criteriaquerywithappliedfiltertest.student_id;
ClassDiagram.Attribut>> SelectDistinctHqlTest.GeneratedName:SQLStatementInterceptor =>=>=> RelationalSchema.Column>> selectdistincthqltest.GeneratedName;
ClassDiagram.Attribut>> TupleSupportTest.GeneratedName:SessionFactory =>=>=> RelationalSchema.Column>> tuplesupporttest.GeneratedName;
ClassDiagram.Attribut>> Entity1.id:long =>=>=> RelationalSchema.Column>> entity1.id PRIMARY KEY;
ClassDiagram.Attribut>> Entity1.value:String =>=>=> RelationalSchema.Column>> entity1.value;
ClassDiagram.Attribut>> Parent.id:long =>=>=> RelationalSchema.Column>> parent.id PRIMARY KEY;
ClassDiagram.Attribut>> Parent.value:String =>=>=> RelationalSchema.Column>> parent.value;
ClassDiagram.Attribut>> GrandChild.id:long =>=>=> RelationalSchema.Column>> grandchild.id PRIMARY KEY;
ClassDiagram.Attribut>> GrandChild.value:String =>=>=> RelationalSchema.Column>> grandchild.value;
ClassDiagram.Attribut>> Entity3.id:long =>=>=> RelationalSchema.Column>> entity3.id PRIMARY KEY;
ClassDiagram.Attribut>> Entity3.value:String =>=>=> RelationalSchema.Column>> entity3.value;
ClassDiagram.Attribut>> Entity2.id:long =>=>=> RelationalSchema.Column>> entity2.id PRIMARY KEY;
ClassDiagram.Attribut>> Entity2.value:String =>=>=> RelationalSchema.Column>> entity2.value;
ClassDiagram.Attribut>> Child.id:long =>=>=> RelationalSchema.Column>> child.id PRIMARY KEY;
ClassDiagram.Attribut>> Child.value:String =>=>=> RelationalSchema.Column>> child.value;
ClassDiagram.Attribut>> CoalesceTest.GeneratedName:Person =>=>=> RelationalSchema.Column>> coalescetest.GeneratedName;
ClassDiagram.Attribut>> TrtPanel.id:Long =>=>=> RelationalSchema.Column>> trtpanel.id PRIMARY KEY;
ClassDiagram.Attribut>> TrtPanel.clientid:Long =>=>=> RelationalSchema.Column>> trtpanel.clientid;
ClassDiagram.Attribut>> TrtPanel.deltastamp:String =>=>=> RelationalSchema.Column>> trtpanel.deltastamp;
ClassDiagram.Attribut>> CollectionMapWithComponentValueTest.GeneratedName:KeyValue =>=>=> RelationalSchema.Column>> collectionmapwithcomponentvaluetest.GeneratedName;
ClassDiagram.Attribut>> CollectionMapWithComponentValueTest.GeneratedName:EmbeddableValue =>=>=> RelationalSchema.Column>> collectionmapwithcomponentvaluetest.GeneratedName;
ClassDiagram.Attribut>> Farm.id:long =>=>=> RelationalSchema.Column>> farm.id PRIMARY KEY;
ClassDiagram.Attribut>> Farm.name:String =>=>=> RelationalSchema.Column>> farm.name;
ClassDiagram.Attribut>> Farm.accreditations:Set<Accreditation> =>=>=> RelationalSchema.Column>> farm.accreditations;
ClassDiagram.Attribut>> Title.id:Integer =>=>=> RelationalSchema.Column>> title.id PRIMARY KEY;
ClassDiagram.Attribut>> Title.description:String =>=>=> RelationalSchema.Column>> title.description;
ClassDiagram.Attribut>> Person.id:Integer =>=>=> RelationalSchema.Column>> person.id PRIMARY KEY;
ClassDiagram.Attribut>> Person.name:String =>=>=> RelationalSchema.Column>> person.name;
ClassDiagram.Attribut>> Employee.employeenumber:String =>=>=> RelationalSchema.Column>> employee.employeenumber;
ClassDiagram.Attribut>> DB297SubStringFunctionsTest.GeneratedName:MostRecentStatementInspector =>=>=> RelationalSchema.Column>> db297substringfunctionstest.GeneratedName;
ClassDiagram.Attribut>> Panel.id:Long =>=>=> RelationalSchema.Column>> panel.id PRIMARY KEY;
ClassDiagram.Attribut>> Panel.clientid:Long =>=>=> RelationalSchema.Column>> panel.clientid;
ClassDiagram.Attribut>> Panel.deltastamp:String =>=>=> RelationalSchema.Column>> panel.deltastamp;
ClassDiagram.Attribut>> Crop.id:long =>=>=> RelationalSchema.Column>> crop.id PRIMARY KEY;
ClassDiagram.Attribut>> Crop.name:String =>=>=> RelationalSchema.Column>> crop.name;
ClassDiagram.Attribut>> MapFunctionExpressionsTest.querytranslatorfactory:ASTQueryTranslatorFactory =>=>=> RelationalSchema.Column>> mapfunctionexpressionstest.querytranslatorfactory;
ClassDiagram.Attribut>> Employee.id:Integer =>=>=> RelationalSchema.Column>> employee.id PRIMARY KEY;
ClassDiagram.Attribut>> Employee.firstname:String =>=>=> RelationalSchema.Column>> employee.firstname;
ClassDiagram.Attribut>> Employee.lastname:String =>=>=> RelationalSchema.Column>> employee.lastname;
ClassDiagram.Attribut>> Department.deptno:Integer =>=>=> RelationalSchema.Column>> department.deptno PRIMARY KEY;
ClassDiagram.Attribut>> Department.deptname:String =>=>=> RelationalSchema.Column>> department.deptname;
ClassDiagram.Attribut>> Container.id:Integer =>=>=> RelationalSchema.Column>> container.id PRIMARY KEY;
ClassDiagram.Attribut>> Container.items:List<Item> =>=>=> RelationalSchema.Column>> container.items;
ClassDiagram.Attribut>> Language.id:Long =>=>=> RelationalSchema.Column>> language.id PRIMARY KEY;
ClassDiagram.Attribut>> Language.//@column(unique:String =>=>=> RelationalSchema.Column>> language.//@column(unique;
ClassDiagram.Attribut>> Category.id:Long =>=>=> RelationalSchema.Column>> category.id PRIMARY KEY;
ClassDiagram.Attribut>> Workflow.serialversionuid:long =>=>=> RelationalSchema.Column>> workflow.serialversionuid;
ClassDiagram.Attribut>> Workflow.id:Long =>=>=> RelationalSchema.Column>> workflow.id PRIMARY KEY;
ClassDiagram.Attribut>> Workflow.defaultlanguage:Locale =>=>=> RelationalSchema.Column>> workflow.defaultlanguage;
ClassDiagram.Attribut>> Workflow.supportedlocales:Set<Locale> =>=>=> RelationalSchema.Column>> workflow.supportedlocales;
ClassDiagram.Attribut>> Workflow.localized:Map<Locale,LocalizedEmbeddable> =>=>=> RelationalSchema.Column>> workflow.localized;
ClassDiagram.Attribut>> Item.id:Long =>=>=> RelationalSchema.Column>> item.id PRIMARY KEY;
ClassDiagram.Attribut>> Item.price:Double =>=>=> RelationalSchema.Column>> item.price;
ClassDiagram.Attribut>> Item.specialprice:Double =>=>=> RelationalSchema.Column>> item.specialprice;
ClassDiagram.Attribut>> DynamicEntity.id:Integer =>=>=> RelationalSchema.Column>> dynamicentity.id PRIMARY KEY;
ClassDiagram.Attribut>> Customer.id:Integer =>=>=> RelationalSchema.Column>> customer.id PRIMARY KEY;
ClassDiagram.Attribut>> Customer.version:Integer =>=>=> RelationalSchema.Column>> customer.version;
ClassDiagram.Attribut>> Customer.name:String =>=>=> RelationalSchema.Column>> customer.name;
ClassDiagram.Attribut>> Customer.registeredtrademarks:Set<String> =>=>=> RelationalSchema.Column>> customer.registeredtrademarks;
ClassDiagram.Attribut>> Customer.hq:Address =>=>=> RelationalSchema.Column>> customer.hq;
ClassDiagram.Attribut>> Customer.addresses:Set<Address> =>=>=> RelationalSchema.Column>> customer.addresses;
ClassDiagram.Attribut>> ZipCode.id:Integer =>=>=> RelationalSchema.Column>> zipcode.id PRIMARY KEY;
ClassDiagram.Attribut>> ZipCode.code:String =>=>=> RelationalSchema.Column>> zipcode.code;
ClassDiagram.Attribut>> ZipCode.city:String =>=>=> RelationalSchema.Column>> zipcode.city;
ClassDiagram.Attribut>> ZipCode.GeneratedName:State =>=>=> RelationalSchema.Column>> zipcode.GeneratedName;
ClassDiagram.Attribut>> Order.id:Integer =>=>=> RelationalSchema.Column>> order.id PRIMARY KEY;
ClassDiagram.Attribut>> Order.referencecode:String =>=>=> RelationalSchema.Column>> order.referencecode;
ClassDiagram.Attribut>> Order.placed:Date =>=>=> RelationalSchema.Column>> order.placed;
ClassDiagram.Attribut>> Order.fulfilled:Date =>=>=> RelationalSchema.Column>> order.fulfilled;
ClassDiagram.Attribut>> Order.GeneratedName:Customer =>=>=> RelationalSchema.Column>> order.GeneratedName;
ClassDiagram.Attribut>> Industry.id:Integer =>=>=> RelationalSchema.Column>> industry.id PRIMARY KEY;
ClassDiagram.Attribut>> Industry.name:String =>=>=> RelationalSchema.Column>> industry.name;
ClassDiagram.Attribut>> IAmAFoo.id:long =>=>=> RelationalSchema.Column>> iamafoo.id PRIMARY KEY;
ClassDiagram.Attribut>> IAmAFoo.foo:String =>=>=> RelationalSchema.Column>> iamafoo.foo;
ClassDiagram.Attribut>> BatchOptimisticLockingTest.GeneratedName:ExecutorService =>=>=> RelationalSchema.Column>> batchoptimisticlockingtest.GeneratedName;
ClassDiagram.Attribut>> Animal.id:Long =>=>=> RelationalSchema.Column>> animal.id PRIMARY KEY;
ClassDiagram.Attribut>> Animal.weight:long =>=>=> RelationalSchema.Column>> animal.weight;
ClassDiagram.Attribut>> Zoo.id:Long =>=>=> RelationalSchema.Column>> zoo.id PRIMARY KEY;
ClassDiagram.Attribut>> Zoo.name:String =>=>=> RelationalSchema.Column>> zoo.name;
ClassDiagram.Attribut>> Zoo.city:String =>=>=> RelationalSchema.Column>> zoo.city;
ClassDiagram.Attribut>> Zoo.animals:Set<Animal> =>=>=> RelationalSchema.Column>> zoo.animals;
ClassDiagram.Attribut>> Tiger.numberofstripes:int =>=>=> RelationalSchema.Column>> tiger.numberofstripes;
ClassDiagram.Attribut>> MultipleSessionCollectionWarningTest.log:CoreMessageLogger =>=>=> RelationalSchema.Column>> multiplesessioncollectionwarningtest.log;
ClassDiagram.Attribut>> MultipleSessionCollectionWarningTest.loginspection:LoggerInspectionRule =>=>=> RelationalSchema.Column>> multiplesessioncollectionwarningtest.loginspection;
ClassDiagram.Attribut>> Contact.serialversionuid:long =>=>=> RelationalSchema.Column>> contact.serialversionuid;
ClassDiagram.Attribut>> Contact.id:Long =>=>=> RelationalSchema.Column>> contact.id PRIMARY KEY;
ClassDiagram.Attribut>> Contact.name:String =>=>=> RelationalSchema.Column>> contact.name;
ClassDiagram.Attribut>> Contact.emailaddresses:Set<EmailAddress> =>=>=> RelationalSchema.Column>> contact.emailaddresses;
ClassDiagram.Attribut>> Contact.emailaddresses2:Set<EmailAddress> =>=>=> RelationalSchema.Column>> contact.emailaddresses2;
ClassDiagram.Attribut>> User.serialversionuid:long =>=>=> RelationalSchema.Column>> user.serialversionuid;
ClassDiagram.Attribut>> User.id:Long =>=>=> RelationalSchema.Column>> user.id PRIMARY KEY;
ClassDiagram.Attribut>> User.name:String =>=>=> RelationalSchema.Column>> user.name;
ClassDiagram.Attribut>> User.GeneratedName:Contact =>=>=> RelationalSchema.Column>> user.GeneratedName;
ClassDiagram.Attribut>> User.username:String =>=>=> RelationalSchema.Column>> user.username PRIMARY KEY;
ClassDiagram.Attribut>> User.sessiondata:Map =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> Email.id:Long =>=>=> RelationalSchema.Column>> email.id PRIMARY KEY;
ClassDiagram.Attribut>> Email.address:String =>=>=> RelationalSchema.Column>> email.address;
ClassDiagram.Attribut>> Many.id:long =>=>=> RelationalSchema.Column>> many.id PRIMARY KEY;
ClassDiagram.Attribut>> VersionedCascadeOne.id:long =>=>=> RelationalSchema.Column>> versionedcascadeone.id PRIMARY KEY;
ClassDiagram.Attribut>> VersionedCascadeOne.version:long =>=>=> RelationalSchema.Column>> versionedcascadeone.version;
ClassDiagram.Attribut>> UnversionedNoCascadeOne.id:long =>=>=> RelationalSchema.Column>> unversionednocascadeone.id PRIMARY KEY;
ClassDiagram.Attribut>> VersionedNoCascadeOne.id:long =>=>=> RelationalSchema.Column>> versionednocascadeone.id PRIMARY KEY;
ClassDiagram.Attribut>> VersionedNoCascadeOne.version:long =>=>=> RelationalSchema.Column>> versionednocascadeone.version;
ClassDiagram.Attribut>> UnversionedCascadeOne.id:long =>=>=> RelationalSchema.Column>> unversionedcascadeone.id PRIMARY KEY;
ClassDiagram.Attribut>> MultilingualStringParent.id:long =>=>=> RelationalSchema.Column>> multilingualstringparent.id PRIMARY KEY;
ClassDiagram.Attribut>> MapKey.log:Logger =>=>=> RelationalSchema.Column>> mapkey.log;
ClassDiagram.Attribut>> MapKey.id:Long =>=>=> RelationalSchema.Column>> mapkey.id PRIMARY KEY;
ClassDiagram.Attribut>> MapKey.name:String =>=>=> RelationalSchema.Column>> mapkey.name;
ClassDiagram.Attribut>> MapKey.previoushashcode:int =>=>=> RelationalSchema.Column>> mapkey.previoushashcode;
ClassDiagram.Attribut>> MapValue.log:Logger =>=>=> RelationalSchema.Column>> mapvalue.log;
ClassDiagram.Attribut>> MapValue.id:Long =>=>=> RelationalSchema.Column>> mapvalue.id PRIMARY KEY;
ClassDiagram.Attribut>> MapValue.name:String =>=>=> RelationalSchema.Column>> mapvalue.name;
ClassDiagram.Attribut>> MapValue.previoushashcode:int =>=>=> RelationalSchema.Column>> mapvalue.previoushashcode;
ClassDiagram.Attribut>> MapHolder.id:Long =>=>=> RelationalSchema.Column>> mapholder.id PRIMARY KEY;
ClassDiagram.Attribut>> MultilingualString.id:long =>=>=> RelationalSchema.Column>> multilingualstring.id PRIMARY KEY;
ClassDiagram.Attribut>> MultilingualString.map:Map<String,LocalizedString> =>=>=> RelationalSchema.Column>> multilingualstring.map;
ClassDiagram.Attribut>> SetDelayedOperationTest.parentid:Long =>=>=> RelationalSchema.Column>> setdelayedoperationtest.parentid;
ClassDiagram.Attribut>> SetDelayedOperationTest.childid1:Long =>=>=> RelationalSchema.Column>> setdelayedoperationtest.childid1;
ClassDiagram.Attribut>> SetDelayedOperationTest.childid2:Long =>=>=> RelationalSchema.Column>> setdelayedoperationtest.childid2;
ClassDiagram.Attribut>> BagDelayedOperationTest.parentid:Long =>=>=> RelationalSchema.Column>> bagdelayedoperationtest.parentid;
ClassDiagram.Attribut>> ListDelayedOperationTest.parentid:Long =>=>=> RelationalSchema.Column>> listdelayedoperationtest.parentid;
ClassDiagram.Attribut>> ListDelayedOperationTest.childid1:Long =>=>=> RelationalSchema.Column>> listdelayedoperationtest.childid1;
ClassDiagram.Attribut>> ListDelayedOperationTest.childid2:Long =>=>=> RelationalSchema.Column>> listdelayedoperationtest.childid2;
ClassDiagram.Attribut>> IndividuallySchemaValidatorImplTest.loginspection:LoggerInspectionRule =>=>=> RelationalSchema.Column>> individuallyschemavalidatorimpltest.loginspection;
ClassDiagram.Attribut>> IndividuallySchemaValidatorImplTest.ssr:StandardServiceRegistry =>=>=> RelationalSchema.Column>> individuallyschemavalidatorimpltest.ssr;
ClassDiagram.Attribut>> IndividuallySchemaValidatorImplTest.tool:HibernateSchemaManagementTool =>=>=> RelationalSchema.Column>> individuallyschemavalidatorimpltest.tool;
ClassDiagram.Attribut>> IndividuallySchemaValidatorImplTest.configurationvalues:Map =>=>=> RelationalSchema.Column>> individuallyschemavalidatorimpltest.configurationvalues;
ClassDiagram.Attribut>> IndividuallySchemaValidatorImplTest.GeneratedName:ExecutionOptions =>=>=> RelationalSchema.Column>> individuallyschemavalidatorimpltest.GeneratedName;
ClassDiagram.Attribut>> IndividuallySchemaValidatorImplConnectionTest.loginspection:LoggerInspectionRule =>=>=> RelationalSchema.Column>> individuallyschemavalidatorimplconnectiontest.loginspection;
ClassDiagram.Attribut>> IndividuallySchemaValidatorImplConnectionTest.ssr:StandardServiceRegistry =>=>=> RelationalSchema.Column>> individuallyschemavalidatorimplconnectiontest.ssr;
ClassDiagram.Attribut>> IndividuallySchemaValidatorImplConnectionTest.tool:HibernateSchemaManagementTool =>=>=> RelationalSchema.Column>> individuallyschemavalidatorimplconnectiontest.tool;
ClassDiagram.Attribut>> IndividuallySchemaValidatorImplConnectionTest.configurationvalues:Map =>=>=> RelationalSchema.Column>> individuallyschemavalidatorimplconnectiontest.configurationvalues;
ClassDiagram.Attribut>> IndividuallySchemaValidatorImplConnectionTest.GeneratedName:ExecutionOptions =>=>=> RelationalSchema.Column>> individuallyschemavalidatorimplconnectiontest.GeneratedName;
ClassDiagram.Attribut>> IndividuallySchemaValidatorImplConnectionTest.connectionprovider:DriverManagerConnectionProviderImpl =>=>=> RelationalSchema.Column>> individuallyschemavalidatorimplconnectiontest.connectionprovider;
ClassDiagram.Attribut>> IndividuallySchemaValidatorImplConnectionTest.GeneratedName:Connection =>=>=> RelationalSchema.Column>> individuallyschemavalidatorimplconnectiontest.GeneratedName;
ClassDiagram.Attribut>> Parent.id:Long =>=>=> RelationalSchema.Column>> parent.id PRIMARY KEY;
ClassDiagram.Attribut>> Child.GeneratedName:Parent =>=>=> RelationalSchema.Column>> child.GeneratedName PRIMARY KEY;
ClassDiagram.Attribut>> OtherEntity.id:String =>=>=> RelationalSchema.Column>> otherentity.id PRIMARY KEY;
ClassDiagram.Attribut>> Message.description:String =>=>=> RelationalSchema.Column>> message.description;
ClassDiagram.Attribut>> Event.description:String =>=>=> RelationalSchema.Column>> event.description;
ClassDiagram.Attribut>> ABlockableEntity.id:Long =>=>=> RelationalSchema.Column>> ablockableentity.id PRIMARY KEY;
ClassDiagram.Attribut>> Parent.id:Long =>=>=> RelationalSchema.Column>> parent.id PRIMARY KEY;
ClassDiagram.Attribut>> LazyLoadingTest.children_size:int =>=>=> RelationalSchema.Column>> lazyloadingtest.children_size;
ClassDiagram.Attribut>> LazyLoadingTest.parentid:Long =>=>=> RelationalSchema.Column>> lazyloadingtest.parentid;
ClassDiagram.Attribut>> LazyLoadingTest.lastchildid:Long =>=>=> RelationalSchema.Column>> lazyloadingtest.lastchildid;
ClassDiagram.Attribut>> Child.id:Long =>=>=> RelationalSchema.Column>> child.id PRIMARY KEY;
ClassDiagram.Attribut>> Child.GeneratedName:Parent =>=>=> RelationalSchema.Column>> child.GeneratedName;
ClassDiagram.Attribut>> TestEntity.id:long =>=>=> RelationalSchema.Column>> testentity.id PRIMARY KEY;
ClassDiagram.Attribut>> SequenceFilterTest.serviceregistry:StandardServiceRegistryImpl =>=>=> RelationalSchema.Column>> sequencefiltertest.serviceregistry;
ClassDiagram.Attribut>> SequenceFilterTest.GeneratedName:Metadata =>=>=> RelationalSchema.Column>> sequencefiltertest.GeneratedName;
ClassDiagram.Attribut>> CatalogFilterTest.GeneratedName:ServiceRegistry =>=>=> RelationalSchema.Column>> catalogfiltertest.GeneratedName;
ClassDiagram.Attribut>> CatalogFilterTest.GeneratedName:Metadata =>=>=> RelationalSchema.Column>> catalogfiltertest.GeneratedName;
ClassDiagram.Attribut>> SchemaFilterTest.serviceregistry:StandardServiceRegistryImpl =>=>=> RelationalSchema.Column>> schemafiltertest.serviceregistry;
ClassDiagram.Attribut>> SchemaFilterTest.GeneratedName:Metadata =>=>=> RelationalSchema.Column>> schemafiltertest.GeneratedName;
ClassDiagram.Attribut>> BImpl.serialversionuid:long =>=>=> RelationalSchema.Column>> bimpl.serialversionuid;
ClassDiagram.Attribut>> BImpl.bid:Integer =>=>=> RelationalSchema.Column>> bimpl.bid;
ClassDiagram.Attribut>> PrimeMinister.id:Integer =>=>=> RelationalSchema.Column>> primeminister.id PRIMARY KEY;
ClassDiagram.Attribut>> PrimeMinister.name:String =>=>=> RelationalSchema.Column>> primeminister.name;
ClassDiagram.Attribut>> PrimeMinister.current:Government =>=>=> RelationalSchema.Column>> primeminister.current;
ClassDiagram.Attribut>> ZImpl.serialversionuid:long =>=>=> RelationalSchema.Column>> zimpl.serialversionuid;
ClassDiagram.Attribut>> ZImpl.zid:Integer =>=>=> RelationalSchema.Column>> zimpl.zid PRIMARY KEY;
ClassDiagram.Attribut>> ZImpl.GeneratedName:B =>=>=> RelationalSchema.Column>> zimpl.GeneratedName;
ClassDiagram.Attribut>> Sky.id:Integer =>=>=> RelationalSchema.Column>> sky.id PRIMARY KEY;
ClassDiagram.Attribut>> AImpl.serialversionuid:long =>=>=> RelationalSchema.Column>> aimpl.serialversionuid;
ClassDiagram.Attribut>> AImpl.aid:Integer =>=>=> RelationalSchema.Column>> aimpl.aid PRIMARY KEY;
ClassDiagram.Attribut>> Manufacturer.id:Integer =>=>=> RelationalSchema.Column>> manufacturer.id PRIMARY KEY;
ClassDiagram.Attribut>> PlanetCheatSheet.GeneratedName:Planet =>=>=> RelationalSchema.Column>> planetcheatsheet.GeneratedName PRIMARY KEY;
ClassDiagram.Attribut>> PlanetCheatSheet.mass:double =>=>=> RelationalSchema.Column>> planetcheatsheet.mass;
ClassDiagram.Attribut>> PlanetCheatSheet.radius:double =>=>=> RelationalSchema.Column>> planetcheatsheet.radius;
ClassDiagram.Attribut>> PlanetCheatSheet.numberofinhabitants:long =>=>=> RelationalSchema.Column>> planetcheatsheet.numberofinhabitants;
ClassDiagram.Attribut>> Store.id:Long =>=>=> RelationalSchema.Column>> store.id PRIMARY KEY;
ClassDiagram.Attribut>> Computer.id:Long =>=>=> RelationalSchema.Column>> computer.id PRIMARY KEY;
ClassDiagram.Attribut>> Computer.serialnumber:String =>=>=> RelationalSchema.Column>> computer.serialnumber;
ClassDiagram.Attribut>> Monkey.id:String =>=>=> RelationalSchema.Column>> monkey.id PRIMARY KEY;
ClassDiagram.Attribut>> Phone.id:Integer =>=>=> RelationalSchema.Column>> phone.id PRIMARY KEY;
ClassDiagram.Attribut>> Bunny.id:BigDecimal =>=>=> RelationalSchema.Column>> bunny.id PRIMARY KEY;
ClassDiagram.Attribut>> TwinkleToes.id:BigDecimal =>=>=> RelationalSchema.Column>> twinkletoes.id PRIMARY KEY;
ClassDiagram.Attribut>> HibernateSequenceEntity.id:Long =>=>=> RelationalSchema.Column>> hibernatesequenceentity.id PRIMARY KEY;
ClassDiagram.Attribut>> HibernateSequenceEntity.text:String =>=>=> RelationalSchema.Column>> hibernatesequenceentity.text;
ClassDiagram.Attribut>> PointyTooth.id:BigDecimal =>=>=> RelationalSchema.Column>> pointytooth.id PRIMARY KEY;
ClassDiagram.Attribut>> Footballer.firstname:String =>=>=> RelationalSchema.Column>> footballer.firstname PRIMARY KEY;
ClassDiagram.Attribut>> Footballer.lastname:String =>=>=> RelationalSchema.Column>> footballer.lastname PRIMARY KEY;
ClassDiagram.Attribut>> Footballer.club:String =>=>=> RelationalSchema.Column>> footballer.club;
ClassDiagram.Attribut>> Home.id:Long =>=>=> RelationalSchema.Column>> home.id PRIMARY KEY;
ClassDiagram.Attribut>> Department.id:Long =>=>=> RelationalSchema.Column>> department.id PRIMARY KEY;
ClassDiagram.Attribut>> SoundSystem.id:String =>=>=> RelationalSchema.Column>> soundsystem.id PRIMARY KEY;
ClassDiagram.Attribut>> SoundSystem.brand:String =>=>=> RelationalSchema.Column>> soundsystem.brand;
ClassDiagram.Attribut>> SoundSystem.model:String =>=>=> RelationalSchema.Column>> soundsystem.model;
ClassDiagram.Attribut>> Furniture.id:Integer =>=>=> RelationalSchema.Column>> furniture.id PRIMARY KEY;
ClassDiagram.Attribut>> Ball.id:Integer =>=>=> RelationalSchema.Column>> ball.id PRIMARY KEY;
ClassDiagram.Attribut>> Shoe.id:Long =>=>=> RelationalSchema.Column>> shoe.id PRIMARY KEY;
ClassDiagram.Attribut>> Dog.id:Integer =>=>=> RelationalSchema.Column>> dog.id PRIMARY KEY;
ClassDiagram.Attribut>> Dog.name:String =>=>=> RelationalSchema.Column>> dog.name;
ClassDiagram.Attribut>> BreakDance.id:Integer =>=>=> RelationalSchema.Column>> breakdance.id PRIMARY KEY;
ClassDiagram.Attribut>> BreakDance.name:String =>=>=> RelationalSchema.Column>> breakdance.name;
ClassDiagram.Attribut>> AndFormulaTest.ssr:StandardServiceRegistry =>=>=> RelationalSchema.Column>> andformulatest.ssr;
ClassDiagram.Attribut>> Furniture.id:Integer =>=>=> RelationalSchema.Column>> furniture.id PRIMARY KEY;
ClassDiagram.Attribut>> Hotel.id:Long =>=>=> RelationalSchema.Column>> hotel.id PRIMARY KEY;
ClassDiagram.Attribut>> Hotel.name:String =>=>=> RelationalSchema.Column>> hotel.name;
ClassDiagram.Attribut>> SoundSystem.id:String =>=>=> RelationalSchema.Column>> soundsystem.id PRIMARY KEY;
ClassDiagram.Attribut>> SoundSystem.brand:String =>=>=> RelationalSchema.Column>> soundsystem.brand;
ClassDiagram.Attribut>> SoundSystem.model:String =>=>=> RelationalSchema.Column>> soundsystem.model;
ClassDiagram.Attribut>> PlanetCheatSheet.GeneratedName:Planet =>=>=> RelationalSchema.Column>> planetcheatsheet.GeneratedName PRIMARY KEY;
ClassDiagram.Attribut>> PlanetCheatSheet.mass:double =>=>=> RelationalSchema.Column>> planetcheatsheet.mass;
ClassDiagram.Attribut>> PlanetCheatSheet.radius:double =>=>=> RelationalSchema.Column>> planetcheatsheet.radius;
ClassDiagram.Attribut>> PlanetCheatSheet.numberofinhabitants:long =>=>=> RelationalSchema.Column>> planetcheatsheet.numberofinhabitants;
ClassDiagram.Attribut>> PointyTooth.id:BigDecimal =>=>=> RelationalSchema.Column>> pointytooth.id PRIMARY KEY;
ClassDiagram.Attribut>> Phone.id:Integer =>=>=> RelationalSchema.Column>> phone.id PRIMARY KEY;
ClassDiagram.Attribut>> Dog.id:Integer =>=>=> RelationalSchema.Column>> dog.id PRIMARY KEY;
ClassDiagram.Attribut>> Dog.name:String =>=>=> RelationalSchema.Column>> dog.name;
ClassDiagram.Attribut>> TwinkleToes.id:BigDecimal =>=>=> RelationalSchema.Column>> twinkletoes.id PRIMARY KEY;
ClassDiagram.Attribut>> Footballer.firstname:String =>=>=> RelationalSchema.Column>> footballer.firstname PRIMARY KEY;
ClassDiagram.Attribut>> Footballer.lastname:String =>=>=> RelationalSchema.Column>> footballer.lastname PRIMARY KEY;
ClassDiagram.Attribut>> Footballer.club:String =>=>=> RelationalSchema.Column>> footballer.club;
ClassDiagram.Attribut>> Department.id:Long =>=>=> RelationalSchema.Column>> department.id PRIMARY KEY;
ClassDiagram.Attribut>> Shoe.id:Long =>=>=> RelationalSchema.Column>> shoe.id PRIMARY KEY;
ClassDiagram.Attribut>> Ball.id:Integer =>=>=> RelationalSchema.Column>> ball.id PRIMARY KEY;
ClassDiagram.Attribut>> Bunny.id:BigDecimal =>=>=> RelationalSchema.Column>> bunny.id PRIMARY KEY;
ClassDiagram.Attribut>> Computer.id:Long =>=>=> RelationalSchema.Column>> computer.id PRIMARY KEY;
ClassDiagram.Attribut>> Computer.serialnumber:String =>=>=> RelationalSchema.Column>> computer.serialnumber;
ClassDiagram.Attribut>> BreakDance.id:Integer =>=>=> RelationalSchema.Column>> breakdance.id PRIMARY KEY;
ClassDiagram.Attribut>> BreakDance.name:String =>=>=> RelationalSchema.Column>> breakdance.name;
ClassDiagram.Attribut>> Home.id:Long =>=>=> RelationalSchema.Column>> home.id PRIMARY KEY;
ClassDiagram.Attribut>> Store.id:Long =>=>=> RelationalSchema.Column>> store.id PRIMARY KEY;
ClassDiagram.Attribut>> Monkey.id:String =>=>=> RelationalSchema.Column>> monkey.id PRIMARY KEY;
ClassDiagram.Attribut>> AutoEntity.id:Long =>=>=> RelationalSchema.Column>> autoentity.id PRIMARY KEY;
ClassDiagram.Attribut>> MinimalTableEntity.tbl_name:String =>=>=> RelationalSchema.Column>> minimaltableentity.tbl_name;
ClassDiagram.Attribut>> MinimalTableEntity.id:Long =>=>=> RelationalSchema.Column>> minimaltableentity.id PRIMARY KEY;
ClassDiagram.Attribut>> DedicatedSequenceEntity2.entity_name:String =>=>=> RelationalSchema.Column>> dedicatedsequenceentity2.entity_name;
ClassDiagram.Attribut>> DedicatedSequenceEntity2.id:Long =>=>=> RelationalSchema.Column>> dedicatedsequenceentity2.id PRIMARY KEY;
ClassDiagram.Attribut>> MinimalSequenceEntity.seq_name:String =>=>=> RelationalSchema.Column>> minimalsequenceentity.seq_name;
ClassDiagram.Attribut>> MinimalSequenceEntity.id:Long =>=>=> RelationalSchema.Column>> minimalsequenceentity.id PRIMARY KEY;
ClassDiagram.Attribut>> CompleteSequenceEntity.seq_name:String =>=>=> RelationalSchema.Column>> completesequenceentity.seq_name;
ClassDiagram.Attribut>> CompleteSequenceEntity.id:Long =>=>=> RelationalSchema.Column>> completesequenceentity.id PRIMARY KEY;
ClassDiagram.Attribut>> DedicatedSequenceEntity1.sequence_suffix:String =>=>=> RelationalSchema.Column>> dedicatedsequenceentity1.sequence_suffix;
ClassDiagram.Attribut>> DedicatedSequenceEntity1.id:Long =>=>=> RelationalSchema.Column>> dedicatedsequenceentity1.id PRIMARY KEY;
ClassDiagram.Attribut>> Voice.id:Integer =>=>=> RelationalSchema.Column>> voice.id PRIMARY KEY;
ClassDiagram.Attribut>> GSM.frequency:int =>=>=> RelationalSchema.Column>> gsm.frequency;
ClassDiagram.Attribut>> Sky.id:Long =>=>=> RelationalSchema.Column>> sky.id PRIMARY KEY;
ClassDiagram.Attribut>> Sky.color:String =>=>=> RelationalSchema.Column>> sky.color;
ClassDiagram.Attribut>> Sky.day:String =>=>=> RelationalSchema.Column>> sky.day;
ClassDiagram.Attribut>> Sky.month:String =>=>=> RelationalSchema.Column>> sky.month;
ClassDiagram.Attribut>> Sky.area:String =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> IncorrectEntity.name:String =>=>=> RelationalSchema.Column>> incorrectentity.name;
ClassDiagram.Attribut>> Storm.id:Integer =>=>=> RelationalSchema.Column>> storm.id PRIMARY KEY;
ClassDiagram.Attribut>> Storm.start:Location =>=>=> RelationalSchema.Column>> storm.start;
ClassDiagram.Attribut>> Storm.end:Location =>=>=> RelationalSchema.Column>> storm.end;
ClassDiagram.Attribut>> Storm.stormname:String =>=>=> RelationalSchema.Column>> storm.stormname;
ClassDiagram.Attribut>> BiggestForest.id:Integer =>=>=> RelationalSchema.Column>> biggestforest.id PRIMARY KEY;
ClassDiagram.Attribut>> Customer.id:Integer =>=>=> RelationalSchema.Column>> customer.id PRIMARY KEY;
ClassDiagram.Attribut>> Customer.userid:String =>=>=> RelationalSchema.Column>> customer.userid;
ClassDiagram.Attribut>> Deal.id:Integer =>=>=> RelationalSchema.Column>> deal.id PRIMARY KEY;
ClassDiagram.Attribut>> Lotz.lotpk:LotzPK =>=>=> RelationalSchema.Column>> lotz.lotpk;
ClassDiagram.Attribut>> Lotz.name:String =>=>=> RelationalSchema.Column>> lotz.name;
ClassDiagram.Attribut>> Lotz.location:String =>=>=> RelationalSchema.Column>> lotz.location;
ClassDiagram.Attribut>> DistrictUser.id:Long =>=>=> RelationalSchema.Column>> districtuser.id PRIMARY KEY;
ClassDiagram.Attribut>> DistrictUser.createdby:Long =>=>=> RelationalSchema.Column>> districtuser.createdby;
ClassDiagram.Attribut>> DistrictUser.createdon:Date =>=>=> RelationalSchema.Column>> districtuser.createdon;
ClassDiagram.Attribut>> DistrictUser.ldtmd:Long =>=>=> RelationalSchema.Column>> districtuser.ldtmd;
ClassDiagram.Attribut>> DistrictUser.pmtmp:Long =>=>=> RelationalSchema.Column>> districtuser.pmtmp;
ClassDiagram.Attribut>> Child.id:Integer =>=>=> RelationalSchema.Column>> child.id PRIMARY KEY;
ClassDiagram.Attribut>> Order.id:Integer =>=>=> RelationalSchema.Column>> order.id PRIMARY KEY;
ClassDiagram.Attribut>> Order.ordernbr:String =>=>=> RelationalSchema.Column>> order.ordernbr;
ClassDiagram.Attribut>> ForestType.id:Integer =>=>=> RelationalSchema.Column>> foresttype.id PRIMARY KEY;
ClassDiagram.Attribut>> ForestType.name:String =>=>=> RelationalSchema.Column>> foresttype.name;
ClassDiagram.Attribut>> Car.id:Integer =>=>=> RelationalSchema.Column>> car.id PRIMARY KEY;
ClassDiagram.Attribut>> Car.body:Color =>=>=> RelationalSchema.Column>> car.body;
ClassDiagram.Attribut>> Parent.id:ParentPk =>=>=> RelationalSchema.Column>> parent.id PRIMARY KEY;
ClassDiagram.Attribut>> Parent.age:int =>=>=> RelationalSchema.Column>> parent.age;
ClassDiagram.Attribut>> TreeType.id:Integer =>=>=> RelationalSchema.Column>> treetype.id PRIMARY KEY;
ClassDiagram.Attribut>> TreeType.name:String =>=>=> RelationalSchema.Column>> treetype.name;
ClassDiagram.Attribut>> TreeType.GeneratedName:ForestType =>=>=> RelationalSchema.Column>> treetype.GeneratedName;
ClassDiagram.Attribut>> TreeType.alternative:ForestType =>=>=> RelationalSchema.Column>> treetype.alternative;
ClassDiagram.Attribut>> ZItemCost.GeneratedName:Item =>=>=> RelationalSchema.Column>> zitemcost.GeneratedName;
ClassDiagram.Attribut>> ZItemCost.GeneratedName:Vendor =>=>=> RelationalSchema.Column>> zitemcost.GeneratedName;
ClassDiagram.Attribut>> ZItemCost.cost:BigDecimal =>=>=> RelationalSchema.Column>> zitemcost.cost;
ClassDiagram.Attribut>> WarehouseItem.GeneratedName:Item =>=>=> RelationalSchema.Column>> warehouseitem.GeneratedName;
ClassDiagram.Attribut>> WarehouseItem.GeneratedName:Vendor =>=>=> RelationalSchema.Column>> warehouseitem.GeneratedName;
ClassDiagram.Attribut>> WarehouseItem.qtyinstock:BigDecimal =>=>=> RelationalSchema.Column>> warehouseitem.qtyinstock;
ClassDiagram.Attribut>> Node.id:NodePk =>=>=> RelationalSchema.Column>> node.id PRIMARY KEY;
ClassDiagram.Attribut>> Node.description:String =>=>=> RelationalSchema.Column>> node.description;
ClassDiagram.Attribut>> Carz.id:Integer =>=>=> RelationalSchema.Column>> carz.id PRIMARY KEY;
ClassDiagram.Attribut>> Carz.make:String =>=>=> RelationalSchema.Column>> carz.make;
ClassDiagram.Attribut>> Carz.model:String =>=>=> RelationalSchema.Column>> carz.model;
ClassDiagram.Attribut>> Carz.manufactured:Date =>=>=> RelationalSchema.Column>> carz.manufactured;
ClassDiagram.Attribut>> User.userkey:Long =>=>=> RelationalSchema.Column>> user.userkey PRIMARY KEY;
ClassDiagram.Attribut>> User.start:Date =>=>=> RelationalSchema.Column>> user.start PRIMARY KEY;
ClassDiagram.Attribut>> User.end:Date =>=>=> RelationalSchema.Column>> user.end PRIMARY KEY;
ClassDiagram.Attribut>> User.createdby:Long =>=>=> RelationalSchema.Column>> user.createdby;
ClassDiagram.Attribut>> User.createdon:Date =>=>=> RelationalSchema.Column>> user.createdon;
ClassDiagram.Attribut>> User.userid:String =>=>=> RelationalSchema.Column>> user.userid;
ClassDiagram.Attribut>> User.prefix:Integer =>=>=> RelationalSchema.Column>> user.prefix;
ClassDiagram.Attribut>> User.firstname:String =>=>=> RelationalSchema.Column>> user.firstname;
ClassDiagram.Attribut>> User.lastname1:String =>=>=> RelationalSchema.Column>> user.lastname1;
ClassDiagram.Attribut>> User.lastname2:String =>=>=> RelationalSchema.Column>> user.lastname2;
ClassDiagram.Attribut>> User.middlename1:String =>=>=> RelationalSchema.Column>> user.middlename1;
ClassDiagram.Attribut>> User.middlename2:String =>=>=> RelationalSchema.Column>> user.middlename2;
ClassDiagram.Attribut>> User.suffix:Integer =>=>=> RelationalSchema.Column>> user.suffix;
ClassDiagram.Attribut>> User.birth:Date =>=>=> RelationalSchema.Column>> user.birth;
ClassDiagram.Attribut>> User.birthstate:Integer =>=>=> RelationalSchema.Column>> user.birthstate;
ClassDiagram.Attribut>> User.birthcountry:Integer =>=>=> RelationalSchema.Column>> user.birthcountry;
ClassDiagram.Attribut>> User.username:String =>=>=> RelationalSchema.Column>> user.username;
ClassDiagram.Attribut>> User.password:String =>=>=> RelationalSchema.Column>> user.password;
ClassDiagram.Attribut>> User.usertype:Integer =>=>=> RelationalSchema.Column>> user.usertype;
ClassDiagram.Attribut>> User.privilege:Integer =>=>=> RelationalSchema.Column>> user.privilege;
ClassDiagram.Attribut>> User.state:Integer =>=>=> RelationalSchema.Column>> user.state;
ClassDiagram.Attribut>> User.country:Integer =>=>=> RelationalSchema.Column>> user.country;
ClassDiagram.Attribut>> User.preferredname:String =>=>=> RelationalSchema.Column>> user.preferredname;
ClassDiagram.Attribut>> User.birthplace:String =>=>=> RelationalSchema.Column>> user.birthplace;
ClassDiagram.Attribut>> User.school:Long =>=>=> RelationalSchema.Column>> user.school;
ClassDiagram.Attribut>> User.cluster:Long =>=>=> RelationalSchema.Column>> user.cluster;
ClassDiagram.Attribut>> User.ldtmm:Long =>=>=> RelationalSchema.Column>> user.ldtmm;
ClassDiagram.Attribut>> User.ldtmd:Long =>=>=> RelationalSchema.Column>> user.ldtmd;
ClassDiagram.Attribut>> User.pmtmp:Long =>=>=> RelationalSchema.Column>> user.pmtmp;
ClassDiagram.Attribut>> Frame.id:Long =>=>=> RelationalSchema.Column>> frame.id PRIMARY KEY;
ClassDiagram.Attribut>> Frame.name:String =>=>=> RelationalSchema.Column>> frame.name;
ClassDiagram.Attribut>> Frame.lowername:String =>=>=> RelationalSchema.Column>> frame.lowername;
ClassDiagram.Attribut>> Lens.id:Long =>=>=> RelationalSchema.Column>> lens.id PRIMARY KEY;
ClassDiagram.Attribut>> Lens.focal:float =>=>=> RelationalSchema.Column>> lens.focal;
ClassDiagram.Attribut>> Lens.length:float =>=>=> RelationalSchema.Column>> lens.length;
ClassDiagram.Attribut>> OrderLine.id:Integer =>=>=> RelationalSchema.Column>> orderline.id PRIMARY KEY;
ClassDiagram.Attribut>> OrderLine.item:String =>=>=> RelationalSchema.Column>> orderline.item;
ClassDiagram.Attribut>> OrderLine.GeneratedName:Order =>=>=> RelationalSchema.Column>> orderline.GeneratedName;
ClassDiagram.Attribut>> OrderLine.replacement:Order =>=>=> RelationalSchema.Column>> orderline.replacement;
ClassDiagram.Attribut>> Color.id:Integer =>=>=> RelationalSchema.Column>> color.id PRIMARY KEY;
ClassDiagram.Attribut>> Color.name:String =>=>=> RelationalSchema.Column>> color.name;
ClassDiagram.Attribut>> Owner.id:Integer =>=>=> RelationalSchema.Column>> owner.id PRIMARY KEY;
ClassDiagram.Attribut>> Owner.elements:Set<String> =>=>=> RelationalSchema.Column>> owner.elements;
ClassDiagram.Attribut>> Matrix.id:Integer =>=>=> RelationalSchema.Column>> matrix.id PRIMARY KEY;
ClassDiagram.Attribut>> Matrix.mvalues:SortedMap<Integer,Float> =>=>=> RelationalSchema.Column>> matrix.mvalues;
ClassDiagram.Attribut>> A.id:int =>=>=> RelationalSchema.Column>> a.id PRIMARY KEY;
ClassDiagram.Attribut>> A.listofb:List<B> =>=>=> RelationalSchema.Column>> a.listofb;
ClassDiagram.Attribut>> C.id:int =>=>=> RelationalSchema.Column>> c.id PRIMARY KEY;
ClassDiagram.Attribut>> C.comment:String =>=>=> RelationalSchema.Column>> c.comment;
ClassDiagram.Attribut>> Poi.id:Integer =>=>=> RelationalSchema.Column>> poi.id PRIMARY KEY;
ClassDiagram.Attribut>> Poi.name:String =>=>=> RelationalSchema.Column>> poi.name;
ClassDiagram.Attribut>> RaceExecution.id:Integer =>=>=> RelationalSchema.Column>> raceexecution.id PRIMARY KEY;
ClassDiagram.Attribut>> RaceExecution.poiarrival:Map<Poi,PoiArrival> =>=>=> RelationalSchema.Column>> raceexecution.poiarrival;
ClassDiagram.Attribut>> Widgets.name:String =>=>=> RelationalSchema.Column>> widgets.name;
ClassDiagram.Attribut>> Widgets.id:int =>=>=> RelationalSchema.Column>> widgets.id PRIMARY KEY;
ClassDiagram.Attribut>> Person.id:Long =>=>=> RelationalSchema.Column>> person.id PRIMARY KEY;
ClassDiagram.Attribut>> Person.name:String =>=>=> RelationalSchema.Column>> person.name;
ClassDiagram.Attribut>> Person.nicknamesascendingnaturalsort:Set<String> =>=>=> RelationalSchema.Column>> person.nicknamesascendingnaturalsort;
ClassDiagram.Attribut>> Person.nicknamesdescendingnaturalsort:Set<String> =>=>=> RelationalSchema.Column>> person.nicknamesdescendingnaturalsort;
ClassDiagram.Attribut>> Person.addressesascendingnaturalsort:Set<Address> =>=>=> RelationalSchema.Column>> person.addressesascendingnaturalsort;
ClassDiagram.Attribut>> Person.addressesdescendingnaturalsort:Set<Address> =>=>=> RelationalSchema.Column>> person.addressesdescendingnaturalsort;
ClassDiagram.Attribut>> Person.addressescityascendingsort:Set<Address> =>=>=> RelationalSchema.Column>> person.addressescityascendingsort;
ClassDiagram.Attribut>> Person.addressescitydescendingsort:Set<Address> =>=>=> RelationalSchema.Column>> person.addressescitydescendingsort;
ClassDiagram.Attribut>> Query.id:Long =>=>=> RelationalSchema.Column>> query.id PRIMARY KEY;
ClassDiagram.Attribut>> Query.includedlocations:Set<Location> =>=>=> RelationalSchema.Column>> query.includedlocations;
ClassDiagram.Attribut>> Sale.id:Integer =>=>=> RelationalSchema.Column>> sale.id PRIMARY KEY;
ClassDiagram.Attribut>> Sale.contacts:List<Contact> =>=>=> RelationalSchema.Column>> sale.contacts;
ClassDiagram.Attribut>> BugSystem.id:Integer =>=>=> RelationalSchema.Column>> bugsystem.id PRIMARY KEY;
ClassDiagram.Attribut>> BugSystem.bugs:Set<Bug> =>=>=> RelationalSchema.Column>> bugsystem.bugs;
ClassDiagram.Attribut>> TestCourse.testcourseid:Long =>=>=> RelationalSchema.Column>> testcourse.testcourseid PRIMARY KEY;
ClassDiagram.Attribut>> TestCourse.title:LocalizedString =>=>=> RelationalSchema.Column>> testcourse.title;
ClassDiagram.Attribut>> Products.id:Integer =>=>=> RelationalSchema.Column>> products.id PRIMARY KEY;
ClassDiagram.Attribut>> Products.widgets:Set<Widgets> =>=>=> RelationalSchema.Column>> products.widgets;
ClassDiagram.Attribut>> Boy.id:Integer =>=>=> RelationalSchema.Column>> boy.id PRIMARY KEY;
ClassDiagram.Attribut>> Boy.firstname:String =>=>=> RelationalSchema.Column>> boy.firstname;
ClassDiagram.Attribut>> Boy.lastname:String =>=>=> RelationalSchema.Column>> boy.lastname;
ClassDiagram.Attribut>> Boy.nicknames:Set<String> =>=>=> RelationalSchema.Column>> boy.nicknames;
ClassDiagram.Attribut>> Boy.hatednames:Set<String> =>=>=> RelationalSchema.Column>> boy.hatednames;
ClassDiagram.Attribut>> Boy.preferrednames:Set<String> =>=>=> RelationalSchema.Column>> boy.preferrednames;
ClassDiagram.Attribut>> Boy.scorepernickname:Map<String,Integer> =>=>=> RelationalSchema.Column>> boy.scorepernickname;
ClassDiagram.Attribut>> Boy.scoreperpreferredname:Map<String,Integer> =>=>=> RelationalSchema.Column>> boy.scoreperpreferredname;
ClassDiagram.Attribut>> Boy.favoritenumbers:int =>=>=> RelationalSchema.Column>> boy.favoritenumbers;
ClassDiagram.Attribut>> Boy.favoritetoys:Set<Toy> =>=>=> RelationalSchema.Column>> boy.favoritetoys;
ClassDiagram.Attribut>> Boy.characters:Set<Character> =>=>=> RelationalSchema.Column>> boy.characters;
ClassDiagram.Attribut>> Boy.foods:Map<String,FavoriteFood> =>=>=> RelationalSchema.Column>> boy.foods;
ClassDiagram.Attribut>> Boy.countryattitudes:Set<CountryAttitude> =>=>=> RelationalSchema.Column>> boy.countryattitudes;
ClassDiagram.Attribut>> EntityWithAnElementCollection.id:Long =>=>=> RelationalSchema.Column>> entitywithanelementcollection.id PRIMARY KEY;
ClassDiagram.Attribut>> EntityWithAnElementCollection.somestrings:Set<String> =>=>=> RelationalSchema.Column>> entitywithanelementcollection.somestrings;
ClassDiagram.Attribut>> SocialSecurityMoralAccount.number:String =>=>=> RelationalSchema.Column>> socialsecuritymoralaccount.number;
ClassDiagram.Attribut>> SocialSecurityMoralAccount.countrycode:String =>=>=> RelationalSchema.Column>> socialsecuritymoralaccount.countrycode;
ClassDiagram.Attribut>> BusTrip.id:BusTripPk =>=>=> RelationalSchema.Column>> bustrip.id;
ClassDiagram.Attribut>> BusTrip.status:Availability =>=>=> RelationalSchema.Column>> bustrip.status;
ClassDiagram.Attribut>> BusTrip.serial:byte =>=>=> RelationalSchema.Column>> bustrip.serial;
ClassDiagram.Attribut>> BusTrip.terminustime:Date =>=>=> RelationalSchema.Column>> bustrip.terminustime;
ClassDiagram.Attribut>> BusTrip.players:Map<String,SocialSecurityPhysicalAccount> =>=>=> RelationalSchema.Column>> bustrip.players;
ClassDiagram.Attribut>> BusTrip.roads:List =>=>=> RelationalSchema.Column>> bustrip.roads;
ClassDiagram.Attribut>> Administration.id:Integer =>=>=> RelationalSchema.Column>> administration.id PRIMARY KEY;
ClassDiagram.Attribut>> Administration.firstname:String =>=>=> RelationalSchema.Column>> administration.firstname;
ClassDiagram.Attribut>> Administration.lastname:String =>=>=> RelationalSchema.Column>> administration.lastname;
ClassDiagram.Attribut>> Administration.address:String =>=>=> RelationalSchema.Column>> administration.address;
ClassDiagram.Attribut>> Administration.version:Integer =>=>=> RelationalSchema.Column>> administration.version;
ClassDiagram.Attribut>> Administration.transientfield:String =>=>=> RelationalSchema.Column>> administration.transientfield;
ClassDiagram.Attribut>> SocialSecurityPhysicalAccount.number:String =>=>=> RelationalSchema.Column>> socialsecurityphysicalaccount.number;
ClassDiagram.Attribut>> SocialSecurityPhysicalAccount.countrycode:String =>=>=> RelationalSchema.Column>> socialsecurityphysicalaccount.countrycode;
ClassDiagram.Attribut>> Company.id:Long =>=>=> RelationalSchema.Column>> company.id PRIMARY KEY;
ClassDiagram.Attribut>> Company.organizations:List<Organization> =>=>=> RelationalSchema.Column>> company.organizations;
ClassDiagram.Attribut>> Match.competitor1point:String =>=>=> RelationalSchema.Column>> match.competitor1point;
ClassDiagram.Attribut>> Match.version:Integer =>=>=> RelationalSchema.Column>> match.version;
ClassDiagram.Attribut>> Match.playerassn:SocialSecurityNumber =>=>=> RelationalSchema.Column>> match.playerassn;
ClassDiagram.Attribut>> Father.id:Integer =>=>=> RelationalSchema.Column>> father.id PRIMARY KEY;
ClassDiagram.Attribut>> Mother.id:Integer =>=>=> RelationalSchema.Column>> mother.id PRIMARY KEY;
ClassDiagram.Attribut>> Son.id:Integer =>=>=> RelationalSchema.Column>> son.id PRIMARY KEY;
ClassDiagram.Attribut>> Son.GeneratedName:Father =>=>=> RelationalSchema.Column>> son.GeneratedName;
ClassDiagram.Attribut>> Son.GeneratedName:Mother =>=>=> RelationalSchema.Column>> son.GeneratedName;
ClassDiagram.Attribut>> WashingMachine.id:Integer =>=>=> RelationalSchema.Column>> washingmachine.id PRIMARY KEY;
ClassDiagram.Attribut>> WashingMachine.transientisactive:boolean =>=>=> RelationalSchema.Column>> washingmachine.transientisactive;
ClassDiagram.Attribut>> Topic.id:int =>=>=> RelationalSchema.Column>> topic.id PRIMARY KEY;
ClassDiagram.Attribut>> CommunityBid.communitynote:Starred =>=>=> RelationalSchema.Column>> communitybid.communitynote;
ClassDiagram.Attribut>> Flight.id:Long =>=>=> RelationalSchema.Column>> flight.id PRIMARY KEY;
ClassDiagram.Attribut>> Flight.maxaltitudeinmilimeter:long =>=>=> RelationalSchema.Column>> flight.maxaltitudeinmilimeter;
ClassDiagram.Attribut>> Flight.maxaltitude:long =>=>=> RelationalSchema.Column>> flight.maxaltitude;
ClassDiagram.Attribut>> Bid.id:Integer =>=>=> RelationalSchema.Column>> bid.id PRIMARY KEY;
ClassDiagram.Attribut>> Bid.description:String =>=>=> RelationalSchema.Column>> bid.description;
ClassDiagram.Attribut>> Bid.note:Starred =>=>=> RelationalSchema.Column>> bid.note;
ClassDiagram.Attribut>> Bid.editorsnote:Starred =>=>=> RelationalSchema.Column>> bid.editorsnote;
ClassDiagram.Attribut>> Bid.approved:Boolean =>=>=> RelationalSchema.Column>> bid.approved;
ClassDiagram.Attribut>> Player.id:int =>=>=> RelationalSchema.Column>> player.id PRIMARY KEY;
ClassDiagram.Attribut>> Player.name:String =>=>=> RelationalSchema.Column>> player.name;
ClassDiagram.Attribut>> Player.//fortheworldcupofoneversusonematches,wehave//teamswithoneplayer(1v1team).onevoneteam:SoccerTeam =>=>=> RelationalSchema.Column>> player.//fortheworldcupofoneversusonematches,wehave//teamswithoneplayer(1v1team).onevoneteam;
ClassDiagram.Attribut>> Forest.id:Integer =>=>=> RelationalSchema.Column>> forest.id PRIMARY KEY;
ClassDiagram.Attribut>> Forest.name:String =>=>=> RelationalSchema.Column>> forest.name;
ClassDiagram.Attribut>> Forest.length:long =>=>=> RelationalSchema.Column>> forest.length;
ClassDiagram.Attribut>> Forest.longdescription:String =>=>=> RelationalSchema.Column>> forest.longdescription;
ClassDiagram.Attribut>> Forest.smalltext:String =>=>=> RelationalSchema.Column>> forest.smalltext;
ClassDiagram.Attribut>> Forest.bigtext:String =>=>=> RelationalSchema.Column>> forest.bigtext;
ClassDiagram.Attribut>> Forest.GeneratedName:Country =>=>=> RelationalSchema.Column>> forest.GeneratedName;
ClassDiagram.Attribut>> Forest.near:Set =>=>=> RelationalSchema.Column>> forest.near;
ClassDiagram.Attribut>> FormalLastName.id:Integer =>=>=> RelationalSchema.Column>> formallastname.id PRIMARY KEY;
ClassDiagram.Attribut>> FormalLastName.GeneratedName:LastName =>=>=> RelationalSchema.Column>> formallastname.GeneratedName;
ClassDiagram.Attribut>> FormalLastName.designation:String =>=>=> RelationalSchema.Column>> formallastname.designation;
ClassDiagram.Attribut>> Month.id:int =>=>=> RelationalSchema.Column>> month.id PRIMARY KEY;
ClassDiagram.Attribut>> Month.year:int =>=>=> RelationalSchema.Column>> month.year;
ClassDiagram.Attribut>> Month.month:int =>=>=> RelationalSchema.Column>> month.month;
ClassDiagram.Attribut>> Doctor.id:Integer =>=>=> RelationalSchema.Column>> doctor.id PRIMARY KEY;
ClassDiagram.Attribut>> Doctor.name:String =>=>=> RelationalSchema.Column>> doctor.name;
ClassDiagram.Attribut>> Doctor.activelicense:boolean =>=>=> RelationalSchema.Column>> doctor.activelicense;
ClassDiagram.Attribut>> Doctor.yearsexperience:Integer =>=>=> RelationalSchema.Column>> doctor.yearsexperience;
ClassDiagram.Attribut>> ContactDetails.id:int =>=>=> RelationalSchema.Column>> contactdetails.id PRIMARY KEY;
ClassDiagram.Attribut>> ContactDetails.local:PhoneNumber =>=>=> RelationalSchema.Column>> contactdetails.local;
ClassDiagram.Attribut>> ContactDetails.GeneratedName:OverseasPhoneNumber =>=>=> RelationalSchema.Column>> contactdetails.GeneratedName;
ClassDiagram.Attribut>> LocalContactDetails.id:int =>=>=> RelationalSchema.Column>> localcontactdetails.id PRIMARY KEY;
ClassDiagram.Attribut>> LocalContactDetails.local:PhoneNumber =>=>=> RelationalSchema.Column>> localcontactdetails.local;
ClassDiagram.Attribut>> LocalContactDetails.GeneratedName:OverseasPhoneNumber =>=>=> RelationalSchema.Column>> localcontactdetails.GeneratedName;
ClassDiagram.Attribut>> Ransom.id:Integer =>=>=> RelationalSchema.Column>> ransom.id PRIMARY KEY;
ClassDiagram.Attribut>> Ransom.kidnappername:String =>=>=> RelationalSchema.Column>> ransom.kidnappername;
ClassDiagram.Attribut>> Ransom.amount:MonetaryAmount =>=>=> RelationalSchema.Column>> ransom.amount;
ClassDiagram.Attribut>> Ransom.GeneratedName:Date =>=>=> RelationalSchema.Column>> ransom.GeneratedName;
ClassDiagram.Attribut>> Narrative.id:int =>=>=> RelationalSchema.Column>> narrative.id PRIMARY KEY;
ClassDiagram.Attribut>> Narrative.state:String =>=>=> RelationalSchema.Column>> narrative.state;
ClassDiagram.Attribut>> Narrative.GeneratedName:Topic =>=>=> RelationalSchema.Column>> narrative.GeneratedName;
ClassDiagram.Attribut>> Forest2.id:Integer =>=>=> RelationalSchema.Column>> forest2.id PRIMARY KEY;
ClassDiagram.Attribut>> Forest2.name:String =>=>=> RelationalSchema.Column>> forest2.name;
ClassDiagram.Attribut>> Forest2.longdescription:String =>=>=> RelationalSchema.Column>> forest2.longdescription;
ClassDiagram.Attribut>> Tree.id:Integer =>=>=> RelationalSchema.Column>> tree.id PRIMARY KEY;
ClassDiagram.Attribut>> Tree.name:String =>=>=> RelationalSchema.Column>> tree.name;
ClassDiagram.Attribut>> SoccerTeam.id:int =>=>=> RelationalSchema.Column>> soccerteam.id PRIMARY KEY;
ClassDiagram.Attribut>> SoccerTeam.name:String =>=>=> RelationalSchema.Column>> soccerteam.name;
ClassDiagram.Attribut>> Name.id:Integer =>=>=> RelationalSchema.Column>> name.id PRIMARY KEY;
ClassDiagram.Attribut>> Name.GeneratedName:LastName =>=>=> RelationalSchema.Column>> name.GeneratedName;
ClassDiagram.Attribut>> ZipCode.code:String =>=>=> RelationalSchema.Column>> zipcode.code PRIMARY KEY;
ClassDiagram.Attribut>> Address.id:Integer =>=>=> RelationalSchema.Column>> address.id PRIMARY KEY;
ClassDiagram.Attribut>> Address.city:String =>=>=> RelationalSchema.Column>> address.city;
ClassDiagram.Attribut>> Address.GeneratedName:Country =>=>=> RelationalSchema.Column>> address.GeneratedName;
ClassDiagram.Attribut>> Drill.id:int =>=>=> RelationalSchema.Column>> drill.id PRIMARY KEY;
ClassDiagram.Attribut>> Car.id:int =>=>=> RelationalSchema.Column>> car.id PRIMARY KEY;
ClassDiagram.Attribut>> Car.name:String =>=>=> RelationalSchema.Column>> car.name;
ClassDiagram.Attribut>> Race.length:Long =>=>=> RelationalSchema.Column>> race.length;
ClassDiagram.Attribut>> Race.id:Integer =>=>=> RelationalSchema.Column>> race.id PRIMARY KEY;
ClassDiagram.Attribut>> Project.id:int =>=>=> RelationalSchema.Column>> project.id PRIMARY KEY;
ClassDiagram.Attribut>> Card.primarykey:CardPrimaryKey =>=>=> RelationalSchema.Column>> card.primarykey PRIMARY KEY;
ClassDiagram.Attribut>> C.prent:A =>=>=> RelationalSchema.Column>> c.prent PRIMARY KEY;
ClassDiagram.Attribut>> C.sequencenumber:int =>=>=> RelationalSchema.Column>> c.sequencenumber PRIMARY KEY;
ClassDiagram.Attribut>> Droitacces.idpk:BigInteger =>=>=> RelationalSchema.Column>> droitacces.idpk PRIMARY KEY;
ClassDiagram.Attribut>> B.parent:C =>=>=> RelationalSchema.Column>> b.parent PRIMARY KEY;
ClassDiagram.Attribut>> B.sequencenumber:int =>=>=> RelationalSchema.Column>> b.sequencenumber PRIMARY KEY;
ClassDiagram.Attribut>> Acces.idpk:BigInteger =>=>=> RelationalSchema.Column>> acces.idpk PRIMARY KEY;
ClassDiagram.Attribut>> Benefserv.idpk:BigInteger =>=>=> RelationalSchema.Column>> benefserv.idpk PRIMARY KEY;
ClassDiagram.Attribut>> Service.idpk:BigInteger =>=>=> RelationalSchema.Column>> service.idpk PRIMARY KEY;
ClassDiagram.Attribut>> A.id:int =>=>=> RelationalSchema.Column>> a.id PRIMARY KEY;
ClassDiagram.Attribut>> StoreCustomer.GeneratedName:Store =>=>=> RelationalSchema.Column>> storecustomer.GeneratedName PRIMARY KEY;
ClassDiagram.Attribut>> StoreCustomer.GeneratedName:Customer =>=>=> RelationalSchema.Column>> storecustomer.GeneratedName PRIMARY KEY;
ClassDiagram.Attribut>> StoreCustomer.serialversionuid:long =>=>=> RelationalSchema.Column>> storecustomer.serialversionuid;
ClassDiagram.Attribut>> CardField.GeneratedName:PrimaryKey =>=>=> RelationalSchema.Column>> cardfield.GeneratedName PRIMARY KEY;
ClassDiagram.Attribut>> CardKey.id:int =>=>=> RelationalSchema.Column>> cardkey.id PRIMARY KEY;
ClassDiagram.Attribut>> Customers.serialversionuid:long =>=>=> RelationalSchema.Column>> customers.serialversionuid;
ClassDiagram.Attribut>> Customers.customerid:int =>=>=> RelationalSchema.Column>> customers.customerid PRIMARY KEY;
ClassDiagram.Attribut>> CourseStudent.GeneratedName:Course =>=>=> RelationalSchema.Column>> coursestudent.GeneratedName PRIMARY KEY;
ClassDiagram.Attribut>> CourseStudent.GeneratedName:Student =>=>=> RelationalSchema.Column>> coursestudent.GeneratedName PRIMARY KEY;
ClassDiagram.Attribut>> CourseStudent.value:String =>=>=> RelationalSchema.Column>> coursestudent.value;
ClassDiagram.Attribut>> Student.id:int =>=>=> RelationalSchema.Column>> student.id PRIMARY KEY;
ClassDiagram.Attribut>> Student.name:String =>=>=> RelationalSchema.Column>> student.name;
ClassDiagram.Attribut>> Store.id:Integer =>=>=> RelationalSchema.Column>> store.id PRIMARY KEY;
ClassDiagram.Attribut>> Store.serialversionuid:long =>=>=> RelationalSchema.Column>> store.serialversionuid;
ClassDiagram.Attribut>> ShoppingBaskets.serialversionuid:long =>=>=> RelationalSchema.Column>> shoppingbaskets.serialversionuid;
ClassDiagram.Attribut>> ShoppingBaskets.owner:Customers =>=>=> RelationalSchema.Column>> shoppingbaskets.owner PRIMARY KEY;
ClassDiagram.Attribut>> ShoppingBaskets.basketdatetime:java.util.Date =>=>=> RelationalSchema.Column>> shoppingbaskets.basketdatetime PRIMARY KEY;
ClassDiagram.Attribut>> Course.id:int =>=>=> RelationalSchema.Column>> course.id PRIMARY KEY;
ClassDiagram.Attribut>> Course.name:String =>=>=> RelationalSchema.Column>> course.name;
ClassDiagram.Attribut>> BasketItems.serialversionuid:long =>=>=> RelationalSchema.Column>> basketitems.serialversionuid;
ClassDiagram.Attribut>> BasketItems.GeneratedName:ShoppingBaskets =>=>=> RelationalSchema.Column>> basketitems.GeneratedName PRIMARY KEY;
ClassDiagram.Attribut>> BasketItems.cost:Double =>=>=> RelationalSchema.Column>> basketitems.cost PRIMARY KEY;
ClassDiagram.Attribut>> Customer.id:Integer =>=>=> RelationalSchema.Column>> customer.id PRIMARY KEY;
ClassDiagram.Attribut>> Customer.serialversionuid:long =>=>=> RelationalSchema.Column>> customer.serialversionuid;
ClassDiagram.Attribut>> Flight.id:String =>=>=> RelationalSchema.Column>> flight.id PRIMARY KEY;
ClassDiagram.Attribut>> Country.id:Integer =>=>=> RelationalSchema.Column>> country.id PRIMARY KEY;
ClassDiagram.Attribut>> Country.name:String =>=>=> RelationalSchema.Column>> country.name;
ClassDiagram.Attribut>> State.id:Integer =>=>=> RelationalSchema.Column>> state.id PRIMARY KEY;
ClassDiagram.Attribut>> State.name:String =>=>=> RelationalSchema.Column>> state.name;
ClassDiagram.Attribut>> Foobar.id:Integer =>=>=> RelationalSchema.Column>> foobar.id PRIMARY KEY;
ClassDiagram.Attribut>> Foobar.name:String =>=>=> RelationalSchema.Column>> foobar.name;
ClassDiagram.Attribut>> Photo.id:Integer =>=>=> RelationalSchema.Column>> photo.id PRIMARY KEY;
ClassDiagram.Attribut>> Photo.name:String =>=>=> RelationalSchema.Column>> photo.name;
ClassDiagram.Attribut>> Photo.metadata:Exif =>=>=> RelationalSchema.Column>> photo.metadata;
ClassDiagram.Attribut>> Photo.GeneratedName:Caption =>=>=> RelationalSchema.Column>> photo.GeneratedName;
ClassDiagram.Attribut>> Employee.id:Long =>=>=> RelationalSchema.Column>> employee.id PRIMARY KEY;
ClassDiagram.Attribut>> Attrset.id:Long =>=>=> RelationalSchema.Column>> attrset.id PRIMARY KEY;
ClassDiagram.Attribut>> SpaceShip.name:String =>=>=> RelationalSchema.Column>> spaceship.name PRIMARY KEY;
ClassDiagram.Attribut>> SpaceShip.model:String =>=>=> RelationalSchema.Column>> spaceship.model;
ClassDiagram.Attribut>> SpaceShip.speed:double =>=>=> RelationalSchema.Column>> spaceship.speed;
ClassDiagram.Attribut>> SpaceShip.GeneratedName:Captain =>=>=> RelationalSchema.Column>> spaceship.GeneratedName;
ClassDiagram.Attribut>> SpaceShip.GeneratedName:Dimensions =>=>=> RelationalSchema.Column>> spaceship.GeneratedName;
ClassDiagram.Attribut>> Attrvalue.id:Long =>=>=> RelationalSchema.Column>> attrvalue.id PRIMARY KEY;
ClassDiagram.Attribut>> Attrvalue.value:String =>=>=> RelationalSchema.Column>> attrvalue.value;
ClassDiagram.Attribut>> Mark.id:int =>=>=> RelationalSchema.Column>> mark.id PRIMARY KEY;
ClassDiagram.Attribut>> Mark.value:int =>=>=> RelationalSchema.Column>> mark.value;
ClassDiagram.Attribut>> Twilight.id:int =>=>=> RelationalSchema.Column>> twilight.id PRIMARY KEY;
ClassDiagram.Attribut>> AllTables.tablename:String =>=>=> RelationalSchema.Column>> alltables.tablename PRIMARY KEY;
ClassDiagram.Attribut>> AllTables.daysold:String =>=>=> RelationalSchema.Column>> alltables.daysold;
ClassDiagram.Attribut>> CasimirParticle.id:Long =>=>=> RelationalSchema.Column>> casimirparticle.id PRIMARY KEY;
ClassDiagram.Attribut>> Dictionary.id:Integer =>=>=> RelationalSchema.Column>> dictionary.id PRIMARY KEY;
ClassDiagram.Attribut>> Dictionary.name:String =>=>=> RelationalSchema.Column>> dictionary.name;
ClassDiagram.Attribut>> Dictionary.editor:String =>=>=> RelationalSchema.Column>> dictionary.editor;
ClassDiagram.Attribut>> NamedQueryTest.game_titles:String =>=>=> RelationalSchema.Column>> namedquerytest.game_titles;
ClassDiagram.Attribut>> Night.id:Integer =>=>=> RelationalSchema.Column>> night.id PRIMARY KEY;
ClassDiagram.Attribut>> Night.duration:long =>=>=> RelationalSchema.Column>> night.duration;
ClassDiagram.Attribut>> Night.GeneratedName:Date =>=>=> RelationalSchema.Column>> night.GeneratedName;
ClassDiagram.Attribut>> Night.GeneratedName:Area =>=>=> RelationalSchema.Column>> night.GeneratedName;
ClassDiagram.Attribut>> Chaos.id:Long =>=>=> RelationalSchema.Column>> chaos.id PRIMARY KEY;
ClassDiagram.Attribut>> Chaos.size:Long =>=>=> RelationalSchema.Column>> chaos.size;
ClassDiagram.Attribut>> Chaos.name:String =>=>=> RelationalSchema.Column>> chaos.name;
ClassDiagram.Attribut>> Chaos.nickname:String =>=>=> RelationalSchema.Column>> chaos.nickname;
ClassDiagram.Attribut>> Employeegroup.id:Long =>=>=> RelationalSchema.Column>> employeegroup.id PRIMARY KEY;
ClassDiagram.Attribut>> Captain.firstname:String =>=>=> RelationalSchema.Column>> captain.firstname PRIMARY KEY;
ClassDiagram.Attribut>> Captain.lastname:String =>=>=> RelationalSchema.Column>> captain.lastname PRIMARY KEY;
ClassDiagram.Attribut>> Area.id:Integer =>=>=> RelationalSchema.Column>> area.id PRIMARY KEY;
ClassDiagram.Attribut>> Area.name:String =>=>=> RelationalSchema.Column>> area.name;
ClassDiagram.Attribut>> Color.id:Integer =>=>=> RelationalSchema.Column>> color.id PRIMARY KEY;
ClassDiagram.Attribut>> Color.name:String =>=>=> RelationalSchema.Column>> color.name;
ClassDiagram.Attribut>> CupHolder.id:Integer =>=>=> RelationalSchema.Column>> cupholder.id PRIMARY KEY;
ClassDiagram.Attribut>> CupHolder.radius:BigDecimal =>=>=> RelationalSchema.Column>> cupholder.radius;
ClassDiagram.Attribut>> PowerSupply.id:Integer =>=>=> RelationalSchema.Column>> powersupply.id PRIMARY KEY;
ClassDiagram.Attribut>> PowerSupply.power:BigDecimal =>=>=> RelationalSchema.Column>> powersupply.power;
ClassDiagram.Attribut>> PowerSupply.position:String =>=>=> RelationalSchema.Column>> powersupply.position;
ClassDiagram.Attribut>> MinMax.id:Long =>=>=> RelationalSchema.Column>> minmax.id PRIMARY KEY;
ClassDiagram.Attribut>> MinMax.value:Integer =>=>=> RelationalSchema.Column>> minmax.value;
ClassDiagram.Attribut>> Display.id:Integer =>=>=> RelationalSchema.Column>> display.id PRIMARY KEY;
ClassDiagram.Attribut>> Display.brand:String =>=>=> RelationalSchema.Column>> display.brand;
ClassDiagram.Attribut>> Screen.id:Integer =>=>=> RelationalSchema.Column>> screen.id PRIMARY KEY;
ClassDiagram.Attribut>> Screen.stop:Button =>=>=> RelationalSchema.Column>> screen.stop;
ClassDiagram.Attribut>> Screen.GeneratedName:PowerSupply =>=>=> RelationalSchema.Column>> screen.GeneratedName;
ClassDiagram.Attribut>> Screen.connectors:Set<DisplayConnector> =>=>=> RelationalSchema.Column>> screen.connectors;
ClassDiagram.Attribut>> Address.blacklistedzipcode:String =>=>=> RelationalSchema.Column>> address.blacklistedzipcode;
ClassDiagram.Attribut>> Address.line1:String =>=>=> RelationalSchema.Column>> address.line1;
ClassDiagram.Attribut>> Address.line2:String =>=>=> RelationalSchema.Column>> address.line2;
ClassDiagram.Attribut>> Address.zip:String =>=>=> RelationalSchema.Column>> address.zip;
ClassDiagram.Attribut>> Address.state:String =>=>=> RelationalSchema.Column>> address.state;
ClassDiagram.Attribut>> Address.country:String =>=>=> RelationalSchema.Column>> address.country;
ClassDiagram.Attribut>> Address.id:long =>=>=> RelationalSchema.Column>> address.id PRIMARY KEY;
ClassDiagram.Attribut>> Address.internalvalid:boolean =>=>=> RelationalSchema.Column>> address.internalvalid;
ClassDiagram.Attribut>> Address.floor:int =>=>=> RelationalSchema.Column>> address.floor;
ClassDiagram.Attribut>> Rock.bit:Integer =>=>=> RelationalSchema.Column>> rock.bit;
ClassDiagram.Attribut>> Range.id:Long =>=>=> RelationalSchema.Column>> range.id PRIMARY KEY;
ClassDiagram.Attribut>> Range.value:Integer =>=>=> RelationalSchema.Column>> range.value;
ClassDiagram.Attribut>> Tv.serial:String =>=>=> RelationalSchema.Column>> tv.serial PRIMARY KEY;
ClassDiagram.Attribut>> Tv.model:String =>=>=> RelationalSchema.Column>> tv.model;
ClassDiagram.Attribut>> Tv.size:int =>=>=> RelationalSchema.Column>> tv.size;
ClassDiagram.Attribut>> Tv.name:String =>=>=> RelationalSchema.Column>> tv.name;
ClassDiagram.Attribut>> Tv.exp:Date =>=>=> RelationalSchema.Column>> tv.exp;
ClassDiagram.Attribut>> Tv.description:String =>=>=> RelationalSchema.Column>> tv.description;
ClassDiagram.Attribut>> Tv.lifetime:BigInteger =>=>=> RelationalSchema.Column>> tv.lifetime;
ClassDiagram.Attribut>> Tv.GeneratedName:Tuner =>=>=> RelationalSchema.Column>> tv.GeneratedName;
ClassDiagram.Attribut>> Tv.GeneratedName:Recorder =>=>=> RelationalSchema.Column>> tv.GeneratedName;
ClassDiagram.Attribut>> Music.name:String =>=>=> RelationalSchema.Column>> music.name PRIMARY KEY;
ClassDiagram.Attribut>> TvOwner.id:Integer =>=>=> RelationalSchema.Column>> tvowner.id PRIMARY KEY;
ClassDiagram.Attribut>> Client.serialversionuid:long =>=>=> RelationalSchema.Column>> client.serialversionuid;
ClassDiagram.Attribut>> Client.street:String =>=>=> RelationalSchema.Column>> client.street;
ClassDiagram.Attribut>> Client.code:String =>=>=> RelationalSchema.Column>> client.code;
ClassDiagram.Attribut>> Client.city:String =>=>=> RelationalSchema.Column>> client.city;
ClassDiagram.Attribut>> Person.id:int =>=>=> RelationalSchema.Column>> person.id PRIMARY KEY;
ClassDiagram.Attribut>> Person.name:String =>=>=> RelationalSchema.Column>> person.name;
ClassDiagram.Attribut>> Person.firtsname:String =>=>=> RelationalSchema.Column>> person.firtsname;
ClassDiagram.Attribut>> File.name:String =>=>=> RelationalSchema.Column>> file.name PRIMARY KEY;
ClassDiagram.Attribut>> Asset.id:Integer =>=>=> RelationalSchema.Column>> asset.id PRIMARY KEY;
ClassDiagram.Attribut>> Asset.GeneratedName:Parent =>=>=> RelationalSchema.Column>> asset.GeneratedName;
ClassDiagram.Attribut>> ProgramExecution.id:Integer =>=>=> RelationalSchema.Column>> programexecution.id PRIMARY KEY;
ClassDiagram.Attribut>> ProgramExecution.action:String =>=>=> RelationalSchema.Column>> programexecution.action;
ClassDiagram.Attribut>> Company.companyname:String =>=>=> RelationalSchema.Column>> company.companyname;
ClassDiagram.Attribut>> Company.companyaddress:String =>=>=> RelationalSchema.Column>> company.companyaddress;
ClassDiagram.Attribut>> PropertyAsset.price:double =>=>=> RelationalSchema.Column>> propertyasset.price;
ClassDiagram.Attribut>> Document.size:int =>=>=> RelationalSchema.Column>> document.size;
ClassDiagram.Attribut>> Sweater.issweat:boolean =>=>=> RelationalSchema.Column>> sweater.issweat;
ClassDiagram.Attribut>> Customer.customername:String =>=>=> RelationalSchema.Column>> customer.customername;
ClassDiagram.Attribut>> Customer.customercode:String =>=>=> RelationalSchema.Column>> customer.customercode;
ClassDiagram.Attribut>> EventInformation.notificationid:String =>=>=> RelationalSchema.Column>> eventinformation.notificationid PRIMARY KEY;
ClassDiagram.Attribut>> Parent.id:Integer =>=>=> RelationalSchema.Column>> parent.id PRIMARY KEY;
ClassDiagram.Attribut>> Parent.propertyass:Set =>=>=> RelationalSchema.Column>> parent.propertyass;
ClassDiagram.Attribut>> Parent.financialass:Set =>=>=> RelationalSchema.Column>> parent.financialass;
ClassDiagram.Attribut>> Pool.id:Integer =>=>=> RelationalSchema.Column>> pool.id PRIMARY KEY;
ClassDiagram.Attribut>> Pool.address:PoolAddress =>=>=> RelationalSchema.Column>> pool.address;
ClassDiagram.Attribut>> Clothing.id:long =>=>=> RelationalSchema.Column>> clothing.id PRIMARY KEY;
ClassDiagram.Attribut>> Clothing.size:int =>=>=> RelationalSchema.Column>> clothing.size;
ClassDiagram.Attribut>> Clothing.color:String =>=>=> RelationalSchema.Column>> clothing.color;
ClassDiagram.Attribut>> Account.serialversionuid:long =>=>=> RelationalSchema.Column>> account.serialversionuid;
ClassDiagram.Attribut>> Account.id:int =>=>=> RelationalSchema.Column>> account.id PRIMARY KEY;
ClassDiagram.Attribut>> Account.number:String =>=>=> RelationalSchema.Column>> account.number;
ClassDiagram.Attribut>> Account.balance:double =>=>=> RelationalSchema.Column>> account.balance;
ClassDiagram.Attribut>> FinancialAsset.price:double =>=>=> RelationalSchema.Column>> financialasset.price;
ClassDiagram.Attribut>> Tomato.size:int =>=>=> RelationalSchema.Column>> tomato.size;
ClassDiagram.Attribut>> Vegetable.id:VegetablePk =>=>=> RelationalSchema.Column>> vegetable.id PRIMARY KEY;
ClassDiagram.Attribut>> Vegetable.priceincent:long =>=>=> RelationalSchema.Column>> vegetable.priceincent;
ClassDiagram.Attribut>> BaseClass2.id:long =>=>=> RelationalSchema.Column>> baseclass2.id PRIMARY KEY;
ClassDiagram.Attribut>> BaseClass.id:long =>=>=> RelationalSchema.Column>> baseclass.id PRIMARY KEY;
ClassDiagram.Attribut>> File.name:String =>=>=> RelationalSchema.Column>> file.name PRIMARY KEY;
ClassDiagram.Attribut>> Document.size:int =>=>=> RelationalSchema.Column>> document.size;
ClassDiagram.Attribut>> Document.size:int =>=>=> RelationalSchema.Column>> document.size;
ClassDiagram.Attribut>> File.name:String =>=>=> RelationalSchema.Column>> file.name PRIMARY KEY;
ClassDiagram.Attribut>> DuplicatedDiscriminatorValueTest.discriminator_value:String =>=>=> RelationalSchema.Column>> duplicateddiscriminatorvaluetest.discriminator_value;
ClassDiagram.Attribut>> Trash.id:Integer =>=>=> RelationalSchema.Column>> trash.id PRIMARY KEY;
ClassDiagram.Attribut>> Music.id:Integer =>=>=> RelationalSchema.Column>> music.id PRIMARY KEY;
ClassDiagram.Attribut>> Music.avgbeat:int =>=>=> RelationalSchema.Column>> music.avgbeat;
ClassDiagram.Attribut>> Music.type:Integer =>=>=> RelationalSchema.Column>> music.type;
ClassDiagram.Attribut>> Building.id:Integer =>=>=> RelationalSchema.Column>> building.id PRIMARY KEY;
ClassDiagram.Attribut>> Building.street:String =>=>=> RelationalSchema.Column>> building.street;
ClassDiagram.Attribut>> Funk.starred:int =>=>=> RelationalSchema.Column>> funk.starred;
ClassDiagram.Attribut>> Carrot.length:int =>=>=> RelationalSchema.Column>> carrot.length;
ClassDiagram.Attribut>> Fruit.id:Integer =>=>=> RelationalSchema.Column>> fruit.id PRIMARY KEY;
ClassDiagram.Attribut>> AmericaCupClass.GeneratedName:Country =>=>=> RelationalSchema.Column>> americacupclass.GeneratedName;
ClassDiagram.Attribut>> Bid.id:int =>=>=> RelationalSchema.Column>> bid.id PRIMARY KEY;
ClassDiagram.Attribut>> Bid.itemid:long =>=>=> RelationalSchema.Column>> bid.itemid;
ClassDiagram.Attribut>> Bid.amount:double =>=>=> RelationalSchema.Column>> bid.amount;
ClassDiagram.Attribut>> Item.id:long =>=>=> RelationalSchema.Column>> item.id PRIMARY KEY;
ClassDiagram.Attribut>> Item.name:String =>=>=> RelationalSchema.Column>> item.name;
ClassDiagram.Attribut>> HighestBid.name:String =>=>=> RelationalSchema.Column>> highestbid.name PRIMARY KEY;
ClassDiagram.Attribut>> HighestBid.amount:double =>=>=> RelationalSchema.Column>> highestbid.amount;
ClassDiagram.Attribut>> Location.name:String =>=>=> RelationalSchema.Column>> location.name PRIMARY KEY;
ClassDiagram.Attribut>> Addr.id:int =>=>=> RelationalSchema.Column>> addr.id PRIMARY KEY;
ClassDiagram.Attribut>> Addr.street:String =>=>=> RelationalSchema.Column>> addr.street;
ClassDiagram.Attribut>> Addr.city:String =>=>=> RelationalSchema.Column>> addr.city;
ClassDiagram.Attribut>> Addr.state:String =>=>=> RelationalSchema.Column>> addr.state;
ClassDiagram.Attribut>> Addr.country:String =>=>=> RelationalSchema.Column>> addr.country;
ClassDiagram.Attribut>> Addr.zipcode:String =>=>=> RelationalSchema.Column>> addr.zipcode;
ClassDiagram.Attribut>> Employee.id:int =>=>=> RelationalSchema.Column>> employee.id PRIMARY KEY;
ClassDiagram.Attribut>> Employee.GeneratedName:ContactInfo =>=>=> RelationalSchema.Column>> employee.GeneratedName;
ClassDiagram.Attribut>> PropertyRecord.id:Long =>=>=> RelationalSchema.Column>> propertyrecord.id PRIMARY KEY;
ClassDiagram.Attribut>> PropertyRecord.parcels:Map<Address,PropertyInfo> =>=>=> RelationalSchema.Column>> propertyrecord.parcels;
ClassDiagram.Attribut>> PropertyRecord.legacyparcels:Map<Address,PropertyInfo> =>=>=> RelationalSchema.Column>> propertyrecord.legacyparcels;
ClassDiagram.Attribut>> PropertyRecord.unsortedparcels:Set<PropertyInfo> =>=>=> RelationalSchema.Column>> propertyrecord.unsortedparcels;
ClassDiagram.Attribut>> PropertyRecord.legacyunsortedparcels:Set<PropertyInfo> =>=>=> RelationalSchema.Column>> propertyrecord.legacyunsortedparcels;
ClassDiagram.Attribut>> PhoneNumber.id:int =>=>=> RelationalSchema.Column>> phonenumber.id PRIMARY KEY;
ClassDiagram.Attribut>> PhoneNumber.number:int =>=>=> RelationalSchema.Column>> phonenumber.number;
ClassDiagram.Attribut>> BlogEntry.text:String =>=>=> RelationalSchema.Column>> blogentry.text;
ClassDiagram.Attribut>> SocialSite.id:int =>=>=> RelationalSchema.Column>> socialsite.id PRIMARY KEY;
ClassDiagram.Attribut>> SocialSite.website:String =>=>=> RelationalSchema.Column>> socialsite.website;
ClassDiagram.Attribut>> InheritedAttributeOverridingTest.GeneratedName:StandardServiceRegistry =>=>=> RelationalSchema.Column>> inheritedattributeoverridingtest.GeneratedName;
ClassDiagram.Attribut>> Version.id:Integer =>=>=> RelationalSchema.Column>> version.id PRIMARY KEY;
ClassDiagram.Attribut>> Version.codename:String =>=>=> RelationalSchema.Column>> version.codename;
ClassDiagram.Attribut>> Version.number:String =>=>=> RelationalSchema.Column>> version.number;
ClassDiagram.Attribut>> Version.GeneratedName:Software =>=>=> RelationalSchema.Column>> version.GeneratedName;
ClassDiagram.Attribut>> ExchangeOffice.id:Integer =>=>=> RelationalSchema.Column>> exchangeoffice.id PRIMARY KEY;
ClassDiagram.Attribut>> ExchangeOffice.exchangerates:Map<ExchangeRateKey,ExchangeRate> =>=>=> RelationalSchema.Column>> exchangeoffice.exchangerates;
ClassDiagram.Attribut>> ExchangeOffice.exchangeratefees:Map<ExchangeRateKey,BigDecimal> =>=>=> RelationalSchema.Column>> exchangeoffice.exchangeratefees;
ClassDiagram.Attribut>> AddressEntry.person:AddressEntryPk =>=>=> RelationalSchema.Column>> addressentry.person;
ClassDiagram.Attribut>> AddressEntry.street:String =>=>=> RelationalSchema.Column>> addressentry.street;
ClassDiagram.Attribut>> AddressEntry.city:String =>=>=> RelationalSchema.Column>> addressentry.city;
ClassDiagram.Attribut>> News.id:Integer =>=>=> RelationalSchema.Column>> news.id PRIMARY KEY;
ClassDiagram.Attribut>> News.title:String =>=>=> RelationalSchema.Column>> news.title;
ClassDiagram.Attribut>> News.detail:String =>=>=> RelationalSchema.Column>> news.detail;
ClassDiagram.Attribut>> Painter.id:Integer =>=>=> RelationalSchema.Column>> painter.id PRIMARY KEY;
ClassDiagram.Attribut>> Atmosphere.id:Integer =>=>=> RelationalSchema.Column>> atmosphere.id PRIMARY KEY;
ClassDiagram.Attribut>> Atmosphere.colorperdate:Map<Date,String> =>=>=> RelationalSchema.Column>> atmosphere.colorperdate;
ClassDiagram.Attribut>> Atmosphere.colorperlevel:Map<Level,String> =>=>=> RelationalSchema.Column>> atmosphere.colorperlevel;
ClassDiagram.Attribut>> Atmosphere.composition:Map<Gas,Double> =>=>=> RelationalSchema.Column>> atmosphere.composition;
ClassDiagram.Attribut>> Painting.sizex:int =>=>=> RelationalSchema.Column>> painting.sizex;
ClassDiagram.Attribut>> Painting.sizey:int =>=>=> RelationalSchema.Column>> painting.sizey;
ClassDiagram.Attribut>> Painting.name:String =>=>=> RelationalSchema.Column>> painting.name PRIMARY KEY;
ClassDiagram.Attribut>> Painting.painter:String =>=>=> RelationalSchema.Column>> painting.painter PRIMARY KEY;
ClassDiagram.Attribut>> Atmosphere.id:Integer =>=>=> RelationalSchema.Column>> atmosphere.id PRIMARY KEY;
ClassDiagram.Attribut>> Atmosphere.colorperdate:Map<Date,String> =>=>=> RelationalSchema.Column>> atmosphere.colorperdate;
ClassDiagram.Attribut>> Atmosphere.colorperlevel:Map<Level,String> =>=>=> RelationalSchema.Column>> atmosphere.colorperlevel;
ClassDiagram.Attribut>> Atmosphere.composition:Map<Gas,Double> =>=>=> RelationalSchema.Column>> atmosphere.composition;
ClassDiagram.Attribut>> GenerationUser.id:int =>=>=> RelationalSchema.Column>> generationuser.id PRIMARY KEY;
ClassDiagram.Attribut>> Currency.id:Integer =>=>=> RelationalSchema.Column>> currency.id PRIMARY KEY;
ClassDiagram.Attribut>> Currency.currency:String =>=>=> RelationalSchema.Column>> currency.currency;
ClassDiagram.Attribut>> Gas.id:Integer =>=>=> RelationalSchema.Column>> gas.id PRIMARY KEY;
ClassDiagram.Attribut>> Gas.name:String =>=>=> RelationalSchema.Column>> gas.name;
ClassDiagram.Attribut>> Dress.id:Integer =>=>=> RelationalSchema.Column>> dress.id PRIMARY KEY;
ClassDiagram.Attribut>> Trainee.id:Long =>=>=> RelationalSchema.Column>> trainee.id PRIMARY KEY;
ClassDiagram.Attribut>> Trainee.name:String =>=>=> RelationalSchema.Column>> trainee.name;
ClassDiagram.Attribut>> Software.name:String =>=>=> RelationalSchema.Column>> software.name PRIMARY KEY;
ClassDiagram.Attribut>> Newspaper.id:Integer =>=>=> RelationalSchema.Column>> newspaper.id PRIMARY KEY;
ClassDiagram.Attribut>> Newspaper.name:String =>=>=> RelationalSchema.Column>> newspaper.name;
ClassDiagram.Attribut>> Drawer.id:Long =>=>=> RelationalSchema.Column>> drawer.id PRIMARY KEY;
ClassDiagram.Attribut>> Training.id:Long =>=>=> RelationalSchema.Column>> training.id PRIMARY KEY;
ClassDiagram.Attribut>> GenerationGroup.id:int =>=>=> RelationalSchema.Column>> generationgroup.id PRIMARY KEY;
ClassDiagram.Attribut>> GenerationGroup.GeneratedName:Generation =>=>=> RelationalSchema.Column>> generationgroup.GeneratedName;
ClassDiagram.Attribut>> AlphabeticalDirectory.id:Integer =>=>=> RelationalSchema.Column>> alphabeticaldirectory.id PRIMARY KEY;
ClassDiagram.Attribut>> AlphabeticalDirectory.name:String =>=>=> RelationalSchema.Column>> alphabeticaldirectory.name;
ClassDiagram.Attribut>> Wardrobe.id:Long =>=>=> RelationalSchema.Column>> wardrobe.id PRIMARY KEY;
ClassDiagram.Attribut>> PressReleaseAgency.id:Integer =>=>=> RelationalSchema.Column>> pressreleaseagency.id PRIMARY KEY;
ClassDiagram.Attribut>> PressReleaseAgency.name:String =>=>=> RelationalSchema.Column>> pressreleaseagency.name;
ClassDiagram.Attribut>> AddressBook.id:Integer =>=>=> RelationalSchema.Column>> addressbook.id PRIMARY KEY;
ClassDiagram.Attribut>> AddressBook.owner:String =>=>=> RelationalSchema.Column>> addressbook.owner;
ClassDiagram.Attribut>> GasKey.name:String =>=>=> RelationalSchema.Column>> gaskey.name PRIMARY KEY;
ClassDiagram.Attribut>> ExchangeRate.id:Integer =>=>=> RelationalSchema.Column>> exchangerate.id PRIMARY KEY;
ClassDiagram.Attribut>> ExchangeRate.rate:double =>=>=> RelationalSchema.Column>> exchangerate.rate;
ClassDiagram.Attribut>> ExchangeRate.key:ExchangeRateKey =>=>=> RelationalSchema.Column>> exchangerate.key;
ClassDiagram.Attribut>> ExchangeRate.parent:ExchangeOffice =>=>=> RelationalSchema.Column>> exchangerate.parent;
ClassDiagram.Attribut>> JoinColumnOrFormulaTest.ssr:StandardServiceRegistry =>=>=> RelationalSchema.Column>> joincolumnorformulatest.ssr;
ClassDiagram.Attribut>> Person.id:PersonId =>=>=> RelationalSchema.Column>> person.id;
ClassDiagram.Attribut>> MedicalHistory.patient:Person =>=>=> RelationalSchema.Column>> medicalhistory.patient PRIMARY KEY;
ClassDiagram.Attribut>> MedicalHistory.//allattributesmaptorelationship:attributeoverridenotallowedid:PersonId =>=>=> RelationalSchema.Column>> medicalhistory.//allattributesmaptorelationship:attributeoverridenotallowedid;
ClassDiagram.Attribut>> Person.id:PersonId =>=>=> RelationalSchema.Column>> person.id;
ClassDiagram.Attribut>> Employee.id:long =>=>=> RelationalSchema.Column>> employee.id PRIMARY KEY;
ClassDiagram.Attribut>> Employee.name:String =>=>=> RelationalSchema.Column>> employee.name;
ClassDiagram.Attribut>> Dependent.name:String =>=>=> RelationalSchema.Column>> dependent.name PRIMARY KEY;
ClassDiagram.Attribut>> Dependent.emp:Employee =>=>=> RelationalSchema.Column>> dependent.emp PRIMARY KEY;
ClassDiagram.Attribut>> Employee.empid:long =>=>=> RelationalSchema.Column>> employee.empid PRIMARY KEY;
ClassDiagram.Attribut>> Employee.empname:String =>=>=> RelationalSchema.Column>> employee.empname;
ClassDiagram.Attribut>> ExclusiveDependent.id:DependentId =>=>=> RelationalSchema.Column>> exclusivedependent.id;
ClassDiagram.Attribut>> Dependent.id:DependentId =>=>=> RelationalSchema.Column>> dependent.id;
ClassDiagram.Attribut>> CustomerInventory.id:Integer =>=>=> RelationalSchema.Column>> customerinventory.id PRIMARY KEY;
ClassDiagram.Attribut>> CustomerInventory.custid:int =>=>=> RelationalSchema.Column>> customerinventory.custid PRIMARY KEY;
ClassDiagram.Attribut>> CustomerInventory.totalcost:BigDecimal =>=>=> RelationalSchema.Column>> customerinventory.totalcost;
ClassDiagram.Attribut>> CustomerInventory.quantity:int =>=>=> RelationalSchema.Column>> customerinventory.quantity;
ClassDiagram.Attribut>> CustomerInventory.version:int =>=>=> RelationalSchema.Column>> customerinventory.version;
ClassDiagram.Attribut>> Item.query_by_category:String =>=>=> RelationalSchema.Column>> item.query_by_category;
ClassDiagram.Attribut>> Item.id:String =>=>=> RelationalSchema.Column>> item.id PRIMARY KEY;
ClassDiagram.Attribut>> Item.name:String =>=>=> RelationalSchema.Column>> item.name;
ClassDiagram.Attribut>> Item.price:BigDecimal =>=>=> RelationalSchema.Column>> item.price;
ClassDiagram.Attribut>> Item.description:String =>=>=> RelationalSchema.Column>> item.description;
ClassDiagram.Attribut>> Item.discount:BigDecimal =>=>=> RelationalSchema.Column>> item.discount;
ClassDiagram.Attribut>> Item.category:int =>=>=> RelationalSchema.Column>> item.category;
ClassDiagram.Attribut>> Item.version:int =>=>=> RelationalSchema.Column>> item.version;
ClassDiagram.Attribut>> CustomerTwo.query_all:String =>=>=> RelationalSchema.Column>> customertwo.query_all;
ClassDiagram.Attribut>> CustomerTwo.query_count:String =>=>=> RelationalSchema.Column>> customertwo.query_count;
ClassDiagram.Attribut>> CustomerTwo.query_by_credit:String =>=>=> RelationalSchema.Column>> customertwo.query_by_credit;
ClassDiagram.Attribut>> CustomerTwo.bad_credit:String =>=>=> RelationalSchema.Column>> customertwo.bad_credit;
ClassDiagram.Attribut>> CustomerTwo.id:int =>=>=> RelationalSchema.Column>> customertwo.id PRIMARY KEY;
ClassDiagram.Attribut>> CustomerTwo.firstname:String =>=>=> RelationalSchema.Column>> customertwo.firstname;
ClassDiagram.Attribut>> CustomerTwo.lastname:String =>=>=> RelationalSchema.Column>> customertwo.lastname;
ClassDiagram.Attribut>> CustomerTwo.contact:String =>=>=> RelationalSchema.Column>> customertwo.contact;
ClassDiagram.Attribut>> CustomerTwo.credit:String =>=>=> RelationalSchema.Column>> customertwo.credit;
ClassDiagram.Attribut>> CustomerTwo.creditlimit:BigDecimal =>=>=> RelationalSchema.Column>> customertwo.creditlimit;
ClassDiagram.Attribut>> CustomerTwo.since:Calendar =>=>=> RelationalSchema.Column>> customertwo.since;
ClassDiagram.Attribut>> CustomerTwo.balance:BigDecimal =>=>=> RelationalSchema.Column>> customertwo.balance;
ClassDiagram.Attribut>> CustomerTwo.ytdpayment:BigDecimal =>=>=> RelationalSchema.Column>> customertwo.ytdpayment;
ClassDiagram.Attribut>> CustomerTwo.version:int =>=>=> RelationalSchema.Column>> customertwo.version;
ClassDiagram.Attribut>> CustomerInventoryTwo.id:Integer =>=>=> RelationalSchema.Column>> customerinventorytwo.id PRIMARY KEY;
ClassDiagram.Attribut>> CustomerInventoryTwo.custid:int =>=>=> RelationalSchema.Column>> customerinventorytwo.custid PRIMARY KEY;
ClassDiagram.Attribut>> CustomerInventoryTwo.totalcost:BigDecimal =>=>=> RelationalSchema.Column>> customerinventorytwo.totalcost;
ClassDiagram.Attribut>> CustomerInventoryTwo.quantity:int =>=>=> RelationalSchema.Column>> customerinventorytwo.quantity;
ClassDiagram.Attribut>> CustomerInventoryTwo.version:int =>=>=> RelationalSchema.Column>> customerinventorytwo.version;
ClassDiagram.Attribut>> Customer.query_all:String =>=>=> RelationalSchema.Column>> customer.query_all;
ClassDiagram.Attribut>> Customer.query_count:String =>=>=> RelationalSchema.Column>> customer.query_count;
ClassDiagram.Attribut>> Customer.query_by_credit:String =>=>=> RelationalSchema.Column>> customer.query_by_credit;
ClassDiagram.Attribut>> Customer.bad_credit:String =>=>=> RelationalSchema.Column>> customer.bad_credit;
ClassDiagram.Attribut>> Customer.id:int =>=>=> RelationalSchema.Column>> customer.id PRIMARY KEY;
ClassDiagram.Attribut>> Customer.firstname:String =>=>=> RelationalSchema.Column>> customer.firstname;
ClassDiagram.Attribut>> Customer.lastname:String =>=>=> RelationalSchema.Column>> customer.lastname;
ClassDiagram.Attribut>> Customer.contact:String =>=>=> RelationalSchema.Column>> customer.contact;
ClassDiagram.Attribut>> Customer.credit:String =>=>=> RelationalSchema.Column>> customer.credit;
ClassDiagram.Attribut>> Customer.creditlimit:BigDecimal =>=>=> RelationalSchema.Column>> customer.creditlimit;
ClassDiagram.Attribut>> Customer.since:Calendar =>=>=> RelationalSchema.Column>> customer.since;
ClassDiagram.Attribut>> Customer.balance:BigDecimal =>=>=> RelationalSchema.Column>> customer.balance;
ClassDiagram.Attribut>> Customer.ytdpayment:BigDecimal =>=>=> RelationalSchema.Column>> customer.ytdpayment;
ClassDiagram.Attribut>> Customer.version:int =>=>=> RelationalSchema.Column>> customer.version;
ClassDiagram.Attribut>> Employee.empid:long =>=>=> RelationalSchema.Column>> employee.empid PRIMARY KEY;
ClassDiagram.Attribut>> Employee.empname:String =>=>=> RelationalSchema.Column>> employee.empname;
ClassDiagram.Attribut>> CustomerInventory.id:Integer =>=>=> RelationalSchema.Column>> customerinventory.id PRIMARY KEY;
ClassDiagram.Attribut>> CustomerInventory.GeneratedName:Customer =>=>=> RelationalSchema.Column>> customerinventory.GeneratedName PRIMARY KEY;
ClassDiagram.Attribut>> CustomerInventory.totalcost:BigDecimal =>=>=> RelationalSchema.Column>> customerinventory.totalcost;
ClassDiagram.Attribut>> CustomerInventory.quantity:int =>=>=> RelationalSchema.Column>> customerinventory.quantity;
ClassDiagram.Attribut>> CustomerInventory.version:int =>=>=> RelationalSchema.Column>> customerinventory.version;
ClassDiagram.Attribut>> Item.query_by_category:String =>=>=> RelationalSchema.Column>> item.query_by_category;
ClassDiagram.Attribut>> Item.id:String =>=>=> RelationalSchema.Column>> item.id PRIMARY KEY;
ClassDiagram.Attribut>> Item.name:String =>=>=> RelationalSchema.Column>> item.name;
ClassDiagram.Attribut>> Item.price:BigDecimal =>=>=> RelationalSchema.Column>> item.price;
ClassDiagram.Attribut>> Item.description:String =>=>=> RelationalSchema.Column>> item.description;
ClassDiagram.Attribut>> Item.discount:BigDecimal =>=>=> RelationalSchema.Column>> item.discount;
ClassDiagram.Attribut>> Item.category:int =>=>=> RelationalSchema.Column>> item.category;
ClassDiagram.Attribut>> Item.version:int =>=>=> RelationalSchema.Column>> item.version;
ClassDiagram.Attribut>> Customer.query_all:String =>=>=> RelationalSchema.Column>> customer.query_all;
ClassDiagram.Attribut>> Customer.query_count:String =>=>=> RelationalSchema.Column>> customer.query_count;
ClassDiagram.Attribut>> Customer.query_by_credit:String =>=>=> RelationalSchema.Column>> customer.query_by_credit;
ClassDiagram.Attribut>> Customer.bad_credit:String =>=>=> RelationalSchema.Column>> customer.bad_credit;
ClassDiagram.Attribut>> Customer.id:int =>=>=> RelationalSchema.Column>> customer.id PRIMARY KEY;
ClassDiagram.Attribut>> Customer.firstname:String =>=>=> RelationalSchema.Column>> customer.firstname;
ClassDiagram.Attribut>> Customer.lastname:String =>=>=> RelationalSchema.Column>> customer.lastname;
ClassDiagram.Attribut>> Customer.contact:String =>=>=> RelationalSchema.Column>> customer.contact;
ClassDiagram.Attribut>> Customer.credit:String =>=>=> RelationalSchema.Column>> customer.credit;
ClassDiagram.Attribut>> Customer.creditlimit:BigDecimal =>=>=> RelationalSchema.Column>> customer.creditlimit;
ClassDiagram.Attribut>> Customer.since:Calendar =>=>=> RelationalSchema.Column>> customer.since;
ClassDiagram.Attribut>> Customer.balance:BigDecimal =>=>=> RelationalSchema.Column>> customer.balance;
ClassDiagram.Attribut>> Customer.ytdpayment:BigDecimal =>=>=> RelationalSchema.Column>> customer.ytdpayment;
ClassDiagram.Attribut>> Customer.version:int =>=>=> RelationalSchema.Column>> customer.version;
ClassDiagram.Attribut>> Dependent.name:String =>=>=> RelationalSchema.Column>> dependent.name PRIMARY KEY;
ClassDiagram.Attribut>> Dependent.//idattributemappedbyjoincolumndefaultemp:Employee =>=>=> RelationalSchema.Column>> dependent.//idattributemappedbyjoincolumndefaultemp;
ClassDiagram.Attribut>> Employee.empid:long =>=>=> RelationalSchema.Column>> employee.empid PRIMARY KEY;
ClassDiagram.Attribut>> Employee.empname:String =>=>=> RelationalSchema.Column>> employee.empname;
ClassDiagram.Attribut>> Employee.nickname:String =>=>=> RelationalSchema.Column>> employee.nickname;
ClassDiagram.Attribut>> Person.id:Integer =>=>=> RelationalSchema.Column>> person.id PRIMARY KEY;
ClassDiagram.Attribut>> MedicalHistory.id:Integer =>=>=> RelationalSchema.Column>> medicalhistory.id PRIMARY KEY;
ClassDiagram.Attribut>> MedicalHistory.//allattributesmaptorelationship:attributeoverridenotallowedid:PersonId =>=>=> RelationalSchema.Column>> medicalhistory.//allattributesmaptorelationship:attributeoverridenotallowedid;
ClassDiagram.Attribut>> Person.firstname:String =>=>=> RelationalSchema.Column>> person.firstname PRIMARY KEY;
ClassDiagram.Attribut>> Person.lastname:String =>=>=> RelationalSchema.Column>> person.lastname PRIMARY KEY;
ClassDiagram.Attribut>> MedicalHistory.patient:Person =>=>=> RelationalSchema.Column>> medicalhistory.patient PRIMARY KEY;
ClassDiagram.Attribut>> Person.firstname:String =>=>=> RelationalSchema.Column>> person.firstname PRIMARY KEY;
ClassDiagram.Attribut>> Person.lastname:String =>=>=> RelationalSchema.Column>> person.lastname PRIMARY KEY;
ClassDiagram.Attribut>> Person.serialversionuid:long =>=>=> RelationalSchema.Column>> person.serialversionuid;
ClassDiagram.Attribut>> Person.id:Integer =>=>=> RelationalSchema.Column>> person.id PRIMARY KEY;
ClassDiagram.Attribut>> Person.name:String =>=>=> RelationalSchema.Column>> person.name;
ClassDiagram.Attribut>> Employee.empid:long =>=>=> RelationalSchema.Column>> employee.empid PRIMARY KEY;
ClassDiagram.Attribut>> Employee.empname:String =>=>=> RelationalSchema.Column>> employee.empname;
ClassDiagram.Attribut>> Product.id:Long =>=>=> RelationalSchema.Column>> product.id PRIMARY KEY;
ClassDiagram.Attribut>> Product.name:String =>=>=> RelationalSchema.Column>> product.name;
ClassDiagram.Attribut>> Bar.GeneratedName:Foo =>=>=> RelationalSchema.Column>> bar.GeneratedName PRIMARY KEY;
ClassDiagram.Attribut>> Bar.details:String =>=>=> RelationalSchema.Column>> bar.details;
ClassDiagram.Attribut>> Foo.id:Long =>=>=> RelationalSchema.Column>> foo.id PRIMARY KEY;
ClassDiagram.Attribut>> Foo.name:String =>=>=> RelationalSchema.Column>> foo.name;
ClassDiagram.Attribut>> PersonInfo.serialversionuid:long =>=>=> RelationalSchema.Column>> personinfo.serialversionuid;
ClassDiagram.Attribut>> PersonInfo.id:Person =>=>=> RelationalSchema.Column>> personinfo.id PRIMARY KEY;
ClassDiagram.Attribut>> PersonInfo.info:String =>=>=> RelationalSchema.Column>> personinfo.info;
ClassDiagram.Attribut>> OrderLine.GeneratedName:Order =>=>=> RelationalSchema.Column>> orderline.GeneratedName PRIMARY KEY;
ClassDiagram.Attribut>> OrderLine.GeneratedName:Product =>=>=> RelationalSchema.Column>> orderline.GeneratedName PRIMARY KEY;
ClassDiagram.Attribut>> OrderLine.amount:Integer =>=>=> RelationalSchema.Column>> orderline.amount;
ClassDiagram.Attribut>> Dependent.emp:Employee =>=>=> RelationalSchema.Column>> dependent.emp PRIMARY KEY;
ClassDiagram.Attribut>> Dependent.name:String =>=>=> RelationalSchema.Column>> dependent.name;
ClassDiagram.Attribut>> Order.id:Long =>=>=> RelationalSchema.Column>> order.id PRIMARY KEY;
ClassDiagram.Attribut>> Order.name:String =>=>=> RelationalSchema.Column>> order.name;
ClassDiagram.Attribut>> Dependent.//idattributemappedbyjoincolumndefaultid:DependentId =>=>=> RelationalSchema.Column>> dependent.//idattributemappedbyjoincolumndefaultid;
ClassDiagram.Attribut>> Dependent.id:DependentId =>=>=> RelationalSchema.Column>> dependent.id;
ClassDiagram.Attribut>> Employee.firstname:String =>=>=> RelationalSchema.Column>> employee.firstname PRIMARY KEY;
ClassDiagram.Attribut>> Employee.lastname:String =>=>=> RelationalSchema.Column>> employee.lastname PRIMARY KEY;
ClassDiagram.Attribut>> Dependent.name:String =>=>=> RelationalSchema.Column>> dependent.name PRIMARY KEY;
ClassDiagram.Attribut>> Dependent.emp:Employee =>=>=> RelationalSchema.Column>> dependent.emp PRIMARY KEY;
ClassDiagram.Attribut>> Employee.firstname:String =>=>=> RelationalSchema.Column>> employee.firstname PRIMARY KEY;
ClassDiagram.Attribut>> Employee.lastname:String =>=>=> RelationalSchema.Column>> employee.lastname PRIMARY KEY;
ClassDiagram.Attribut>> Employee.empid:EmployeeId =>=>=> RelationalSchema.Column>> employee.empid;
ClassDiagram.Attribut>> Dependent.id:DependentId =>=>=> RelationalSchema.Column>> dependent.id;
ClassDiagram.Attribut>> Policy.id:PolicyId =>=>=> RelationalSchema.Column>> policy.id;
ClassDiagram.Attribut>> Dependent.//defaultcolumnnamefor"name"attributeisoverriddenid:DependentId =>=>=> RelationalSchema.Column>> dependent.//defaultcolumnnamefor"name"attributeisoverriddenid;
ClassDiagram.Attribut>> Employee.empid:EmployeeId =>=>=> RelationalSchema.Column>> employee.empid;
ClassDiagram.Attribut>> Employee.empid:EmployeeId =>=>=> RelationalSchema.Column>> employee.empid;
ClassDiagram.Attribut>> Dependent.//defaultcolumnnameisoverriddenname:String =>=>=> RelationalSchema.Column>> dependent.//defaultcolumnnameisoverriddenname PRIMARY KEY;
ClassDiagram.Attribut>> Dependent.emp:Employee =>=>=> RelationalSchema.Column>> dependent.emp PRIMARY KEY;
ClassDiagram.Attribut>> Policy.id:PolicyId =>=>=> RelationalSchema.Column>> policy.id;
ClassDiagram.Attribut>> Dependent.id:DependentId =>=>=> RelationalSchema.Column>> dependent.id;
ClassDiagram.Attribut>> Employee.empid:EmployeeId =>=>=> RelationalSchema.Column>> employee.empid;
ClassDiagram.Attribut>> Person.ssn:String =>=>=> RelationalSchema.Column>> person.ssn PRIMARY KEY;
ClassDiagram.Attribut>> MedicalHistory.patient:Person =>=>=> RelationalSchema.Column>> medicalhistory.patient PRIMARY KEY;
ClassDiagram.Attribut>> MedicalHistory.xraydata:byte =>=>=> RelationalSchema.Column>> medicalhistory.xraydata;
ClassDiagram.Attribut>> Person.ssn:String =>=>=> RelationalSchema.Column>> person.ssn PRIMARY KEY;
ClassDiagram.Attribut>> MedicalHistory.//overridingnotallowed...//defaultjoincolumnnameisoverridden@mapsidid:String =>=>=> RelationalSchema.Column>> medicalhistory.//overridingnotallowed...//defaultjoincolumnnameisoverridden@mapsidid PRIMARY KEY;
ClassDiagram.Attribut>> MedicalHistory.lastup:Date =>=>=> RelationalSchema.Column>> medicalhistory.lastup;
ClassDiagram.Attribut>> FinancialHistory.//overridingnotallowed...//defaultjoincolumnnameisoverridden@mapsidid:String =>=>=> RelationalSchema.Column>> financialhistory.//overridingnotallowed...//defaultjoincolumnnameisoverridden@mapsidid PRIMARY KEY;
ClassDiagram.Attribut>> FinancialHistory.lastup:Date =>=>=> RelationalSchema.Column>> financialhistory.lastup;
ClassDiagram.Attribut>> MedicalHistory.patient:Person =>=>=> RelationalSchema.Column>> medicalhistory.patient PRIMARY KEY;
ClassDiagram.Attribut>> MedicalHistory.lastup:Date =>=>=> RelationalSchema.Column>> medicalhistory.lastup;
ClassDiagram.Attribut>> FinancialHistory.patient:Person =>=>=> RelationalSchema.Column>> financialhistory.patient PRIMARY KEY;
ClassDiagram.Attribut>> FinancialHistory.lastup:Date =>=>=> RelationalSchema.Column>> financialhistory.lastup;
ClassDiagram.Attribut>> Person.ssn:String =>=>=> RelationalSchema.Column>> person.ssn PRIMARY KEY;
ClassDiagram.Attribut>> Simple.ssn:String =>=>=> RelationalSchema.Column>> simple.ssn PRIMARY KEY;
ClassDiagram.Attribut>> Simple.name:String =>=>=> RelationalSchema.Column>> simple.name PRIMARY KEY;
ClassDiagram.Attribut>> Employer.name:String =>=>=> RelationalSchema.Column>> employer.name PRIMARY KEY;
ClassDiagram.Attribut>> Employer.GeneratedName:Employee =>=>=> RelationalSchema.Column>> employer.GeneratedName PRIMARY KEY;
ClassDiagram.Attribut>> BigBed.size:int =>=>=> RelationalSchema.Column>> bigbed.size;
ClassDiagram.Attribut>> Course2.id:long =>=>=> RelationalSchema.Column>> course2.id PRIMARY KEY;
ClassDiagram.Attribut>> Course2.title:String =>=>=> RelationalSchema.Column>> course2.title;
ClassDiagram.Attribut>> Horse.name:String =>=>=> RelationalSchema.Column>> horse.name;
ClassDiagram.Attribut>> Course6.id:long =>=>=> RelationalSchema.Column>> course6.id PRIMARY KEY;
ClassDiagram.Attribut>> Course6.title:String =>=>=> RelationalSchema.Column>> course6.title;
ClassDiagram.Attribut>> Shape.id:long =>=>=> RelationalSchema.Column>> shape.id PRIMARY KEY;
ClassDiagram.Attribut>> Gardenshed.id:Integer =>=>=> RelationalSchema.Column>> gardenshed.id PRIMARY KEY;
ClassDiagram.Attribut>> Gardenshed.brand:String =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> Gardenshed.floors:long =>=>=> RelationalSchema.Column>> gardenshed.floors;
ClassDiagram.Attribut>> Person.firstname:String =>=>=> RelationalSchema.Column>> person.firstname;
ClassDiagram.Attribut>> Person.lastname:String =>=>=> RelationalSchema.Column>> person.lastname;
ClassDiagram.Attribut>> Course3.id:long =>=>=> RelationalSchema.Column>> course3.id PRIMARY KEY;
ClassDiagram.Attribut>> Course3.title:String =>=>=> RelationalSchema.Column>> course3.title;
ClassDiagram.Attribut>> Circle.GeneratedName:Color =>=>=> RelationalSchema.Column>> circle.GeneratedName;
ClassDiagram.Attribut>> Animal.id:long =>=>=> RelationalSchema.Column>> animal.id PRIMARY KEY;
ClassDiagram.Attribut>> Furniture.id:Integer =>=>=> RelationalSchema.Column>> furniture.id PRIMARY KEY;
ClassDiagram.Attribut>> Furniture.brand:String =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> Furniture.weight:long =>=>=> RelationalSchema.Column>> furniture.weight;
ClassDiagram.Attribut>> Course7.id:long =>=>=> RelationalSchema.Column>> course7.id PRIMARY KEY;
ClassDiagram.Attribut>> Course7.title:String =>=>=> RelationalSchema.Column>> course7.title;
ClassDiagram.Attribut>> Chair.pillow:String =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> Course1.id:long =>=>=> RelationalSchema.Column>> course1.id PRIMARY KEY;
ClassDiagram.Attribut>> Course1.title:String =>=>=> RelationalSchema.Column>> course1.title;
ClassDiagram.Attribut>> Course5.id:long =>=>=> RelationalSchema.Column>> course5.id PRIMARY KEY;
ClassDiagram.Attribut>> Course5.title:String =>=>=> RelationalSchema.Column>> course5.title;
ClassDiagram.Attribut>> Bed.quality:String =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> Student.id:long =>=>=> RelationalSchema.Column>> student.id PRIMARY KEY;
ClassDiagram.Attribut>> Student.name:String =>=>=> RelationalSchema.Column>> student.name;
ClassDiagram.Attribut>> Course4.id:long =>=>=> RelationalSchema.Column>> course4.id PRIMARY KEY;
ClassDiagram.Attribut>> Course4.title:String =>=>=> RelationalSchema.Column>> course4.title;
ClassDiagram.Attribut>> BigBed.size:int =>=>=> RelationalSchema.Column>> bigbed.size;
ClassDiagram.Attribut>> Square.id:long =>=>=> RelationalSchema.Column>> square.id PRIMARY KEY;
ClassDiagram.Attribut>> Square.GeneratedName:Position =>=>=> RelationalSchema.Column>> square.GeneratedName;
ClassDiagram.Attribut>> Course8.id:long =>=>=> RelationalSchema.Column>> course8.id PRIMARY KEY;
ClassDiagram.Attribut>> Course8.title:String =>=>=> RelationalSchema.Column>> course8.title;
ClassDiagram.Attribut>> Being.id:long =>=>=> RelationalSchema.Column>> being.id PRIMARY KEY;
ClassDiagram.Attribut>> Driver.id:int =>=>=> RelationalSchema.Column>> driver.id PRIMARY KEY;
ClassDiagram.Attribut>> Driver.name:String =>=>=> RelationalSchema.Column>> driver.name;
ClassDiagram.Attribut>> RentalCar.id:int =>=>=> RelationalSchema.Column>> rentalcar.id PRIMARY KEY;
ClassDiagram.Attribut>> RentalCar.GeneratedName:Driver =>=>=> RelationalSchema.Column>> rentalcar.GeneratedName;
ClassDiagram.Attribut>> Boy.id:long =>=>=> RelationalSchema.Column>> boy.id PRIMARY KEY;
ClassDiagram.Attribut>> Boy.nicknames:Set<String> =>=>=> RelationalSchema.Column>> boy.nicknames;
ClassDiagram.Attribut>> Cook.id:int =>=>=> RelationalSchema.Column>> cook.id PRIMARY KEY;
ClassDiagram.Attribut>> Cook.favouriteknife:Knive =>=>=> RelationalSchema.Column>> cook.favouriteknife;
ClassDiagram.Attribut>> Tourist.id:long =>=>=> RelationalSchema.Column>> tourist.id PRIMARY KEY;
ClassDiagram.Attribut>> Tourist.name:String =>=>=> RelationalSchema.Column>> tourist.name;
ClassDiagram.Attribut>> Tourist.destination:String =>=>=> RelationalSchema.Column>> tourist.destination;
ClassDiagram.Attribut>> Bed.quality:String =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> Foobar.foo:String =>=>=> RelationalSchema.Column>> foobar.foo;
ClassDiagram.Attribut>> Gardenshed.id:Integer =>=>=> RelationalSchema.Column>> gardenshed.id PRIMARY KEY;
ClassDiagram.Attribut>> Gardenshed.brand:String =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> Gardenshed.floors:long =>=>=> RelationalSchema.Column>> gardenshed.floors;
ClassDiagram.Attribut>> AttributeAccessorTest.GeneratedName:ServiceRegistry =>=>=> RelationalSchema.Column>> attributeaccessortest.GeneratedName;
ClassDiagram.Attribut>> Chair.pillow:String =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> Furniture.id:Integer =>=>=> RelationalSchema.Column>> furniture.id PRIMARY KEY;
ClassDiagram.Attribut>> Furniture.brand:String =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> Furniture.weight:long =>=>=> RelationalSchema.Column>> furniture.weight;
ClassDiagram.Attribut>> Company.id:Integer =>=>=> RelationalSchema.Column>> company.id PRIMARY KEY;
ClassDiagram.Attribut>> Company.name:String =>=>=> RelationalSchema.Column>> company.name;
ClassDiagram.Attribut>> Vehicule.id:String =>=>=> RelationalSchema.Column>> vehicule.id PRIMARY KEY;
ClassDiagram.Attribut>> Vehicule.registrationnumber:String =>=>=> RelationalSchema.Column>> vehicule.registrationnumber;
ClassDiagram.Attribut>> Vehicule.year:Integer =>=>=> RelationalSchema.Column>> vehicule.year;
ClassDiagram.Attribut>> Truck.weight:int =>=>=> RelationalSchema.Column>> truck.weight;
ClassDiagram.Attribut>> Antenna.id:Integer =>=>=> RelationalSchema.Column>> antenna.id PRIMARY KEY;
ClassDiagram.Attribut>> Antenna.longitude:String =>=>=> RelationalSchema.Column>> antenna.longitude;
ClassDiagram.Attribut>> Antenna.latitude:String =>=>=> RelationalSchema.Column>> antenna.latitude;
ClassDiagram.Attribut>> Antenna.power:Double =>=>=> RelationalSchema.Column>> antenna.power;
ClassDiagram.Attribut>> VMTimestamped.id:int =>=>=> RelationalSchema.Column>> vmtimestamped.id PRIMARY KEY;
ClassDiagram.Attribut>> VMTimestamped.lastup:Date =>=>=> RelationalSchema.Column>> vmtimestamped.lastup;
ClassDiagram.Attribut>> Conductor.id:Integer =>=>=> RelationalSchema.Column>> conductor.id PRIMARY KEY;
ClassDiagram.Attribut>> Conductor.name:String =>=>=> RelationalSchema.Column>> conductor.name;
ClassDiagram.Attribut>> Conductor.version:Long =>=>=> RelationalSchema.Column>> conductor.version;
ClassDiagram.Attribut>> ProfessionalAgreement.id:Integer =>=>=> RelationalSchema.Column>> professionalagreement.id PRIMARY KEY;
ClassDiagram.Attribut>> ProfessionalAgreement.expiration:Date =>=>=> RelationalSchema.Column>> professionalagreement.expiration;
ClassDiagram.Attribut>> DBTimestamped.id:int =>=>=> RelationalSchema.Column>> dbtimestamped.id PRIMARY KEY;
ClassDiagram.Attribut>> DBTimestamped.lastup:Date =>=>=> RelationalSchema.Column>> dbtimestamped.lastup;
ClassDiagram.Attribut>> Staff.id:Integer =>=>=> RelationalSchema.Column>> staff.id PRIMARY KEY;
ClassDiagram.Attribut>> Staff.sizeininches:double =>=>=> RelationalSchema.Column>> staff.sizeininches;
ClassDiagram.Attribut>> Staff.radiuss:double =>=>=> RelationalSchema.Column>> staff.radiuss;
ClassDiagram.Attribut>> Staff.diameter:double =>=>=> RelationalSchema.Column>> staff.diameter;
ClassDiagram.Attribut>> Country.id:Integer =>=>=> RelationalSchema.Column>> country.id PRIMARY KEY;
ClassDiagram.Attribut>> Country.name:String =>=>=> RelationalSchema.Column>> country.name;
ClassDiagram.Attribut>> Plane.id:Long =>=>=> RelationalSchema.Column>> plane.id PRIMARY KEY;
ClassDiagram.Attribut>> Plane.nbrofseats:int =>=>=> RelationalSchema.Column>> plane.nbrofseats;
ClassDiagram.Attribut>> Player.id:Long =>=>=> RelationalSchema.Column>> player.id PRIMARY KEY;
ClassDiagram.Attribut>> Player.GeneratedName:Team =>=>=> RelationalSchema.Column>> player.GeneratedName;
ClassDiagram.Attribut>> Player.name:String =>=>=> RelationalSchema.Column>> player.name;
ClassDiagram.Attribut>> Team.id:Long =>=>=> RelationalSchema.Column>> team.id PRIMARY KEY;
ClassDiagram.Attribut>> Model.id:Integer =>=>=> RelationalSchema.Column>> model.id PRIMARY KEY;
ClassDiagram.Attribut>> Street.id:Integer =>=>=> RelationalSchema.Column>> street.id PRIMARY KEY;
ClassDiagram.Attribut>> Street.streetname:String =>=>=> RelationalSchema.Column>> street.streetname;
ClassDiagram.Attribut>> Street.streetnamecopy:String =>=>=> RelationalSchema.Column>> street.streetnamecopy;
ClassDiagram.Attribut>> Street.GeneratedName:City =>=>=> RelationalSchema.Column>> street.GeneratedName;
ClassDiagram.Attribut>> Politician.name:String =>=>=> RelationalSchema.Column>> politician.name PRIMARY KEY;
ClassDiagram.Attribut>> Box.id:int =>=>=> RelationalSchema.Column>> box.id PRIMARY KEY;
ClassDiagram.Attribut>> A.id:Long =>=>=> RelationalSchema.Column>> a.id PRIMARY KEY;
ClassDiagram.Attribut>> A.name:String =>=>=> RelationalSchema.Column>> a.name;
ClassDiagram.Attribut>> Parent.id:ParentPk =>=>=> RelationalSchema.Column>> parent.id PRIMARY KEY;
ClassDiagram.Attribut>> Parent.age:int =>=>=> RelationalSchema.Column>> parent.age;
ClassDiagram.Attribut>> Soldier.id:Integer =>=>=> RelationalSchema.Column>> soldier.id PRIMARY KEY;
ClassDiagram.Attribut>> Soldier.name:String =>=>=> RelationalSchema.Column>> soldier.name;
ClassDiagram.Attribut>> Soldier.GeneratedName:Troop =>=>=> RelationalSchema.Column>> soldier.GeneratedName;
ClassDiagram.Attribut>> City.id:Integer =>=>=> RelationalSchema.Column>> city.id PRIMARY KEY;
ClassDiagram.Attribut>> City.name:String =>=>=> RelationalSchema.Column>> city.name;
ClassDiagram.Attribut>> BankAccount.id:long =>=>=> RelationalSchema.Column>> bankaccount.id PRIMARY KEY;
ClassDiagram.Attribut>> Visitor.id:Long =>=>=> RelationalSchema.Column>> visitor.id PRIMARY KEY;
ClassDiagram.Attribut>> Visitor.firstname:String =>=>=> RelationalSchema.Column>> visitor.firstname;
ClassDiagram.Attribut>> Visitor.lastname:String =>=>=> RelationalSchema.Column>> visitor.lastname;
ClassDiagram.Attribut>> Order.schoolid:String =>=>=> RelationalSchema.Column>> order.schoolid PRIMARY KEY;
ClassDiagram.Attribut>> Order.schoolidsort:Integer =>=>=> RelationalSchema.Column>> order.schoolidsort;
ClassDiagram.Attribut>> Order.academicyear:Integer =>=>=> RelationalSchema.Column>> order.academicyear PRIMARY KEY;
ClassDiagram.Attribut>> Comment.id:Long =>=>=> RelationalSchema.Column>> comment.id PRIMARY KEY;
ClassDiagram.Attribut>> Comment.GeneratedName:Post =>=>=> RelationalSchema.Column>> comment.GeneratedName;
ClassDiagram.Attribut>> Comment.name:String =>=>=> RelationalSchema.Column>> comment.name;
ClassDiagram.Attribut>> Comment.GeneratedName:Forum =>=>=> RelationalSchema.Column>> comment.GeneratedName;
ClassDiagram.Attribut>> Child.id:Integer =>=>=> RelationalSchema.Column>> child.id PRIMARY KEY;
ClassDiagram.Attribut>> Child.favoritesuperhero:String =>=>=> RelationalSchema.Column>> child.favoritesuperhero;
ClassDiagram.Attribut>> Child.favoritesinger:String =>=>=> RelationalSchema.Column>> child.favoritesinger;
ClassDiagram.Attribut>> Troop.id:Integer =>=>=> RelationalSchema.Column>> troop.id PRIMARY KEY;
ClassDiagram.Attribut>> Troop.name:String =>=>=> RelationalSchema.Column>> troop.name;
ClassDiagram.Attribut>> Employee.id:Integer =>=>=> RelationalSchema.Column>> employee.id PRIMARY KEY;
ClassDiagram.Attribut>> Asset.idasset:Integer =>=>=> RelationalSchema.Column>> asset.idasset PRIMARY KEY;
ClassDiagram.Attribut>> Asset.test:Integer =>=>=> RelationalSchema.Column>> asset.test PRIMARY KEY;
ClassDiagram.Attribut>> Person.idperson:Long =>=>=> RelationalSchema.Column>> person.idperson PRIMARY KEY;
ClassDiagram.Attribut>> Person.firstname,lastname:String =>=>=> RelationalSchema.Column>> person.firstname,lastname;
ClassDiagram.Attribut>> OrderItem.schoolid:String =>=>=> RelationalSchema.Column>> orderitem.schoolid PRIMARY KEY;
ClassDiagram.Attribut>> OrderItem.academicyear:Integer =>=>=> RelationalSchema.Column>> orderitem.academicyear PRIMARY KEY;
ClassDiagram.Attribut>> OrderItem.dayno:Integer =>=>=> RelationalSchema.Column>> orderitem.dayno PRIMARY KEY;
ClassDiagram.Attribut>> OrderItem.dayname:String =>=>=> RelationalSchema.Column>> orderitem.dayname;
ClassDiagram.Attribut>> OrderItem.GeneratedName:Order =>=>=> RelationalSchema.Column>> orderitem.GeneratedName;
ClassDiagram.Attribut>> User.id:Long =>=>=> RelationalSchema.Column>> user.id PRIMARY KEY;
ClassDiagram.Attribut>> User.name:String =>=>=> RelationalSchema.Column>> user.name;
ClassDiagram.Attribut>> User.GeneratedName:Forum =>=>=> RelationalSchema.Column>> user.GeneratedName;
ClassDiagram.Attribut>> Tiger.id:Integer =>=>=> RelationalSchema.Column>> tiger.id PRIMARY KEY;
ClassDiagram.Attribut>> Tiger.name:String =>=>=> RelationalSchema.Column>> tiger.name;
ClassDiagram.Attribut>> PoliticalParty.name:String =>=>=> RelationalSchema.Column>> politicalparty.name PRIMARY KEY;
ClassDiagram.Attribut>> B.id:Long =>=>=> RelationalSchema.Column>> b.id PRIMARY KEY;
ClassDiagram.Attribut>> B.name:String =>=>=> RelationalSchema.Column>> b.name;
ClassDiagram.Attribut>> Zoo.id:Long =>=>=> RelationalSchema.Column>> zoo.id PRIMARY KEY;
ClassDiagram.Attribut>> Zoo.name:String =>=>=> RelationalSchema.Column>> zoo.name;
ClassDiagram.Attribut>> Monkey.id:Integer =>=>=> RelationalSchema.Column>> monkey.id PRIMARY KEY;
ClassDiagram.Attribut>> Monkey.name:String =>=>=> RelationalSchema.Column>> monkey.name;
ClassDiagram.Attribut>> Computer.computername:String =>=>=> RelationalSchema.Column>> computer.computername;
ClassDiagram.Attribut>> Transaction.id:long =>=>=> RelationalSchema.Column>> transaction.id PRIMARY KEY;
ClassDiagram.Attribut>> Transaction.code:String =>=>=> RelationalSchema.Column>> transaction.code;
ClassDiagram.Attribut>> Item.id:int =>=>=> RelationalSchema.Column>> item.id PRIMARY KEY;
ClassDiagram.Attribut>> Item.code:String =>=>=> RelationalSchema.Column>> item.code;
ClassDiagram.Attribut>> Item.sortfield:int =>=>=> RelationalSchema.Column>> item.sortfield;
ClassDiagram.Attribut>> C.id:Long =>=>=> RelationalSchema.Column>> c.id PRIMARY KEY;
ClassDiagram.Attribut>> C.name:String =>=>=> RelationalSchema.Column>> c.name;
ClassDiagram.Attribut>> Forum.id:Long =>=>=> RelationalSchema.Column>> forum.id PRIMARY KEY;
ClassDiagram.Attribut>> Forum.name:String =>=>=> RelationalSchema.Column>> forum.name;
ClassDiagram.Attribut>> Organisation.idorganisation:Long =>=>=> RelationalSchema.Column>> organisation.idorganisation PRIMARY KEY;
ClassDiagram.Attribut>> Organisation.name:String =>=>=> RelationalSchema.Column>> organisation.name;
ClassDiagram.Attribut>> OrganisationUser.sometext:String =>=>=> RelationalSchema.Column>> organisationuser.sometext;
ClassDiagram.Attribut>> OrganisationUser.GeneratedName:Organisation =>=>=> RelationalSchema.Column>> organisationuser.GeneratedName;
ClassDiagram.Attribut>> Trainer.id:Integer =>=>=> RelationalSchema.Column>> trainer.id PRIMARY KEY;
ClassDiagram.Attribut>> Trainer.name:String =>=>=> RelationalSchema.Column>> trainer.name;
ClassDiagram.Attribut>> Contest.id:int =>=>=> RelationalSchema.Column>> contest.id PRIMARY KEY;
ClassDiagram.Attribut>> Contest.heldin:Month =>=>=> RelationalSchema.Column>> contest.heldin;
ClassDiagram.Attribut>> Competitor.id:int =>=>=> RelationalSchema.Column>> competitor.id PRIMARY KEY;
ClassDiagram.Attribut>> Competitor.name:String =>=>=> RelationalSchema.Column>> competitor.name;
ClassDiagram.Attribut>> Person.//memberdeclarationid:int =>=>=> RelationalSchema.Column>> person.//memberdeclarationid;
ClassDiagram.Attribut>> Person.firstname:String =>=>=> RelationalSchema.Column>> person.firstname;
ClassDiagram.Attribut>> Person.lastname:String =>=>=> RelationalSchema.Column>> person.lastname;
ClassDiagram.Attribut>> Person.companyname:String =>=>=> RelationalSchema.Column>> person.companyname;
ClassDiagram.Attribut>> Branch.id:Integer =>=>=> RelationalSchema.Column>> branch.id PRIMARY KEY;
ClassDiagram.Attribut>> Leaf.id:Integer =>=>=> RelationalSchema.Column>> leaf.id PRIMARY KEY;
ClassDiagram.Attribut>> Stay.//memberdeclarationid:int =>=>=> RelationalSchema.Column>> stay.//memberdeclarationid;
ClassDiagram.Attribut>> Stay.GeneratedName:Person =>=>=> RelationalSchema.Column>> stay.GeneratedName;
ClassDiagram.Attribut>> Stay.old:Person =>=>=> RelationalSchema.Column>> stay.old;
ClassDiagram.Attribut>> Stay.veryold:Person =>=>=> RelationalSchema.Column>> stay.veryold;
ClassDiagram.Attribut>> Stay.start:Date =>=>=> RelationalSchema.Column>> stay.start;
ClassDiagram.Attribut>> Stay.end:Date =>=>=> RelationalSchema.Column>> stay.end;
ClassDiagram.Attribut>> Stay.vessel:String =>=>=> RelationalSchema.Column>> stay.vessel;
ClassDiagram.Attribut>> Stay.authoriser:String =>=>=> RelationalSchema.Column>> stay.authoriser;
ClassDiagram.Attribut>> Stay.comments:String =>=>=> RelationalSchema.Column>> stay.comments;
ClassDiagram.Attribut>> T800.targetname:String =>=>=> RelationalSchema.Column>> t800.targetname;
ClassDiagram.Attribut>> Machine.id:Integer =>=>=> RelationalSchema.Column>> machine.id PRIMARY KEY;
ClassDiagram.Attribut>> Machine.weight:Double =>=>=> RelationalSchema.Column>> machine.weight;
ClassDiagram.Attribut>> Component.manufacturerpartnumber:String =>=>=> RelationalSchema.Column>> component.manufacturerpartnumber;
ClassDiagram.Attribut>> Component.manufacturerid:Long =>=>=> RelationalSchema.Column>> component.manufacturerid;
ClassDiagram.Attribut>> Component.id:Long =>=>=> RelationalSchema.Column>> component.id PRIMARY KEY;
ClassDiagram.Attribut>> Robot.name:String =>=>=> RelationalSchema.Column>> robot.name;
ClassDiagram.Attribut>> Deck.id:Integer =>=>=> RelationalSchema.Column>> deck.id PRIMARY KEY;
ClassDiagram.Attribut>> Card.id:Integer =>=>=> RelationalSchema.Column>> card.id PRIMARY KEY;
ClassDiagram.Attribut>> Discount.id:Long =>=>=> RelationalSchema.Column>> discount.id PRIMARY KEY;
ClassDiagram.Attribut>> Discount.discount:double =>=>=> RelationalSchema.Column>> discount.discount;
ClassDiagram.Attribut>> SomeOtherEntity.id:int =>=>=> RelationalSchema.Column>> someotherentity.id PRIMARY KEY;
ClassDiagram.Attribut>> SomeOtherEntity.data:boolean =>=>=> RelationalSchema.Column>> someotherentity.data;
ClassDiagram.Attribut>> SomeOtherEntity.data:byte =>=>=> RelationalSchema.Column>> someotherentity.data;
ClassDiagram.Attribut>> SomeOtherEntity.//settingaarbitraryacterheretomakethistestalsopassagainstpostgresql//postgresqlthrowsotherwiseanexceptionwhenpersistingthenullvalue//org.postgresql.util.psqlexception:error:invalidbytesequenceforencoding"utf8":0x00acterdata:char =>=>=> RelationalSchema.Column>> someotherentity.//settingaarbitraryacterheretomakethistestalsopassagainstpostgresql//postgresqlthrowsotherwiseanexceptionwhenpersistingthenullvalue//org.postgresql.util.psqlexception:error:invalidbytesequenceforencoding"utf8":0x00acterdata;
ClassDiagram.Attribut>> SomeOtherEntity.data:short =>=>=> RelationalSchema.Column>> someotherentity.data;
ClassDiagram.Attribut>> SomeOtherEntity.egerdata:int =>=>=> RelationalSchema.Column>> someotherentity.egerdata;
ClassDiagram.Attribut>> SomeOtherEntity.data:long =>=>=> RelationalSchema.Column>> someotherentity.data;
ClassDiagram.Attribut>> SomeOtherEntity.data:double =>=>=> RelationalSchema.Column>> someotherentity.data;
ClassDiagram.Attribut>> SomeOtherEntity.data:float =>=>=> RelationalSchema.Column>> someotherentity.data;
ClassDiagram.Attribut>> SomeOtherEntity.GeneratedName:Grade =>=>=> RelationalSchema.Column>> someotherentity.GeneratedName;
ClassDiagram.Attribut>> SomeEntity.id:java.util.Date =>=>=> RelationalSchema.Column>> someentity.id PRIMARY KEY;
ClassDiagram.Attribut>> SomeEntity.timedata:java.sql.Time =>=>=> RelationalSchema.Column>> someentity.timedata;
ClassDiagram.Attribut>> SomeEntity.tsdata:java.sql.Timestamp =>=>=> RelationalSchema.Column>> someentity.tsdata;
ClassDiagram.Attribut>> SomeEntity.data:Byte =>=>=> RelationalSchema.Column>> someentity.data;
ClassDiagram.Attribut>> SomeEntity.chardata:Character =>=>=> RelationalSchema.Column>> someentity.chardata;
ClassDiagram.Attribut>> Ticket.id:Long =>=>=> RelationalSchema.Column>> ticket.id PRIMARY KEY;
ClassDiagram.Attribut>> Ticket.number:String =>=>=> RelationalSchema.Column>> ticket.number;
ClassDiagram.Attribut>> SocialNetworkProfile.id:java.lang.String =>=>=> RelationalSchema.Column>> socialnetworkprofile.id;
ClassDiagram.Attribut>> SocialNetworkProfile.type:SocialNetwork =>=>=> RelationalSchema.Column>> socialnetworkprofile.type;
ClassDiagram.Attribut>> SocialNetworkProfile.networkid:String =>=>=> RelationalSchema.Column>> socialnetworkprofile.networkid;
ClassDiagram.Attribut>> User.id:java.lang.String =>=>=> RelationalSchema.Column>> user.id;
ClassDiagram.Attribut>> EntityEnum.id:long =>=>=> RelationalSchema.Column>> entityenum.id PRIMARY KEY;
ClassDiagram.Attribut>> EntityEnum.ordinal:Common =>=>=> RelationalSchema.Column>> entityenum.ordinal;
ClassDiagram.Attribut>> EntityEnum.string:Common =>=>=> RelationalSchema.Column>> entityenum.string;
ClassDiagram.Attribut>> EntityEnum.GeneratedName:FirstLetter =>=>=> RelationalSchema.Column>> entityenum.GeneratedName;
ClassDiagram.Attribut>> EntityEnum.GeneratedName:LastNumber =>=>=> RelationalSchema.Column>> entityenum.GeneratedName;
ClassDiagram.Attribut>> EntityEnum.explicitoverridingimplicit:LastNumber =>=>=> RelationalSchema.Column>> entityenum.explicitoverridingimplicit;
ClassDiagram.Attribut>> EntityEnum.GeneratedName:Trimmed =>=>=> RelationalSchema.Column>> entityenum.GeneratedName;
ClassDiagram.Attribut>> EntityEnum.formula:Trimmed =>=>=> RelationalSchema.Column>> entityenum.formula;
ClassDiagram.Attribut>> EntityEnum.set:Set<Common> =>=>=> RelationalSchema.Column>> entityenum.set;
ClassDiagram.Attribut>> EnumeratedSmokeTest.ssr:StandardServiceRegistry =>=>=> RelationalSchema.Column>> enumeratedsmoketest.ssr;
ClassDiagram.Attribut>> EntityMapEnum.id:int =>=>=> RelationalSchema.Column>> entitymapenum.id PRIMARY KEY;
ClassDiagram.Attribut>> EntityMapEnum.ordinalmap:Map<Common,String> =>=>=> RelationalSchema.Column>> entitymapenum.ordinalmap;
ClassDiagram.Attribut>> EntityMapEnum.stringmap:Map<Common,String> =>=>=> RelationalSchema.Column>> entitymapenum.stringmap;
ClassDiagram.Attribut>> EntityMapEnum.firstlettermap:Map<FirstLetter,String> =>=>=> RelationalSchema.Column>> entitymapenum.firstlettermap;
ClassDiagram.Attribut>> EntityMapEnum.lastnumbermap:Map<LastNumber,String> =>=>=> RelationalSchema.Column>> entitymapenum.lastnumbermap;
ClassDiagram.Attribut>> EntityMapEnum.explicitoverridingimplicitmap:Map<LastNumber,String> =>=>=> RelationalSchema.Column>> entitymapenum.explicitoverridingimplicitmap;
ClassDiagram.Attribut>> User.id:int =>=>=> RelationalSchema.Column>> user.id PRIMARY KEY;
ClassDiagram.Attribut>> User.emailaddress:String =>=>=> RelationalSchema.Column>> user.emailaddress;
ClassDiagram.Attribut>> User.age:int =>=>=> RelationalSchema.Column>> user.age;
ClassDiagram.Attribut>> User.username:String =>=>=> RelationalSchema.Column>> user.username;
ClassDiagram.Attribut>> User.password:String =>=>=> RelationalSchema.Column>> user.password;
ClassDiagram.Attribut>> User.lockedout:boolean =>=>=> RelationalSchema.Column>> user.lockedout;
ClassDiagram.Attribut>> Human.iq:int =>=>=> RelationalSchema.Column>> human.iq;
ClassDiagram.Attribut>> Mammal.ispregnant:boolean =>=>=> RelationalSchema.Column>> mammal.ispregnant;
ClassDiagram.Attribut>> Club.id:int =>=>=> RelationalSchema.Column>> club.id PRIMARY KEY;
ClassDiagram.Attribut>> Club.name:String =>=>=> RelationalSchema.Column>> club.name;
ClassDiagram.Attribut>> Human.iq:int =>=>=> RelationalSchema.Column>> human.iq;
ClassDiagram.Attribut>> Mammal.ispregnant:boolean =>=>=> RelationalSchema.Column>> mammal.ispregnant;
ClassDiagram.Attribut>> Animal.id:Integer =>=>=> RelationalSchema.Column>> animal.id PRIMARY KEY;
ClassDiagram.Attribut>> Animal.name:String =>=>=> RelationalSchema.Column>> animal.name;
ClassDiagram.Attribut>> Human.iq:int =>=>=> RelationalSchema.Column>> human.iq;
ClassDiagram.Attribut>> Animal.id:Integer =>=>=> RelationalSchema.Column>> animal.id PRIMARY KEY;
ClassDiagram.Attribut>> Animal.name:String =>=>=> RelationalSchema.Column>> animal.name;
ClassDiagram.Attribut>> Mammal.ispregnant:boolean =>=>=> RelationalSchema.Column>> mammal.ispregnant;
ClassDiagram.Attribut>> Mammal.ispregnant:boolean =>=>=> RelationalSchema.Column>> mammal.ispregnant;
ClassDiagram.Attribut>> Animal.id:Integer =>=>=> RelationalSchema.Column>> animal.id PRIMARY KEY;
ClassDiagram.Attribut>> Animal.name:String =>=>=> RelationalSchema.Column>> animal.name;
ClassDiagram.Attribut>> Human.iq:int =>=>=> RelationalSchema.Column>> human.iq;
ClassDiagram.Attribut>> Ferry.sea:String =>=>=> RelationalSchema.Column>> ferry.sea;
ClassDiagram.Attribut>> Supplier.id:Integer =>=>=> RelationalSchema.Column>> supplier.id PRIMARY KEY;
ClassDiagram.Attribut>> Supplier.name:String =>=>=> RelationalSchema.Column>> supplier.name;
ClassDiagram.Attribut>> GroupWithSet.id:Integer =>=>=> RelationalSchema.Column>> groupwithset.id PRIMARY KEY;
ClassDiagram.Attribut>> BuildingCompany.id:Long =>=>=> RelationalSchema.Column>> buildingcompany.id PRIMARY KEY;
ClassDiagram.Attribut>> BuildingCompany.foundedin:Date =>=>=> RelationalSchema.Column>> buildingcompany.foundedin;
ClassDiagram.Attribut>> ProgramManager.id:int =>=>=> RelationalSchema.Column>> programmanager.id PRIMARY KEY;
ClassDiagram.Attribut>> PhoneNumber.phnumber:int =>=>=> RelationalSchema.Column>> phonenumber.phnumber PRIMARY KEY;
ClassDiagram.Attribut>> Employer.id:Integer =>=>=> RelationalSchema.Column>> employer.id PRIMARY KEY;
ClassDiagram.Attribut>> InspectorPrefixes.prefixes:String =>=>=> RelationalSchema.Column>> inspectorprefixes.prefixes;
ClassDiagram.Attribut>> Group.id:Integer =>=>=> RelationalSchema.Column>> group.id PRIMARY KEY;
ClassDiagram.Attribut>> Friend.id:Integer =>=>=> RelationalSchema.Column>> friend.id PRIMARY KEY;
ClassDiagram.Attribut>> Friend.name:String =>=>=> RelationalSchema.Column>> friend.name;
ClassDiagram.Attribut>> Item.id:Integer =>=>=> RelationalSchema.Column>> item.id PRIMARY KEY;
ClassDiagram.Attribut>> PhoneNumber.phnumber:int =>=>=> RelationalSchema.Column>> phonenumber.phnumber PRIMARY KEY;
ClassDiagram.Attribut>> Store.id:Integer =>=>=> RelationalSchema.Column>> store.id PRIMARY KEY;
ClassDiagram.Attribut>> Store.name:String =>=>=> RelationalSchema.Column>> store.name;
ClassDiagram.Attribut>> Employee.id:Integer =>=>=> RelationalSchema.Column>> employee.id PRIMARY KEY;
ClassDiagram.Attribut>> Employee.name:String =>=>=> RelationalSchema.Column>> employee.name;
ClassDiagram.Attribut>> Employee.GeneratedName:ContactInfo =>=>=> RelationalSchema.Column>> employee.GeneratedName;
ClassDiagram.Attribut>> KnownClient.id:Integer =>=>=> RelationalSchema.Column>> knownclient.id PRIMARY KEY;
ClassDiagram.Attribut>> KnownClient.name:String =>=>=> RelationalSchema.Column>> knownclient.name;
ClassDiagram.Attribut>> City.id:Integer =>=>=> RelationalSchema.Column>> city.id PRIMARY KEY;
ClassDiagram.Attribut>> City.name:String =>=>=> RelationalSchema.Column>> city.name;
ClassDiagram.Attribut>> Category.id:Integer =>=>=> RelationalSchema.Column>> category.id PRIMARY KEY;
ClassDiagram.Attribut>> Employee.id:Integer =>=>=> RelationalSchema.Column>> employee.id PRIMARY KEY;
ClassDiagram.Attribut>> Employee.name:String =>=>=> RelationalSchema.Column>> employee.name;
ClassDiagram.Attribut>> Employee.GeneratedName:ContactInfo =>=>=> RelationalSchema.Column>> employee.GeneratedName;
ClassDiagram.Attribut>> Employee.GeneratedName:JobInfo =>=>=> RelationalSchema.Column>> employee.GeneratedName;
ClassDiagram.Attribut>> Building.id:Long =>=>=> RelationalSchema.Column>> building.id PRIMARY KEY;
ClassDiagram.Attribut>> Man.id:ManPk =>=>=> RelationalSchema.Column>> man.id PRIMARY KEY;
ClassDiagram.Attribut>> Man.carname:String =>=>=> RelationalSchema.Column>> man.carname;
ClassDiagram.Attribut>> City.id:Integer =>=>=> RelationalSchema.Column>> city.id PRIMARY KEY;
ClassDiagram.Attribut>> City.name:String =>=>=> RelationalSchema.Column>> city.name;
ClassDiagram.Attribut>> Zone.id:Integer =>=>=> RelationalSchema.Column>> zone.id PRIMARY KEY;
ClassDiagram.Attribut>> Contractor.hourlyrate:float =>=>=> RelationalSchema.Column>> contractor.hourlyrate;
ClassDiagram.Attribut>> Woman.id:WomanPk =>=>=> RelationalSchema.Column>> woman.id PRIMARY KEY;
ClassDiagram.Attribut>> Woman.carname:String =>=>=> RelationalSchema.Column>> woman.carname;
ClassDiagram.Attribut>> Cat.id:CatPk =>=>=> RelationalSchema.Column>> cat.id;
ClassDiagram.Attribut>> Cat.age:int =>=>=> RelationalSchema.Column>> cat.age;
ClassDiagram.Attribut>> KnownClient.id:Integer =>=>=> RelationalSchema.Column>> knownclient.id PRIMARY KEY;
ClassDiagram.Attribut>> KnownClient.name:String =>=>=> RelationalSchema.Column>> knownclient.name;
ClassDiagram.Attribut>> Store.id:Integer =>=>=> RelationalSchema.Column>> store.id PRIMARY KEY;
ClassDiagram.Attribut>> Store.name:String =>=>=> RelationalSchema.Column>> store.name;
ClassDiagram.Attribut>> Permission.permission:String =>=>=> RelationalSchema.Column>> permission.permission PRIMARY KEY;
ClassDiagram.Attribut>> Permission.expiration:Date =>=>=> RelationalSchema.Column>> permission.expiration;
ClassDiagram.Attribut>> Inspector._id:Long =>=>=> RelationalSchema.Column>> inspector._id PRIMARY KEY;
ClassDiagram.Attribut>> Inspector.name:String =>=>=> RelationalSchema.Column>> inspector.name;
ClassDiagram.Attribut>> Luggage.id:Integer =>=>=> RelationalSchema.Column>> luggage.id PRIMARY KEY;
ClassDiagram.Attribut>> Luggage.owner:String =>=>=> RelationalSchema.Column>> luggage.owner;
ClassDiagram.Attribut>> Luggage.type:String =>=>=> RelationalSchema.Column>> luggage.type;
ClassDiagram.Attribut>> HousePlaces.id:int =>=>=> RelationalSchema.Column>> houseplaces.id PRIMARY KEY;
ClassDiagram.Attribut>> HousePlaces.GeneratedName:Places =>=>=> RelationalSchema.Column>> houseplaces.GeneratedName;
ClassDiagram.Attribut>> HousePlaces.neighbour:Places =>=>=> RelationalSchema.Column>> houseplaces.neighbour;
ClassDiagram.Attribut>> ItemCost.id:int =>=>=> RelationalSchema.Column>> itemcost.id PRIMARY KEY;
ClassDiagram.Attribut>> ItemCost.GeneratedName:Item =>=>=> RelationalSchema.Column>> itemcost.GeneratedName;
ClassDiagram.Attribut>> ItemCost.GeneratedName:Vendor =>=>=> RelationalSchema.Column>> itemcost.GeneratedName;
ClassDiagram.Attribut>> ItemCost.cost:BigDecimal =>=>=> RelationalSchema.Column>> itemcost.cost;
ClassDiagram.Attribut>> Clothes.id:Integer =>=>=> RelationalSchema.Column>> clothes.id PRIMARY KEY;
ClassDiagram.Attribut>> Clothes.type:String =>=>=> RelationalSchema.Column>> clothes.type;
ClassDiagram.Attribut>> Clothes.flavor:String =>=>=> RelationalSchema.Column>> clothes.flavor;
ClassDiagram.Attribut>> Item.id:int =>=>=> RelationalSchema.Column>> item.id PRIMARY KEY;
ClassDiagram.Attribut>> House.id:Integer =>=>=> RelationalSchema.Column>> house.id PRIMARY KEY;
ClassDiagram.Attribut>> House.address:String =>=>=> RelationalSchema.Column>> house.address;
ClassDiagram.Attribut>> House.GeneratedName:Postman =>=>=> RelationalSchema.Column>> house.GeneratedName;
ClassDiagram.Attribut>> Rambler.id:Integer =>=>=> RelationalSchema.Column>> rambler.id PRIMARY KEY;
ClassDiagram.Attribut>> Rambler.name:String =>=>=> RelationalSchema.Column>> rambler.name;
ClassDiagram.Attribut>> Inhabitant.id:Integer =>=>=> RelationalSchema.Column>> inhabitant.id PRIMARY KEY;
ClassDiagram.Attribut>> Inhabitant.name:String =>=>=> RelationalSchema.Column>> inhabitant.name;
ClassDiagram.Attribut>> Vendor.id:int =>=>=> RelationalSchema.Column>> vendor.id PRIMARY KEY;
ClassDiagram.Attribut>> WarehouseItem.id:int =>=>=> RelationalSchema.Column>> warehouseitem.id PRIMARY KEY;
ClassDiagram.Attribut>> WarehouseItem.GeneratedName:Item =>=>=> RelationalSchema.Column>> warehouseitem.GeneratedName;
ClassDiagram.Attribut>> WarehouseItem.GeneratedName:Vendor =>=>=> RelationalSchema.Column>> warehouseitem.GeneratedName;
ClassDiagram.Attribut>> WarehouseItem.qtyinstock:BigDecimal =>=>=> RelationalSchema.Column>> warehouseitem.qtyinstock;
ClassDiagram.Attribut>> Postman.name:String =>=>=> RelationalSchema.Column>> postman.name;
ClassDiagram.Attribut>> Postman.id:String =>=>=> RelationalSchema.Column>> postman.id PRIMARY KEY;
ClassDiagram.Attribut>> Bag.id:Integer =>=>=> RelationalSchema.Column>> bag.id PRIMARY KEY;
ClassDiagram.Attribut>> Bag.serial:String =>=>=> RelationalSchema.Column>> bag.serial;
ClassDiagram.Attribut>> Place.id:int =>=>=> RelationalSchema.Column>> place.id PRIMARY KEY;
ClassDiagram.Attribut>> Place.name:String =>=>=> RelationalSchema.Column>> place.name;
ClassDiagram.Attribut>> Place.owner:String =>=>=> RelationalSchema.Column>> place.owner;
ClassDiagram.Attribut>> Customer.id:Long =>=>=> RelationalSchema.Column>> customer.id PRIMARY KEY;
ClassDiagram.Attribut>> Customer.name:String =>=>=> RelationalSchema.Column>> customer.name;
ClassDiagram.Attribut>> Customer.GeneratedName:Passport =>=>=> RelationalSchema.Column>> customer.GeneratedName;
ClassDiagram.Attribut>> Entity2.entity2_prop1:String =>=>=> RelationalSchema.Column>> entity2.entity2_prop1;
ClassDiagram.Attribut>> Entity2.entity2_prop2:String =>=>=> RelationalSchema.Column>> entity2.entity2_prop2;
ClassDiagram.Attribut>> Entity2.entity2_prop3:String =>=>=> RelationalSchema.Column>> entity2.entity2_prop3;
ClassDiagram.Attribut>> Entity2.entity2_prop4:String =>=>=> RelationalSchema.Column>> entity2.entity2_prop4;
ClassDiagram.Attribut>> Entity2.entity2_prop5:String =>=>=> RelationalSchema.Column>> entity2.entity2_prop5;
ClassDiagram.Attribut>> Entity2.entity2_prop6:String =>=>=> RelationalSchema.Column>> entity2.entity2_prop6;
ClassDiagram.Attribut>> Entity1.entity1_prop1:String =>=>=> RelationalSchema.Column>> entity1.entity1_prop1;
ClassDiagram.Attribut>> Entity1.entity1_prop2:String =>=>=> RelationalSchema.Column>> entity1.entity1_prop2;
ClassDiagram.Attribut>> Entity1.entity1_prop3:String =>=>=> RelationalSchema.Column>> entity1.entity1_prop3;
ClassDiagram.Attribut>> Entity1.entity1_prop4:String =>=>=> RelationalSchema.Column>> entity1.entity1_prop4;
ClassDiagram.Attribut>> Entity1.entity1_prop5:String =>=>=> RelationalSchema.Column>> entity1.entity1_prop5;
ClassDiagram.Attribut>> Entity1.entity1_prop6:String =>=>=> RelationalSchema.Column>> entity1.entity1_prop6;
ClassDiagram.Attribut>> Dvd.id:MyOid =>=>=> RelationalSchema.Column>> dvd.id PRIMARY KEY;
ClassDiagram.Attribut>> Dvd.title:String =>=>=> RelationalSchema.Column>> dvd.title;
ClassDiagram.Attribut>> A.id:String =>=>=> RelationalSchema.Column>> a.id PRIMARY KEY;
ClassDiagram.Attribut>> A.name:String =>=>=> RelationalSchema.Column>> a.name;
ClassDiagram.Attribut>> A.value:int =>=>=> RelationalSchema.Column>> a.value;
ClassDiagram.Attribut>> A.address:Set<AddressEntry> =>=>=> RelationalSchema.Column>> a.address;
ClassDiagram.Attribut>> Address.id:long =>=>=> RelationalSchema.Column>> address.id PRIMARY KEY;
ClassDiagram.Attribut>> LongKeyNamingStrategyTest.GeneratedName:ServiceRegistry =>=>=> RelationalSchema.Column>> longkeynamingstrategytest.GeneratedName;
ClassDiagram.Attribut>> Person.id:long =>=>=> RelationalSchema.Column>> person.id PRIMARY KEY;
ClassDiagram.Attribut>> Person.serialversionuid:long =>=>=> RelationalSchema.Column>> person.serialversionuid;
ClassDiagram.Attribut>> Person.id:Long =>=>=> RelationalSchema.Column>> person.id PRIMARY KEY;
ClassDiagram.Attribut>> Person.name:String =>=>=> RelationalSchema.Column>> person.name;
ClassDiagram.Attribut>> Child./***/id:Long =>=>=> RelationalSchema.Column>> child./***/id PRIMARY KEY;
ClassDiagram.Attribut>> CodedPairSetHolder.serialversionuid:long =>=>=> RelationalSchema.Column>> codedpairsetholder.serialversionuid;
ClassDiagram.Attribut>> CodedPairSetHolder.id:Long =>=>=> RelationalSchema.Column>> codedpairsetholder.id PRIMARY KEY;
ClassDiagram.Attribut>> CodedPairSetHolder.code:String =>=>=> RelationalSchema.Column>> codedpairsetholder.code;
ClassDiagram.Attribut>> CodedPairSetHolder.pairs:Set<PersonPair> =>=>=> RelationalSchema.Column>> codedpairsetholder.pairs;
ClassDiagram.Attribut>> Parent./***/id:Long =>=>=> RelationalSchema.Column>> parent./***/id PRIMARY KEY;
ClassDiagram.Attribut>> CodedPairHolder.id:Long =>=>=> RelationalSchema.Column>> codedpairholder.id PRIMARY KEY;
ClassDiagram.Attribut>> CodedPairHolder.code:String =>=>=> RelationalSchema.Column>> codedpairholder.code;
ClassDiagram.Attribut>> CodedPairHolder.pair:PersonPair =>=>=> RelationalSchema.Column>> codedpairholder.pair;
ClassDiagram.Attribut>> Tooth.id:Integer =>=>=> RelationalSchema.Column>> tooth.id PRIMARY KEY;
ClassDiagram.Attribut>> Tooth.type:String =>=>=> RelationalSchema.Column>> tooth.type;
ClassDiagram.Attribut>> Mouth.id:Integer =>=>=> RelationalSchema.Column>> mouth.id PRIMARY KEY;
ClassDiagram.Attribut>> Mouth.size:int =>=>=> RelationalSchema.Column>> mouth.size;
ClassDiagram.Attribut>> Language.serialversionuid:long =>=>=> RelationalSchema.Column>> language.serialversionuid;
ClassDiagram.Attribut>> Language.name:String =>=>=> RelationalSchema.Column>> language.name;
ClassDiagram.Attribut>> Language.code:String =>=>=> RelationalSchema.Column>> language.code PRIMARY KEY;
ClassDiagram.Attribut>> Company.serialversionuid:long =>=>=> RelationalSchema.Column>> company.serialversionuid;
ClassDiagram.Attribut>> Company.id:int =>=>=> RelationalSchema.Column>> company.id PRIMARY KEY;
ClassDiagram.Attribut>> Company.GeneratedName:Person =>=>=> RelationalSchema.Column>> company.GeneratedName;
ClassDiagram.Attribut>> Person.serialversionuid:long =>=>=> RelationalSchema.Column>> person.serialversionuid;
ClassDiagram.Attribut>> Person.id:int =>=>=> RelationalSchema.Column>> person.id PRIMARY KEY;
ClassDiagram.Attribut>> Person.companyid:int =>=>=> RelationalSchema.Column>> person.companyid;
ClassDiagram.Attribut>> Person.defaultflag:String =>=>=> RelationalSchema.Column>> person.defaultflag;
ClassDiagram.Attribut>> Message.serialversionuid:long =>=>=> RelationalSchema.Column>> message.serialversionuid;
ClassDiagram.Attribut>> Message.id:int =>=>=> RelationalSchema.Column>> message.id PRIMARY KEY;
ClassDiagram.Attribut>> Message.languagecode:String =>=>=> RelationalSchema.Column>> message.languagecode;
ClassDiagram.Attribut>> Message.languagename:String =>=>=> RelationalSchema.Column>> message.languagename;
ClassDiagram.Attribut>> Message.GeneratedName:Language =>=>=> RelationalSchema.Column>> message.GeneratedName;
ClassDiagram.Attribut>> FoodItem.id:Integer =>=>=> RelationalSchema.Column>> fooditem.id PRIMARY KEY;
ClassDiagram.Attribut>> FoodItem.item:String =>=>=> RelationalSchema.Column>> fooditem.item;
ClassDiagram.Attribut>> Product.serialversionuid:long =>=>=> RelationalSchema.Column>> product.serialversionuid;
ClassDiagram.Attribut>> Product.id:Integer =>=>=> RelationalSchema.Column>> product.id PRIMARY KEY;
ClassDiagram.Attribut>> Product.productidnf:String =>=>=> RelationalSchema.Column>> product.productidnf;
ClassDiagram.Attribut>> Product.description:String =>=>=> RelationalSchema.Column>> product.description;
ClassDiagram.Attribut>> Menu.serialversionuid:long =>=>=> RelationalSchema.Column>> menu.serialversionuid;
ClassDiagram.Attribut>> Menu.id:Integer =>=>=> RelationalSchema.Column>> menu.id PRIMARY KEY;
ClassDiagram.Attribut>> Menu.ordernbr:String =>=>=> RelationalSchema.Column>> menu.ordernbr;
ClassDiagram.Attribut>> Menu.isdefault:String =>=>=> RelationalSchema.Column>> menu.isdefault;
ClassDiagram.Attribut>> Manufacturer.id:ManufacturerId =>=>=> RelationalSchema.Column>> manufacturer.id PRIMARY KEY;
ClassDiagram.Attribut>> Manufacturer.name:String =>=>=> RelationalSchema.Column>> manufacturer.name;
ClassDiagram.Attribut>> Contract.contractnumber:String =>=>=> RelationalSchema.Column>> contract.contractnumber;
ClassDiagram.Attribut>> Contract.//integercompanycodeid:ContractId =>=>=> RelationalSchema.Column>> contract.//integercompanycodeid;
ClassDiagram.Attribut>> Contract.GeneratedName:Manufacturer =>=>=> RelationalSchema.Column>> contract.GeneratedName;
ClassDiagram.Attribut>> Contract.GeneratedName:Model =>=>=> RelationalSchema.Column>> contract.GeneratedName;
ClassDiagram.Attribut>> Model.id:ModelId =>=>=> RelationalSchema.Column>> model.id PRIMARY KEY;
ClassDiagram.Attribut>> Model.name:String =>=>=> RelationalSchema.Column>> model.name;
ClassDiagram.Attribut>> ProductSqlServer.serialversionuid:long =>=>=> RelationalSchema.Column>> productsqlserver.serialversionuid;
ClassDiagram.Attribut>> ProductSqlServer.id:Integer =>=>=> RelationalSchema.Column>> productsqlserver.id PRIMARY KEY;
ClassDiagram.Attribut>> ProductSqlServer.productidnf:String =>=>=> RelationalSchema.Column>> productsqlserver.productidnf;
ClassDiagram.Attribut>> ProductSqlServer.description:String =>=>=> RelationalSchema.Column>> productsqlserver.description;
ClassDiagram.Attribut>> MyEntity.id:Long =>=>=> RelationalSchema.Column>> myentity.id PRIMARY KEY;
ClassDiagram.Attribut>> MyEntity.name:String =>=>=> RelationalSchema.Column>> myentity.name;
ClassDiagram.Attribut>> ContactImpl.id:Integer =>=>=> RelationalSchema.Column>> contactimpl.id PRIMARY KEY;
ClassDiagram.Attribut>> ContactImpl.name:String =>=>=> RelationalSchema.Column>> contactimpl.name;
ClassDiagram.Attribut>> UserImpl.id:Integer =>=>=> RelationalSchema.Column>> userimpl.id PRIMARY KEY;
ClassDiagram.Attribut>> Flight.id:Long =>=>=> RelationalSchema.Column>> flight.id PRIMARY KEY;
ClassDiagram.Attribut>> Flight.name:String =>=>=> RelationalSchema.Column>> flight.name;
ClassDiagram.Attribut>> Flight.transientduration:Long =>=>=> RelationalSchema.Column>> flight.transientduration;
ClassDiagram.Attribut>> Flight.durationinsec:long =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> Flight.version:Integer =>=>=> RelationalSchema.Column>> flight.version;
ClassDiagram.Attribut>> Flight.GeneratedName:Company =>=>=> RelationalSchema.Column>> flight.GeneratedName;
ClassDiagram.Attribut>> Flight.triggereddata:String =>=>=> RelationalSchema.Column>> flight.triggereddata;
ClassDiagram.Attribut>> Flight.factor:long =>=>=> RelationalSchema.Column>> flight.factor;
ClassDiagram.Attribut>> Flight.departure:Date =>=>=> RelationalSchema.Column>> flight.departure;
ClassDiagram.Attribut>> Flight.buydate:java.sql.Timestamp =>=>=> RelationalSchema.Column>> flight.buydate;
ClassDiagram.Attribut>> Flight.alternativedeparturedate:Calendar =>=>=> RelationalSchema.Column>> flight.alternativedeparturedate;
ClassDiagram.Attribut>> Category.id:int =>=>=> RelationalSchema.Column>> category.id PRIMARY KEY;
ClassDiagram.Attribut>> Category.title:String =>=>=> RelationalSchema.Column>> category.title;
ClassDiagram.Attribut>> Printer.id:Long =>=>=> RelationalSchema.Column>> printer.id PRIMARY KEY;
ClassDiagram.Attribut>> Bug.id:int =>=>=> RelationalSchema.Column>> bug.id PRIMARY KEY;
ClassDiagram.Attribut>> Bug.title:String =>=>=> RelationalSchema.Column>> bug.title;
ClassDiagram.Attribut>> PrinterCable.id:Long =>=>=> RelationalSchema.Column>> printercable.id PRIMARY KEY;
ClassDiagram.Attribut>> PrinterCable.GeneratedName:Printer =>=>=> RelationalSchema.Column>> printercable.GeneratedName;
ClassDiagram.Attribut>> Investor.id:Long =>=>=> RelationalSchema.Column>> investor.id PRIMARY KEY;
ClassDiagram.Attribut>> Investor.investments:List<Investment> =>=>=> RelationalSchema.Column>> investor.investments;
ClassDiagram.Attribut>> Customer.id:Long =>=>=> RelationalSchema.Column>> customer.id PRIMARY KEY;
ClassDiagram.Attribut>> Customer.investments:List<Investment> =>=>=> RelationalSchema.Column>> customer.investments;
ClassDiagram.Attribut>> Customer.id:Long =>=>=> RelationalSchema.Column>> customer.id PRIMARY KEY;
ClassDiagram.Attribut>> Customer.investments:List<Investment> =>=>=> RelationalSchema.Column>> customer.investments;
ClassDiagram.Attribut>> B.id:int =>=>=> RelationalSchema.Column>> b.id PRIMARY KEY;
ClassDiagram.Attribut>> D.id:D_PK =>=>=> RelationalSchema.Column>> d.id;
ClassDiagram.Attribut>> ClassA.id:int =>=>=> RelationalSchema.Column>> classa.id PRIMARY KEY;
ClassDiagram.Attribut>> A.id:A_PK =>=>=> RelationalSchema.Column>> a.id;
ClassDiagram.Attribut>> InternetProvider.id:Integer =>=>=> RelationalSchema.Column>> internetprovider.id PRIMARY KEY;
ClassDiagram.Attribut>> InternetProvider.brandname:String =>=>=> RelationalSchema.Column>> internetprovider.brandname;
ClassDiagram.Attribut>> InternetProvider.owner:LegalStructure =>=>=> RelationalSchema.Column>> internetprovider.owner;
ClassDiagram.Attribut>> SpreadDeal./***withthetenor.*/long:Swap =>=>=> RelationalSchema.Column>> spreaddeal./***withthetenor.*/long;
ClassDiagram.Attribut>> SpreadDeal./***withthelongertenor.*/short:Swap =>=>=> RelationalSchema.Column>> spreaddeal./***withthelongertenor.*/short;
ClassDiagram.Attribut>> Book.isbn:String =>=>=> RelationalSchema.Column>> book.isbn PRIMARY KEY;
ClassDiagram.Attribut>> Book.name:String =>=>=> RelationalSchema.Column>> book.name;
ClassDiagram.Attribut>> Book.GeneratedName:Summary =>=>=> RelationalSchema.Column>> book.GeneratedName;
ClassDiagram.Attribut>> CorpType.id:Integer =>=>=> RelationalSchema.Column>> corptype.id PRIMARY KEY;
ClassDiagram.Attribut>> CorpType.type:String =>=>=> RelationalSchema.Column>> corptype.type;
ClassDiagram.Attribut>> Alias.id:Long =>=>=> RelationalSchema.Column>> alias.id PRIMARY KEY;
ClassDiagram.Attribut>> Alias.GeneratedName:Name =>=>=> RelationalSchema.Column>> alias.GeneratedName;
ClassDiagram.Attribut>> Alias.source:String =>=>=> RelationalSchema.Column>> alias.source;
ClassDiagram.Attribut>> Person.id:Long =>=>=> RelationalSchema.Column>> person.id PRIMARY KEY;
ClassDiagram.Attribut>> Person.name:PersonName =>=>=> RelationalSchema.Column>> person.name;
ClassDiagram.Attribut>> AddressType.id:Integer =>=>=> RelationalSchema.Column>> addresstype.id PRIMARY KEY;
ClassDiagram.Attribut>> AddressType.name:String =>=>=> RelationalSchema.Column>> addresstype.name;
ClassDiagram.Attribut>> Manager.id:Integer =>=>=> RelationalSchema.Column>> manager.id PRIMARY KEY;
ClassDiagram.Attribut>> Manager.name:String =>=>=> RelationalSchema.Column>> manager.name;
ClassDiagram.Attribut>> Person.id:Integer =>=>=> RelationalSchema.Column>> person.id PRIMARY KEY;
ClassDiagram.Attribut>> Person.name:String =>=>=> RelationalSchema.Column>> person.name;
ClassDiagram.Attribut>> Person.GeneratedName:Address =>=>=> RelationalSchema.Column>> person.GeneratedName;
ClassDiagram.Attribut>> Person.bornin:Country =>=>=> RelationalSchema.Column>> person.bornin;
ClassDiagram.Attribut>> Nationality.id:Integer =>=>=> RelationalSchema.Column>> nationality.id PRIMARY KEY;
ClassDiagram.Attribut>> Nationality.name:String =>=>=> RelationalSchema.Column>> nationality.name;
ClassDiagram.Attribut>> RegionalArticle.pk:RegionalArticlePk =>=>=> RelationalSchema.Column>> regionalarticle.pk PRIMARY KEY;
ClassDiagram.Attribut>> RegionalArticle.name:String =>=>=> RelationalSchema.Column>> regionalarticle.name;
ClassDiagram.Attribut>> Person.id:Long =>=>=> RelationalSchema.Column>> person.id PRIMARY KEY;
ClassDiagram.Attribut>> Person.name:String =>=>=> RelationalSchema.Column>> person.name;
ClassDiagram.Attribut>> Person.GeneratedName:Address =>=>=> RelationalSchema.Column>> person.GeneratedName;
ClassDiagram.Attribut>> Country.iso2:String =>=>=> RelationalSchema.Column>> country.iso2 PRIMARY KEY;
ClassDiagram.Attribut>> Country.name:String =>=>=> RelationalSchema.Column>> country.name;
ClassDiagram.Attribut>> VanillaSwap./***identifieroftheinterestrateswap*/instrumentid:String =>=>=> RelationalSchema.Column>> vanillaswap./***identifieroftheinterestrateswap*/instrumentid;
ClassDiagram.Attribut>> VanillaSwap./***oftheswap(andofbothlegs).*/:Currency =>=>=> RelationalSchema.Column>> vanillaswap./***oftheswap(andofbothlegs).*/;
ClassDiagram.Attribut>> VanillaSwap./***fixedleg(cashflowswiththefixedrate).*/:FixedLeg =>=>=> RelationalSchema.Column>> vanillaswap./***fixedleg(cashflowswiththefixedrate).*/;
ClassDiagram.Attribut>> VanillaSwap./***floatingleg(cashflowsboundtoafinancialindex).*/:FloatLeg =>=>=> RelationalSchema.Column>> vanillaswap./***floatingleg(cashflowsboundtoafinancialindex).*/;
ClassDiagram.Attribut>> FavoriteThings.id:int =>=>=> RelationalSchema.Column>> favoritethings.id PRIMARY KEY;
ClassDiagram.Attribut>> FavoriteThings.web:InternetFavorites =>=>=> RelationalSchema.Column>> favoritethings.web;
ClassDiagram.Attribut>> WealthyPerson.vacationhomes:Set<Address> =>=>=> RelationalSchema.Column>> wealthyperson.vacationhomes;
ClassDiagram.Attribut>> WealthyPerson.legacyvacationhomes:Set<Address> =>=>=> RelationalSchema.Column>> wealthyperson.legacyvacationhomes;
ClassDiagram.Attribut>> WealthyPerson.explicitvacationhomes:Set<Address> =>=>=> RelationalSchema.Column>> wealthyperson.explicitvacationhomes;
ClassDiagram.Attribut>> EntityWithNestedEmbeddables.id:Integer =>=>=> RelationalSchema.Column>> entitywithnestedembeddables.id PRIMARY KEY;
ClassDiagram.Attribut>> EntityWithNestedEmbeddables.embeda:EmbeddableA =>=>=> RelationalSchema.Column>> entitywithnestedembeddables.embeda;
ClassDiagram.Attribut>> Passport.id:Long =>=>=> RelationalSchema.Column>> passport.id PRIMARY KEY;
ClassDiagram.Attribut>> Passport.number:String =>=>=> RelationalSchema.Column>> passport.number;
ClassDiagram.Attribut>> Customer.id:long =>=>=> RelationalSchema.Column>> customer.id PRIMARY KEY;
ClassDiagram.Attribut>> Customer.name:String =>=>=> RelationalSchema.Column>> customer.name;
ClassDiagram.Attribut>> Customer.customernumber:long =>=>=> RelationalSchema.Column>> customer.customernumber;
ClassDiagram.Attribut>> Customer4.id:long =>=>=> RelationalSchema.Column>> customer4.id PRIMARY KEY;
ClassDiagram.Attribut>> Customer4.name:String =>=>=> RelationalSchema.Column>> customer4.name;
ClassDiagram.Attribut>> Customer4.customernumber:long =>=>=> RelationalSchema.Column>> customer4.customernumber;
ClassDiagram.Attribut>> SupportTickets.id:long =>=>=> RelationalSchema.Column>> supporttickets.id PRIMARY KEY;
ClassDiagram.Attribut>> SupportTickets.description:String =>=>=> RelationalSchema.Column>> supporttickets.description;
ClassDiagram.Attribut>> SupportTickets.resolution:String =>=>=> RelationalSchema.Column>> supporttickets.resolution;
ClassDiagram.Attribut>> Customer5.id:long =>=>=> RelationalSchema.Column>> customer5.id PRIMARY KEY;
ClassDiagram.Attribut>> Customer5.name:String =>=>=> RelationalSchema.Column>> customer5.name;
ClassDiagram.Attribut>> Customer5.customernumber:long =>=>=> RelationalSchema.Column>> customer5.customernumber;
ClassDiagram.Attribut>> Customer3.id:long =>=>=> RelationalSchema.Column>> customer3.id PRIMARY KEY;
ClassDiagram.Attribut>> Customer3.name:String =>=>=> RelationalSchema.Column>> customer3.name;
ClassDiagram.Attribut>> Customer3.customernumber:long =>=>=> RelationalSchema.Column>> customer3.customernumber;
ClassDiagram.Attribut>> Customer2.id:long =>=>=> RelationalSchema.Column>> customer2.id PRIMARY KEY;
ClassDiagram.Attribut>> Customer2.name:String =>=>=> RelationalSchema.Column>> customer2.name;
ClassDiagram.Attribut>> Customer2.customernumber:long =>=>=> RelationalSchema.Column>> customer2.customernumber;
ClassDiagram.Attribut>> Country.id:Integer =>=>=> RelationalSchema.Column>> country.id PRIMARY KEY;
ClassDiagram.Attribut>> Country.name:String =>=>=> RelationalSchema.Column>> country.name;
ClassDiagram.Attribut>> Order.id:long =>=>=> RelationalSchema.Column>> order.id PRIMARY KEY;
ClassDiagram.Attribut>> Order.ordernumber:long =>=>=> RelationalSchema.Column>> order.ordernumber;
ClassDiagram.Attribut>> Order.delivery:Date =>=>=> RelationalSchema.Column>> order.delivery;
ClassDiagram.Attribut>> UpdateTimeStampInheritanceTest.sleep_millis:long =>=>=> RelationalSchema.Column>> updatetimestampinheritancetest.sleep_millis;
ClassDiagram.Attribut>> UpdateTimeStampInheritanceTest.customerid:String =>=>=> RelationalSchema.Column>> updatetimestampinheritancetest.customerid;
ClassDiagram.Attribut>> Parent.id:ParentPk =>=>=> RelationalSchema.Column>> parent.id;
ClassDiagram.Attribut>> Presenter.name:String =>=>=> RelationalSchema.Column>> presenter.name PRIMARY KEY;
ClassDiagram.Attribut>> Product.name:String =>=>=> RelationalSchema.Column>> product.name PRIMARY KEY;
ClassDiagram.Attribut>> A.GeneratedName:AId =>=>=> RelationalSchema.Column>> a.GeneratedName;
ClassDiagram.Attribut>> TvProgram.id:TvMagazinPk =>=>=> RelationalSchema.Column>> tvprogram.id;
ClassDiagram.Attribut>> TvProgram.time:Date =>=>=> RelationalSchema.Column>> tvprogram.time;
ClassDiagram.Attribut>> TvProgram.text:String =>=>=> RelationalSchema.Column>> tvprogram.text;
ClassDiagram.Attribut>> Channel.id:Integer =>=>=> RelationalSchema.Column>> channel.id PRIMARY KEY;
ClassDiagram.Attribut>> Channel.name:String =>=>=> RelationalSchema.Column>> channel.name;
ClassDiagram.Attribut>> Card.id:String =>=>=> RelationalSchema.Column>> card.id PRIMARY KEY;
ClassDiagram.Attribut>> CardField.GeneratedName:PrimaryKey =>=>=> RelationalSchema.Column>> cardfield.GeneratedName;
ClassDiagram.Attribut>> Key.id:String =>=>=> RelationalSchema.Column>> key.id PRIMARY KEY;
ClassDiagram.Attribut>> Child.id:ChildPk =>=>=> RelationalSchema.Column>> child.id;
ClassDiagram.Attribut>> LittleGenius.particularskill:String =>=>=> RelationalSchema.Column>> littlegenius.particularskill;
ClassDiagram.Attribut>> Order.id:Integer =>=>=> RelationalSchema.Column>> order.id PRIMARY KEY;
ClassDiagram.Attribut>> SomeEntity.id:SomeEntityId =>=>=> RelationalSchema.Column>> someentity.id PRIMARY KEY;
ClassDiagram.Attribut>> SomeEntity.prop:String =>=>=> RelationalSchema.Column>> someentity.prop;
ClassDiagram.Attribut>> C.id:Long =>=>=> RelationalSchema.Column>> c.id PRIMARY KEY;
ClassDiagram.Attribut>> TvProgramIdClass.GeneratedName:Channel =>=>=> RelationalSchema.Column>> tvprogramidclass.GeneratedName PRIMARY KEY;
ClassDiagram.Attribut>> TvProgramIdClass.GeneratedName:Presenter =>=>=> RelationalSchema.Column>> tvprogramidclass.GeneratedName PRIMARY KEY;
ClassDiagram.Attribut>> TvProgramIdClass.time:Date =>=>=> RelationalSchema.Column>> tvprogramidclass.time;
ClassDiagram.Attribut>> TvProgramIdClass.text:String =>=>=> RelationalSchema.Column>> tvprogramidclass.text;
ClassDiagram.Attribut>> TvMagazin.id:TvMagazinPk =>=>=> RelationalSchema.Column>> tvmagazin.id;
ClassDiagram.Attribut>> TvMagazin.time:Date =>=>=> RelationalSchema.Column>> tvmagazin.time;
ClassDiagram.Attribut>> OrderLine.GeneratedName:Order =>=>=> RelationalSchema.Column>> orderline.GeneratedName PRIMARY KEY;
ClassDiagram.Attribut>> OrderLine.GeneratedName:Product =>=>=> RelationalSchema.Column>> orderline.GeneratedName PRIMARY KEY;
ClassDiagram.Attribut>> B.id:Long =>=>=> RelationalSchema.Column>> b.id PRIMARY KEY;
ClassDiagram.Attribut>> IntegerProperty.id:Integer =>=>=> RelationalSchema.Column>> integerproperty.id PRIMARY KEY;
ClassDiagram.Attribut>> IntegerProperty.name:String =>=>=> RelationalSchema.Column>> integerproperty.name;
ClassDiagram.Attribut>> IntegerProperty.value:Integer =>=>=> RelationalSchema.Column>> integerproperty.value;
ClassDiagram.Attribut>> PropertySet.id:Integer =>=>=> RelationalSchema.Column>> propertyset.id PRIMARY KEY;
ClassDiagram.Attribut>> PropertySet.name:String =>=>=> RelationalSchema.Column>> propertyset.name;
ClassDiagram.Attribut>> PropertySet.some:Property =>=>=> RelationalSchema.Column>> propertyset.some;
ClassDiagram.Attribut>> PropertySet.generalproperties:List<Property> =>=>=> RelationalSchema.Column>> propertyset.generalproperties;
ClassDiagram.Attribut>> CharProperty.id:Integer =>=>=> RelationalSchema.Column>> charproperty.id PRIMARY KEY;
ClassDiagram.Attribut>> CharProperty.name:String =>=>=> RelationalSchema.Column>> charproperty.name;
ClassDiagram.Attribut>> CharProperty.value:Character =>=>=> RelationalSchema.Column>> charproperty.value;
ClassDiagram.Attribut>> StringProperty.id:Integer =>=>=> RelationalSchema.Column>> stringproperty.id PRIMARY KEY;
ClassDiagram.Attribut>> StringProperty.name:String =>=>=> RelationalSchema.Column>> stringproperty.name;
ClassDiagram.Attribut>> StringProperty.value:String =>=>=> RelationalSchema.Column>> stringproperty.value;
ClassDiagram.Attribut>> LongProperty.id:Integer =>=>=> RelationalSchema.Column>> longproperty.id PRIMARY KEY;
ClassDiagram.Attribut>> LongProperty.name:String =>=>=> RelationalSchema.Column>> longproperty.name;
ClassDiagram.Attribut>> LongProperty.value:Long =>=>=> RelationalSchema.Column>> longproperty.value;
ClassDiagram.Attribut>> PropertyMap.id:Integer =>=>=> RelationalSchema.Column>> propertymap.id PRIMARY KEY;
ClassDiagram.Attribut>> PropertyMap.name:String =>=>=> RelationalSchema.Column>> propertymap.name;
ClassDiagram.Attribut>> PropertyMap.properties:Map<String,Property> =>=>=> RelationalSchema.Column>> propertymap.properties;
ClassDiagram.Attribut>> PropertyList.id:Integer =>=>=> RelationalSchema.Column>> propertylist.id PRIMARY KEY;
ClassDiagram.Attribut>> PropertyList.name:String =>=>=> RelationalSchema.Column>> propertylist.name;
ClassDiagram.Attribut>> PropertyList.somepropery:T =>=>=> RelationalSchema.Column>> propertylist.somepropery;
ClassDiagram.Attribut>> PropertyList.generalproperties:List<T> =>=>=> RelationalSchema.Column>> propertylist.generalproperties;
ClassDiagram.Attribut>> MarketRegion.id:long =>=>=> RelationalSchema.Column>> marketregion.id PRIMARY KEY;
ClassDiagram.Attribut>> MarketRegion.regioncode:String =>=>=> RelationalSchema.Column>> marketregion.regioncode;
ClassDiagram.Attribut>> Car.id:long =>=>=> RelationalSchema.Column>> car.id PRIMARY KEY;
ClassDiagram.Attribut>> Car.model:String =>=>=> RelationalSchema.Column>> car.model;
ClassDiagram.Attribut>> SomeGuy.id:Integer =>=>=> RelationalSchema.Column>> someguy.id PRIMARY KEY;
ClassDiagram.Attribut>> PaperType.id:Integer =>=>=> RelationalSchema.Column>> papertype.id PRIMARY KEY;
ClassDiagram.Attribut>> PaperType.name:String =>=>=> RelationalSchema.Column>> papertype.name;
ClassDiagram.Attribut>> DNA.id:Integer =>=>=> RelationalSchema.Column>> dna.id PRIMARY KEY;
ClassDiagram.Attribut>> WildEntity.serialversionuid:long =>=>=> RelationalSchema.Column>> wildentity.serialversionuid;
ClassDiagram.Attribut>> WildEntity.id:int =>=>=> RelationalSchema.Column>> wildentity.id PRIMARY KEY;
ClassDiagram.Attribut>> WildEntity.property:String =>=>=> RelationalSchema.Column>> wildentity.property;
ClassDiagram.Attribut>> Dummy.id:Long =>=>=> RelationalSchema.Column>> dummy.id PRIMARY KEY;
ClassDiagram.Attribut>> Dummy.transientdummyfield:K =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> Price.id:Integer =>=>=> RelationalSchema.Column>> price.id PRIMARY KEY;
ClassDiagram.Attribut>> Price.amount:Double =>=>=> RelationalSchema.Column>> price.amount;
ClassDiagram.Attribut>> Price.currency:String =>=>=> RelationalSchema.Column>> price.currency;
ClassDiagram.Attribut>> Gene.id:Integer =>=>=> RelationalSchema.Column>> gene.id PRIMARY KEY;
ClassDiagram.Attribut>> Gene.state:STE =>=>=> RelationalSchema.Column>> gene.state;
ClassDiagram.Attribut>> A320.javaembeddedversion:String =>=>=> RelationalSchema.Column>> a320.javaembeddedversion;
ClassDiagram.Attribut>> Importer.id:long =>=>=> RelationalSchema.Column>> importer.id PRIMARY KEY;
ClassDiagram.Attribut>> Importer.name:String =>=>=> RelationalSchema.Column>> importer.name;
ClassDiagram.Attribut>> Car.id:long =>=>=> RelationalSchema.Column>> car.id PRIMARY KEY;
ClassDiagram.Attribut>> Car.brand:String =>=>=> RelationalSchema.Column>> car.brand;
ClassDiagram.Attribut>> Car.producer:String =>=>=> RelationalSchema.Column>> car.producer;
ClassDiagram.Attribut>> Car.since:long =>=>=> RelationalSchema.Column>> car.since;
ClassDiagram.Attribut>> Car.GeneratedName:Dealer =>=>=> RelationalSchema.Column>> car.GeneratedName;
ClassDiagram.Attribut>> Car.otherdealers:Set<Dealer> =>=>=> RelationalSchema.Column>> car.otherdealers;
ClassDiagram.Attribut>> ListMappingTest.ssr:StandardServiceRegistry =>=>=> RelationalSchema.Column>> listmappingtest.ssr;
ClassDiagram.Attribut>> Port.id:Long =>=>=> RelationalSchema.Column>> port.id PRIMARY KEY;
ClassDiagram.Attribut>> Room.id:Long =>=>=> RelationalSchema.Column>> room.id PRIMARY KEY;
ClassDiagram.Attribut>> Room.name:String =>=>=> RelationalSchema.Column>> room.name;
ClassDiagram.Attribut>> House.id:Long =>=>=> RelationalSchema.Column>> house.id PRIMARY KEY;
ClassDiagram.Attribut>> House.cost:Integer =>=>=> RelationalSchema.Column>> house.cost;
ClassDiagram.Attribut>> Simple2.id1:Long =>=>=> RelationalSchema.Column>> simple2.id1 PRIMARY KEY;
ClassDiagram.Attribut>> Simple2.id2:Long =>=>=> RelationalSchema.Column>> simple2.id2 PRIMARY KEY;
ClassDiagram.Attribut>> Simple2.quantity:int =>=>=> RelationalSchema.Column>> simple2.quantity;
ClassDiagram.Attribut>> Simple.id1:Long =>=>=> RelationalSchema.Column>> simple.id1 PRIMARY KEY;
ClassDiagram.Attribut>> Simple.id2:Long =>=>=> RelationalSchema.Column>> simple.id2 PRIMARY KEY;
ClassDiagram.Attribut>> Simple.quantity:int =>=>=> RelationalSchema.Column>> simple.quantity;
ClassDiagram.Attribut>> Multiple.id1:Long =>=>=> RelationalSchema.Column>> multiple.id1 PRIMARY KEY;
ClassDiagram.Attribut>> Multiple.id2:Long =>=>=> RelationalSchema.Column>> multiple.id2 PRIMARY KEY;
ClassDiagram.Attribut>> Multiple.id3:Long =>=>=> RelationalSchema.Column>> multiple.id3 PRIMARY KEY;
ClassDiagram.Attribut>> Multiple.quantity:int =>=>=> RelationalSchema.Column>> multiple.quantity;
ClassDiagram.Attribut>> Citizen.id:Integer =>=>=> RelationalSchema.Column>> citizen.id PRIMARY KEY;
ClassDiagram.Attribut>> Citizen.firstname:String =>=>=> RelationalSchema.Column>> citizen.firstname;
ClassDiagram.Attribut>> Citizen.lastname:String =>=>=> RelationalSchema.Column>> citizen.lastname;
ClassDiagram.Attribut>> Citizen.ssn:String =>=>=> RelationalSchema.Column>> citizen.ssn;
ClassDiagram.Attribut>> State.id:Integer =>=>=> RelationalSchema.Column>> state.id PRIMARY KEY;
ClassDiagram.Attribut>> State.name:String =>=>=> RelationalSchema.Column>> state.name;
ClassDiagram.Attribut>> D.oid:long =>=>=> RelationalSchema.Column>> d.oid PRIMARY KEY;
ClassDiagram.Attribut>> D.version:int =>=>=> RelationalSchema.Column>> d.version;
ClassDiagram.Attribut>> D.GeneratedName:A =>=>=> RelationalSchema.Column>> d.GeneratedName;
ClassDiagram.Attribut>> D.single:A =>=>=> RelationalSchema.Column>> d.single;
ClassDiagram.Attribut>> NaturalIdOnManyToOne.id:int =>=>=> RelationalSchema.Column>> naturalidonmanytoone.id PRIMARY KEY;
ClassDiagram.Attribut>> A.oid:long =>=>=> RelationalSchema.Column>> a.oid PRIMARY KEY;
ClassDiagram.Attribut>> A.version:int =>=>=> RelationalSchema.Column>> a.version;
ClassDiagram.Attribut>> A.name:String =>=>=> RelationalSchema.Column>> a.name;
ClassDiagram.Attribut>> A.ds:Set<D> =>=>=> RelationalSchema.Column>> a.ds;
ClassDiagram.Attribut>> A.single:D =>=>=> RelationalSchema.Column>> a.single;
ClassDiagram.Attribut>> A.accountid:AId =>=>=> RelationalSchema.Column>> a.accountid;
ClassDiagram.Attribut>> A.shortcode:String =>=>=> RelationalSchema.Column>> a.shortcode;
ClassDiagram.Attribut>> Boat.id:Integer =>=>=> RelationalSchema.Column>> boat.id PRIMARY KEY;
ClassDiagram.Attribut>> Boat.size:int =>=>=> RelationalSchema.Column>> boat.size;
ClassDiagram.Attribut>> Boat.weight:int =>=>=> RelationalSchema.Column>> boat.weight;
ClassDiagram.Attribut>> Address.id:Integer =>=>=> RelationalSchema.Column>> address.id PRIMARY KEY;
ClassDiagram.Attribut>> Address.city:String =>=>=> RelationalSchema.Column>> address.city;
ClassDiagram.Attribut>> OwnerAddress.id:Integer =>=>=> RelationalSchema.Column>> owneraddress.id PRIMARY KEY;
ClassDiagram.Attribut>> Computer.id:ComputerPk =>=>=> RelationalSchema.Column>> computer.id;
ClassDiagram.Attribut>> Computer.cpu:String =>=>=> RelationalSchema.Column>> computer.cpu;
ClassDiagram.Attribut>> Owner.id:Integer =>=>=> RelationalSchema.Column>> owner.id PRIMARY KEY;
ClassDiagram.Attribut>> Show.id:Integer =>=>=> RelationalSchema.Column>> show.id PRIMARY KEY;
ClassDiagram.Attribut>> PersonAddress.id:Integer =>=>=> RelationalSchema.Column>> personaddress.id PRIMARY KEY;
ClassDiagram.Attribut>> Owner.deleted:boolean =>=>=> RelationalSchema.Column>> owner.deleted;
ClassDiagram.Attribut>> Owner.id:Long =>=>=> RelationalSchema.Column>> owner.id PRIMARY KEY;
ClassDiagram.Attribut>> Owner.name:String =>=>=> RelationalSchema.Column>> owner.name;
ClassDiagram.Attribut>> Owner.version:Integer =>=>=> RelationalSchema.Column>> owner.version;
ClassDiagram.Attribut>> DeviceGroupConfig.name:String =>=>=> RelationalSchema.Column>> devicegroupconfig.name;
ClassDiagram.Attribut>> Device.GeneratedName:ManagedDevice =>=>=> RelationalSchema.Column>> device.GeneratedName;
ClassDiagram.Attribut>> Device.tag:String =>=>=> RelationalSchema.Column>> device.tag;
ClassDiagram.Attribut>> ManagedDevice.name:String =>=>=> RelationalSchema.Column>> manageddevice.name;
ClassDiagram.Attribut>> ManagedDevice.GeneratedName:Device =>=>=> RelationalSchema.Column>> manageddevice.GeneratedName;
ClassDiagram.Attribut>> ManagedDevice.GeneratedName:DeviceGroupConfig =>=>=> RelationalSchema.Column>> manageddevice.GeneratedName;
ClassDiagram.Attribut>> SerialNumber.id:SerialNumberPk =>=>=> RelationalSchema.Column>> serialnumber.id PRIMARY KEY;
ClassDiagram.Attribut>> SerialNumber.value:String =>=>=> RelationalSchema.Column>> serialnumber.value;
ClassDiagram.Attribut>> Address.id:long =>=>=> RelationalSchema.Column>> address.id PRIMARY KEY;
ClassDiagram.Attribut>> Person.id:long =>=>=> RelationalSchema.Column>> person.id PRIMARY KEY;
ClassDiagram.Attribut>> Heart.id:Integer =>=>=> RelationalSchema.Column>> heart.id PRIMARY KEY;
ClassDiagram.Attribut>> PartyAffiliate.partyid:String =>=>=> RelationalSchema.Column>> partyaffiliate.partyid PRIMARY KEY;
ClassDiagram.Attribut>> PartyAffiliate.affiliatename:String =>=>=> RelationalSchema.Column>> partyaffiliate.affiliatename;
ClassDiagram.Attribut>> Trousers.id:Integer =>=>=> RelationalSchema.Column>> trousers.id PRIMARY KEY;
ClassDiagram.Attribut>> Client.id:Integer =>=>=> RelationalSchema.Column>> client.id PRIMARY KEY;
ClassDiagram.Attribut>> Client.name:String =>=>=> RelationalSchema.Column>> client.name;
ClassDiagram.Attribut>> Client.GeneratedName:Address =>=>=> RelationalSchema.Column>> client.GeneratedName;
ClassDiagram.Attribut>> Client.secondary:Address =>=>=> RelationalSchema.Column>> client.secondary;
ClassDiagram.Attribut>> Person.id:Integer =>=>=> RelationalSchema.Column>> person.id PRIMARY KEY;
ClassDiagram.Attribut>> ShowDescription.id:Integer =>=>=> RelationalSchema.Column>> showdescription.id PRIMARY KEY;
ClassDiagram.Attribut>> Party.partyid:String =>=>=> RelationalSchema.Column>> party.partyid PRIMARY KEY;
ClassDiagram.Attribut>> TrousersZip.id:Integer =>=>=> RelationalSchema.Column>> trouserszip.id PRIMARY KEY;
ClassDiagram.Attribut>> Body.id:Integer =>=>=> RelationalSchema.Column>> body.id PRIMARY KEY;
ClassDiagram.Attribut>> Body.GeneratedName:Heart =>=>=> RelationalSchema.Column>> body.GeneratedName;
ClassDiagram.Attribut>> Shipment.id:Long =>=>=> RelationalSchema.Column>> shipment.id PRIMARY KEY;
ClassDiagram.Attribut>> Shipment.createdon:Date =>=>=> RelationalSchema.Column>> shipment.createdon;
ClassDiagram.Attribut>> Shipment.GeneratedName:ShipmentState =>=>=> RelationalSchema.Column>> shipment.GeneratedName;
ClassDiagram.Attribut>> Item.id:Long =>=>=> RelationalSchema.Column>> item.id PRIMARY KEY;
ClassDiagram.Attribut>> Item.name:String =>=>=> RelationalSchema.Column>> item.name;
ClassDiagram.Attribut>> Stamp.id:Long =>=>=> RelationalSchema.Column>> stamp.id PRIMARY KEY;
ClassDiagram.Attribut>> Stamp.country:String =>=>=> RelationalSchema.Column>> stamp.country;
ClassDiagram.Attribut>> Passport.id:Long =>=>=> RelationalSchema.Column>> passport.id PRIMARY KEY;
ClassDiagram.Attribut>> Passport.name:String =>=>=> RelationalSchema.Column>> passport.name;
ClassDiagram.Attribut>> C.age:int =>=>=> RelationalSchema.Column>> c.age;
ClassDiagram.Attribut>> Life.id:Integer =>=>=> RelationalSchema.Column>> life.id PRIMARY KEY;
ClassDiagram.Attribut>> Life.duration:int =>=>=> RelationalSchema.Column>> life.duration;
ClassDiagram.Attribut>> Life.fulldescription:String =>=>=> RelationalSchema.Column>> life.fulldescription;
ClassDiagram.Attribut>> SysUserOrm.userid:long =>=>=> RelationalSchema.Column>> sysuserorm.userid PRIMARY KEY;
ClassDiagram.Attribut>> B.id:Integer =>=>=> RelationalSchema.Column>> b.id PRIMARY KEY;
ClassDiagram.Attribut>> B.name:String =>=>=> RelationalSchema.Column>> b.name;
ClassDiagram.Attribut>> Dog.id:DogPk =>=>=> RelationalSchema.Column>> dog.id PRIMARY KEY;
ClassDiagram.Attribut>> Dog.weight:int =>=>=> RelationalSchema.Column>> dog.weight;
ClassDiagram.Attribut>> Dog.thoroughbredname:String =>=>=> RelationalSchema.Column>> dog.thoroughbredname;
ClassDiagram.Attribut>> Cat.id:Integer =>=>=> RelationalSchema.Column>> cat.id PRIMARY KEY;
ClassDiagram.Attribut>> Cat.name:String =>=>=> RelationalSchema.Column>> cat.name;
ClassDiagram.Attribut>> Cat.secondname:String =>=>=> RelationalSchema.Column>> cat.secondname;
ClassDiagram.Attribut>> Cat.storypart1:String =>=>=> RelationalSchema.Column>> cat.storypart1;
ClassDiagram.Attribut>> Cat.storypart2:String =>=>=> RelationalSchema.Column>> cat.storypart2;
ClassDiagram.Attribut>> SimpleCat.id:Integer =>=>=> RelationalSchema.Column>> simplecat.id PRIMARY KEY;
ClassDiagram.Attribut>> SimpleCat.name:String =>=>=> RelationalSchema.Column>> simplecat.name;
ClassDiagram.Attribut>> Life.id:Integer =>=>=> RelationalSchema.Column>> life.id PRIMARY KEY;
ClassDiagram.Attribut>> Life.duration:int =>=>=> RelationalSchema.Column>> life.duration;
ClassDiagram.Attribut>> Life.fulldescription:String =>=>=> RelationalSchema.Column>> life.fulldescription;
ClassDiagram.Attribut>> SysGroupsOrm.groupid:long =>=>=> RelationalSchema.Column>> sysgroupsorm.groupid PRIMARY KEY;
ClassDiagram.Attribut>> Death.id:Integer =>=>=> RelationalSchema.Column>> death.id PRIMARY KEY;
ClassDiagram.Attribut>> Death.GeneratedName:Date =>=>=> RelationalSchema.Column>> death.GeneratedName;
ClassDiagram.Attribut>> Death.howdoesithappen:String =>=>=> RelationalSchema.Column>> death.howdoesithappen;
ClassDiagram.Attribut>> DomainAdmin.domainname:String =>=>=> RelationalSchema.Column>> domainadmin.domainname PRIMARY KEY;
ClassDiagram.Attribut>> DomainAdmin.adminuser:String =>=>=> RelationalSchema.Column>> domainadmin.adminuser PRIMARY KEY;
ClassDiagram.Attribut>> DomainAdmin.nickname:String =>=>=> RelationalSchema.Column>> domainadmin.nickname;
ClassDiagram.Attribut>> LobHolder.id:Long =>=>=> RelationalSchema.Column>> lobholder.id PRIMARY KEY;
ClassDiagram.Attribut>> LobHolder.locator:Clob =>=>=> RelationalSchema.Column>> lobholder.locator;
ClassDiagram.Attribut>> LobHolder.locator:Blob =>=>=> RelationalSchema.Column>> lobholder.locator;
ClassDiagram.Attribut>> LobHolder.counter:Integer =>=>=> RelationalSchema.Column>> lobholder.counter;
ClassDiagram.Attribut>> LobTestEntity.id:Long =>=>=> RelationalSchema.Column>> lobtestentity.id PRIMARY KEY;
ClassDiagram.Attribut>> LobTestEntity.lobvalue:Blob =>=>=> RelationalSchema.Column>> lobtestentity.lobvalue;
ClassDiagram.Attribut>> LobTestEntity.qwerty:String =>=>=> RelationalSchema.Column>> lobtestentity.qwerty;
ClassDiagram.Attribut>> EntitySerialize.id:long =>=>=> RelationalSchema.Column>> entityserialize.id PRIMARY KEY;
ClassDiagram.Attribut>> EntitySerialize.explicitlob:ExplicitSerializable =>=>=> RelationalSchema.Column>> entityserialize.explicitlob;
ClassDiagram.Attribut>> EntitySerialize.explicit:ExplicitSerializable =>=>=> RelationalSchema.Column>> entityserialize.explicit;
ClassDiagram.Attribut>> EntitySerialize.implicit:ImplicitSerializable =>=>=> RelationalSchema.Column>> entityserialize.implicit;
ClassDiagram.Attribut>> EntitySerialize.explicitoverridingimplicit:ImplicitSerializable =>=>=> RelationalSchema.Column>> entityserialize.explicitoverridingimplicit;
ClassDiagram.Attribut>> VersionedBook.id:Integer =>=>=> RelationalSchema.Column>> versionedbook.id PRIMARY KEY;
ClassDiagram.Attribut>> VersionedBook.version:Integer =>=>=> RelationalSchema.Column>> versionedbook.version;
ClassDiagram.Attribut>> MaterializedBlobEntity.id:Long =>=>=> RelationalSchema.Column>> materializedblobentity.id PRIMARY KEY;
ClassDiagram.Attribut>> MaterializedBlobEntity.name:String =>=>=> RelationalSchema.Column>> materializedblobentity.name;
ClassDiagram.Attribut>> MaterializedBlobEntity.thes:byte =>=>=> RelationalSchema.Column>> materializedblobentity.thes;
ClassDiagram.Attribut>> LongStringHolder.id:Long =>=>=> RelationalSchema.Column>> longstringholder.id PRIMARY KEY;
ClassDiagram.Attribut>> LongStringHolder.name:char =>=>=> RelationalSchema.Column>> longstringholder.name;
ClassDiagram.Attribut>> LongStringHolder.whatever:Character =>=>=> RelationalSchema.Column>> longstringholder.whatever;
ClassDiagram.Attribut>> LongStringHolder.long:String =>=>=> RelationalSchema.Column>> longstringholder.long;
ClassDiagram.Attribut>> Document.id:Long =>=>=> RelationalSchema.Column>> document.id PRIMARY KEY;
ClassDiagram.Attribut>> Document.revision:Integer =>=>=> RelationalSchema.Column>> document.revision;
ClassDiagram.Attribut>> Document.fulltext:String =>=>=> RelationalSchema.Column>> document.fulltext;
ClassDiagram.Attribut>> Document.shortdescription:String =>=>=> RelationalSchema.Column>> document.shortdescription;
ClassDiagram.Attribut>> Book.id:Integer =>=>=> RelationalSchema.Column>> book.id PRIMARY KEY;
ClassDiagram.Attribut>> ImageHolder.id:Long =>=>=> RelationalSchema.Column>> imageholder.id PRIMARY KEY;
ClassDiagram.Attribut>> ImageHolder.longarray:byte =>=>=> RelationalSchema.Column>> imageholder.longarray;
ClassDiagram.Attribut>> ImageHolder.GeneratedName:Dog =>=>=> RelationalSchema.Column>> imageholder.GeneratedName;
ClassDiagram.Attribut>> ImageHolder.picarray:Byte =>=>=> RelationalSchema.Column>> imageholder.picarray;
ClassDiagram.Attribut>> VersionedCompiledCode.id:Integer =>=>=> RelationalSchema.Column>> versionedcompiledcode.id PRIMARY KEY;
ClassDiagram.Attribut>> VersionedCompiledCode.version:Integer =>=>=> RelationalSchema.Column>> versionedcompiledcode.version;
ClassDiagram.Attribut>> CompiledCode.id:Integer =>=>=> RelationalSchema.Column>> compiledcode.id PRIMARY KEY;
ClassDiagram.Attribut>> LocalDateTest.expected:LocalDate =>=>=> RelationalSchema.Column>> localdatetest.expected;
ClassDiagram.Attribut>> SQLServer2008NVarCharTypeTest.ssr:StandardServiceRegistry =>=>=> RelationalSchema.Column>> sqlserver2008nvarchartypetest.ssr;
ClassDiagram.Attribut>> SQLServer2008NVarCharTypeTest.metadata:MetadataImplementor =>=>=> RelationalSchema.Column>> sqlserver2008nvarchartypetest.metadata;
ClassDiagram.Attribut>> SQLServer2008NVarCharTypeTest.GeneratedName:SchemaExport =>=>=> RelationalSchema.Column>> sqlserver2008nvarchartypetest.GeneratedName;
ClassDiagram.Attribut>> AnnotatedMaster.id:Integer =>=>=> RelationalSchema.Column>> annotatedmaster.id PRIMARY KEY;
ClassDiagram.Attribut>> AnnotatedMaster.name:String =>=>=> RelationalSchema.Column>> annotatedmaster.name;
ClassDiagram.Attribut>> AnnotatedDetail.id:Integer =>=>=> RelationalSchema.Column>> annotateddetail.id PRIMARY KEY;
ClassDiagram.Attribut>> AnnotatedDetail.name:String =>=>=> RelationalSchema.Column>> annotateddetail.name;
ClassDiagram.Attribut>> AnnotatedDetail.//becauseotherwiseschemaexportwouldnotknowaboutit...domain:String =>=>=> RelationalSchema.Column>> annotateddetail.//becauseotherwiseschemaexportwouldnotknowaboutit...domain;
ClassDiagram.Attribut>> Polygon.id:Integer =>=>=> RelationalSchema.Column>> polygon.id PRIMARY KEY;
ClassDiagram.Attribut>> Polygon.description:String =>=>=> RelationalSchema.Column>> polygon.description;
ClassDiagram.Attribut>> TablePerClassInheritancePersistTest.john:Man =>=>=> RelationalSchema.Column>> tableperclassinheritancepersisttest.john;
ClassDiagram.Attribut>> TablePerClassInheritancePersistTest.jane:Woman =>=>=> RelationalSchema.Column>> tableperclassinheritancepersisttest.jane;
ClassDiagram.Attribut>> TablePerClassInheritancePersistTest.susan:Child =>=>=> RelationalSchema.Column>> tableperclassinheritancepersisttest.susan;
ClassDiagram.Attribut>> TablePerClassInheritancePersistTest.mark:Child =>=>=> RelationalSchema.Column>> tableperclassinheritancepersisttest.mark;
ClassDiagram.Attribut>> TablePerClassInheritancePersistTest.GeneratedName:Family =>=>=> RelationalSchema.Column>> tableperclassinheritancepersisttest.GeneratedName;
ClassDiagram.Attribut>> TablePerClassInheritancePersistTest.children:List<Child> =>=>=> RelationalSchema.Column>> tableperclassinheritancepersisttest.children;
ClassDiagram.Attribut>> TablePerClassInheritancePersistTest.familymembers:List<Person> =>=>=> RelationalSchema.Column>> tableperclassinheritancepersisttest.familymembers;
ClassDiagram.Attribut>> SingleTableInheritancePersistTest.john:Man =>=>=> RelationalSchema.Column>> singletableinheritancepersisttest.john;
ClassDiagram.Attribut>> SingleTableInheritancePersistTest.jane:Woman =>=>=> RelationalSchema.Column>> singletableinheritancepersisttest.jane;
ClassDiagram.Attribut>> SingleTableInheritancePersistTest.susan:Child =>=>=> RelationalSchema.Column>> singletableinheritancepersisttest.susan;
ClassDiagram.Attribut>> SingleTableInheritancePersistTest.mark:Child =>=>=> RelationalSchema.Column>> singletableinheritancepersisttest.mark;
ClassDiagram.Attribut>> SingleTableInheritancePersistTest.GeneratedName:Family =>=>=> RelationalSchema.Column>> singletableinheritancepersisttest.GeneratedName;
ClassDiagram.Attribut>> SingleTableInheritancePersistTest.children:List<Child> =>=>=> RelationalSchema.Column>> singletableinheritancepersisttest.children;
ClassDiagram.Attribut>> SingleTableInheritancePersistTest.familymembers:List<Person> =>=>=> RelationalSchema.Column>> singletableinheritancepersisttest.familymembers;
ClassDiagram.Attribut>> ParentEntity.id:Long =>=>=> RelationalSchema.Column>> parententity.id PRIMARY KEY;
ClassDiagram.Attribut>> Quadrilateral.anglea:Double =>=>=> RelationalSchema.Column>> quadrilateral.anglea;
ClassDiagram.Attribut>> Quadrilateral.angleb:Double =>=>=> RelationalSchema.Column>> quadrilateral.angleb;
ClassDiagram.Attribut>> Quadrilateral.anglec:Double =>=>=> RelationalSchema.Column>> quadrilateral.anglec;
ClassDiagram.Attribut>> InheritingEntity.somevalue:String =>=>=> RelationalSchema.Column>> inheritingentity.somevalue;
ClassDiagram.Attribut>> RootEntity.id:Long =>=>=> RelationalSchema.Column>> rootentity.id PRIMARY KEY;
ClassDiagram.Attribut>> BatchFetchNotFoundIgnoreDefaultStyleTest.statementinspector:AStatementInspector =>=>=> RelationalSchema.Column>> batchfetchnotfoundignoredefaultstyletest.statementinspector;
ClassDiagram.Attribut>> BatchFetchNotFoundIgnoreDefaultStyleTest.number_of_employees:int =>=>=> RelationalSchema.Column>> batchfetchnotfoundignoredefaultstyletest.number_of_employees;
ClassDiagram.Attribut>> BatchFetchNotFoundIgnoreDefaultStyleTest.tasks:List<Task> =>=>=> RelationalSchema.Column>> batchfetchnotfoundignoredefaultstyletest.tasks;
ClassDiagram.Attribut>> B.idpart1:Integer =>=>=> RelationalSchema.Column>> b.idpart1 PRIMARY KEY;
ClassDiagram.Attribut>> B.idpart2:Integer =>=>=> RelationalSchema.Column>> b.idpart2 PRIMARY KEY;
ClassDiagram.Attribut>> B.otherproperty:String =>=>=> RelationalSchema.Column>> b.otherproperty;
ClassDiagram.Attribut>> BatchLoadableEntity.id:Integer =>=>=> RelationalSchema.Column>> batchloadableentity.id PRIMARY KEY;
ClassDiagram.Attribut>> BatchLoadableEntity.name:String =>=>=> RelationalSchema.Column>> batchloadableentity.name;
ClassDiagram.Attribut>> A.id:Integer =>=>=> RelationalSchema.Column>> a.id PRIMARY KEY;
ClassDiagram.Attribut>> A.otherproperty:String =>=>=> RelationalSchema.Column>> a.otherproperty;
ClassDiagram.Attribut>> Library.entid:int =>=>=> RelationalSchema.Column>> library.entid PRIMARY KEY;
ClassDiagram.Attribut>> Book.isbn:String =>=>=> RelationalSchema.Column>> book.isbn;
ClassDiagram.Attribut>> Product.entid:int =>=>=> RelationalSchema.Column>> product.entid PRIMARY KEY;
ClassDiagram.Attribut>> Product.inventorycode:String =>=>=> RelationalSchema.Column>> product.inventorycode;
ClassDiagram.Attribut>> Book.isbn:String =>=>=> RelationalSchema.Column>> book.isbn;
ClassDiagram.Attribut>> Library.entid:int =>=>=> RelationalSchema.Column>> library.entid PRIMARY KEY;
ClassDiagram.Attribut>> Product.entid:int =>=>=> RelationalSchema.Column>> product.entid PRIMARY KEY;
ClassDiagram.Attribut>> Product.inventorycode:String =>=>=> RelationalSchema.Column>> product.inventorycode;
ClassDiagram.Attribut>> Book.isbn:String =>=>=> RelationalSchema.Column>> book.isbn;
ClassDiagram.Attribut>> Product.entid:int =>=>=> RelationalSchema.Column>> product.entid PRIMARY KEY;
ClassDiagram.Attribut>> Product.inventorycode:String =>=>=> RelationalSchema.Column>> product.inventorycode;
ClassDiagram.Attribut>> Library.entid:int =>=>=> RelationalSchema.Column>> library.entid PRIMARY KEY;
ClassDiagram.Attribut>> User.login:String =>=>=> RelationalSchema.Column>> user.login;
ClassDiagram.Attribut>> User.passwordexpirydays:Double =>=>=> RelationalSchema.Column>> user.passwordexpirydays;
ClassDiagram.Attribut>> User.silly:String =>=>=> RelationalSchema.Column>> user.silly;
ClassDiagram.Attribut>> Customer.comments:String =>=>=> RelationalSchema.Column>> customer.comments;
ClassDiagram.Attribut>> Employee.title:String =>=>=> RelationalSchema.Column>> employee.title;
ClassDiagram.Attribut>> Employee.salary:BigDecimal =>=>=> RelationalSchema.Column>> employee.salary;
ClassDiagram.Attribut>> Person.id:long =>=>=> RelationalSchema.Column>> person.id PRIMARY KEY;
ClassDiagram.Attribut>> Person.name:String =>=>=> RelationalSchema.Column>> person.name;
ClassDiagram.Attribut>> Person.address:String =>=>=> RelationalSchema.Column>> person.address;
ClassDiagram.Attribut>> Person.zip:String =>=>=> RelationalSchema.Column>> person.zip;
ClassDiagram.Attribut>> Person.country:String =>=>=> RelationalSchema.Column>> person.country;
ClassDiagram.Attribut>> Person.heightinches:double =>=>=> RelationalSchema.Column>> person.heightinches;
ClassDiagram.Attribut>> Person.sex:char =>=>=> RelationalSchema.Column>> person.sex;
ClassDiagram.Attribut>> NegativeValueSequenceTest.loginspection:LoggerInspectionRule =>=>=> RelationalSchema.Column>> negativevaluesequencetest.loginspection;
ClassDiagram.Attribut>> LegacySequenceExportTest.ssr:StandardServiceRegistry =>=>=> RelationalSchema.Column>> legacysequenceexporttest.ssr;
ClassDiagram.Attribut>> SequenceExportTest.ssr:StandardServiceRegistry =>=>=> RelationalSchema.Column>> sequenceexporttest.ssr;
ClassDiagram.Attribut>> QueryHintTest.connectionprovider:PreparedStatementSpyConnectionProvider =>=>=> RelationalSchema.Column>> queryhinttest.connectionprovider;
ClassDiagram.Attribut>> ProductEntity.pk:Long =>=>=> RelationalSchema.Column>> productentity.pk PRIMARY KEY;
ClassDiagram.Attribut>> ProductEntity.description:Map<String,ILocalizable> =>=>=> RelationalSchema.Column>> productentity.description;
ClassDiagram.Attribut>> Publisher.id:Long =>=>=> RelationalSchema.Column>> publisher.id PRIMARY KEY;
ClassDiagram.Attribut>> Publisher.name:String =>=>=> RelationalSchema.Column>> publisher.name;
ClassDiagram.Attribut>> NonTransactionalDataAccessTest.allowupdateoperationoutsidetransaction:String =>=>=> RelationalSchema.Column>> nontransactionaldataaccesstest.allowupdateoperationoutsidetransaction;
ClassDiagram.Attribut>> UnrelatedEntity.id:Long =>=>=> RelationalSchema.Column>> unrelatedentity.id PRIMARY KEY;
ClassDiagram.Attribut>> UnrelatedEntity.name:String =>=>=> RelationalSchema.Column>> unrelatedentity.name;
ClassDiagram.Attribut>> BookStore.id:Long =>=>=> RelationalSchema.Column>> bookstore.id PRIMARY KEY;
ClassDiagram.Attribut>> BookStore.name:String =>=>=> RelationalSchema.Column>> bookstore.name;
ClassDiagram.Attribut>> Book.id:Long =>=>=> RelationalSchema.Column>> book.id PRIMARY KEY;
ClassDiagram.Attribut>> Book.title:String =>=>=> RelationalSchema.Column>> book.title;
ClassDiagram.Attribut>> Book.GeneratedName:Author =>=>=> RelationalSchema.Column>> book.GeneratedName;
ClassDiagram.Attribut>> Author.id:Long =>=>=> RelationalSchema.Column>> author.id PRIMARY KEY;
ClassDiagram.Attribut>> Author.name:String =>=>=> RelationalSchema.Column>> author.name;
ClassDiagram.Attribut>> Author.GeneratedName:Publisher =>=>=> RelationalSchema.Column>> author.GeneratedName;
ClassDiagram.Attribut>> Employee.id:Long =>=>=> RelationalSchema.Column>> employee.id PRIMARY KEY;
ClassDiagram.Attribut>> Employee.name:String =>=>=> RelationalSchema.Column>> employee.name;
ClassDiagram.Attribut>> EmployeeGroup.id:EmployeeGroupId =>=>=> RelationalSchema.Column>> employeegroup.id PRIMARY KEY;
ClassDiagram.Attribut>> Inventory.id:int =>=>=> RelationalSchema.Column>> inventory.id PRIMARY KEY;
ClassDiagram.Attribut>> Inventory.GeneratedName:Store =>=>=> RelationalSchema.Column>> inventory.GeneratedName;
ClassDiagram.Attribut>> Inventory.GeneratedName:Product =>=>=> RelationalSchema.Column>> inventory.GeneratedName;
ClassDiagram.Attribut>> Inventory.quantity:Long =>=>=> RelationalSchema.Column>> inventory.quantity;
ClassDiagram.Attribut>> Inventory.storeprice:BigDecimal =>=>=> RelationalSchema.Column>> inventory.storeprice;
ClassDiagram.Attribut>> Product.id:String =>=>=> RelationalSchema.Column>> product.id PRIMARY KEY;
ClassDiagram.Attribut>> Product.name:String =>=>=> RelationalSchema.Column>> product.name;
ClassDiagram.Attribut>> Product.description:String =>=>=> RelationalSchema.Column>> product.description;
ClassDiagram.Attribut>> Product.msrp:BigDecimal =>=>=> RelationalSchema.Column>> product.msrp;
ClassDiagram.Attribut>> Product.version:int =>=>=> RelationalSchema.Column>> product.version;
ClassDiagram.Attribut>> Store.id:int =>=>=> RelationalSchema.Column>> store.id PRIMARY KEY;
ClassDiagram.Attribut>> Store.name:String =>=>=> RelationalSchema.Column>> store.name;
ClassDiagram.Attribut>> Store.version:int =>=>=> RelationalSchema.Column>> store.version;
ClassDiagram.Attribut>> EntityWithStringCompositeKey.pk:StringCompositeKey =>=>=> RelationalSchema.Column>> entitywithstringcompositekey.pk;
ClassDiagram.Attribut>> EntityWithCompositeKey.pk:CompositeKey =>=>=> RelationalSchema.Column>> entitywithcompositekey.pk;
ClassDiagram.Attribut>> ATable.firstid:Integer =>=>=> RelationalSchema.Column>> atable.firstid PRIMARY KEY;
ClassDiagram.Attribut>> TableB.id:TableBId =>=>=> RelationalSchema.Column>> tableb.id;
ClassDiagram.Attribut>> TableA.id:int =>=>=> RelationalSchema.Column>> tablea.id PRIMARY KEY;
ClassDiagram.Attribut>> TableA.test:String =>=>=> RelationalSchema.Column>> tablea.test;
ClassDiagram.Attribut>> TableA.test2:String =>=>=> RelationalSchema.Column>> tablea.test2;
ClassDiagram.Attribut>> StatelessSessionConnectionTest.loginspection:LoggerInspectionRule =>=>=> RelationalSchema.Column>> statelesssessionconnectiontest.loginspection;
ClassDiagram.Attribut>> Contact.id:Long =>=>=> RelationalSchema.Column>> contact.id PRIMARY KEY;
ClassDiagram.Attribut>> Contact.type:String =>=>=> RelationalSchema.Column>> contact.type;
ClassDiagram.Attribut>> Contact.firstname:String =>=>=> RelationalSchema.Column>> contact.firstname;
ClassDiagram.Attribut>> Contact.lastname:String =>=>=> RelationalSchema.Column>> contact.lastname;
ClassDiagram.Attribut>> HANABooleanTest.entity_name:String =>=>=> RelationalSchema.Column>> hanabooleantest.entity_name;
ClassDiagram.Attribut>> HANABooleanTest.legacy_entity_name:String =>=>=> RelationalSchema.Column>> hanabooleantest.legacy_entity_name;
ClassDiagram.Attribut>> OracleFollowOnLockingTest.GeneratedName:SQLStatementInterceptor =>=>=> RelationalSchema.Column>> oraclefollowonlockingtest.GeneratedName;
ClassDiagram.Attribut>> Product2.id:Integer =>=>=> RelationalSchema.Column>> product2.id PRIMARY KEY;
ClassDiagram.Attribut>> Product2.description:String =>=>=> RelationalSchema.Column>> product2.description;
ClassDiagram.Attribut>> Folder.id:Long =>=>=> RelationalSchema.Column>> folder.id PRIMARY KEY;
ClassDiagram.Attribut>> Folder.name:String =>=>=> RelationalSchema.Column>> folder.name;
ClassDiagram.Attribut>> Folder.owner:String =>=>=> RelationalSchema.Column>> folder.owner;
ClassDiagram.Attribut>> Category.id:Integer =>=>=> RelationalSchema.Column>> category.id PRIMARY KEY;
ClassDiagram.Attribut>> Category.name:String =>=>=> RelationalSchema.Column>> category.name;
ClassDiagram.Attribut>> Phone.id:Long =>=>=> RelationalSchema.Column>> phone.id PRIMARY KEY;
ClassDiagram.Attribut>> Phone.number:String =>=>=> RelationalSchema.Column>> phone.number;
ClassDiagram.Attribut>> Phone.repairtimestamps:List<Date> =>=>=> RelationalSchema.Column>> phone.repairtimestamps;
ClassDiagram.Attribut>> Person.id:Long =>=>=> RelationalSchema.Column>> person.id PRIMARY KEY;
ClassDiagram.Attribut>> Person.name:String =>=>=> RelationalSchema.Column>> person.name;
ClassDiagram.Attribut>> Person.nickname:String =>=>=> RelationalSchema.Column>> person.nickname;
ClassDiagram.Attribut>> Person.address:String =>=>=> RelationalSchema.Column>> person.address;
ClassDiagram.Attribut>> Person.createdon:Date =>=>=> RelationalSchema.Column>> person.createdon;
ClassDiagram.Attribut>> Person.version:int =>=>=> RelationalSchema.Column>> person.version;
ClassDiagram.Attribut>> Shop.id:Long =>=>=> RelationalSchema.Column>> shop.id PRIMARY KEY;
ClassDiagram.Attribut>> Product.id:Long =>=>=> RelationalSchema.Column>> product.id PRIMARY KEY;
ClassDiagram.Attribut>> Child1.id:Long =>=>=> RelationalSchema.Column>> child1.id PRIMARY KEY;
ClassDiagram.Attribut>> Parent1.id:Long =>=>=> RelationalSchema.Column>> parent1.id PRIMARY KEY;
ClassDiagram.Attribut>> Child2.id:Long =>=>=> RelationalSchema.Column>> child2.id PRIMARY KEY;
ClassDiagram.Attribut>> InsertOrderingWithBidirectionalOneToMany.connectionprovider:PreparedStatementSpyConnectionProvider =>=>=> RelationalSchema.Column>> insertorderingwithbidirectionalonetomany.connectionprovider;
ClassDiagram.Attribut>> InsertOrderingWithJoinedTableInheritance.connectionprovider:PreparedStatementSpyConnectionProvider =>=>=> RelationalSchema.Column>> insertorderingwithjoinedtableinheritance.connectionprovider;
ClassDiagram.Attribut>> InsertOrderingWithBidirectionalManyToMany.connectionprovider:PreparedStatementSpyConnectionProvider =>=>=> RelationalSchema.Column>> insertorderingwithbidirectionalmanytomany.connectionprovider;
ClassDiagram.Attribut>> ElementCollectionTest.connectionprovider:PreparedStatementSpyConnectionProvider =>=>=> RelationalSchema.Column>> elementcollectiontest.connectionprovider;
ClassDiagram.Attribut>> InsertOrderingWithTablePerClassInheritance.connectionprovider:PreparedStatementSpyConnectionProvider =>=>=> RelationalSchema.Column>> insertorderingwithtableperclassinheritance.connectionprovider;
ClassDiagram.Attribut>> InsertOrderingWithJoinedTableMultiLevelInheritance.connectionprovider:PreparedStatementSpyConnectionProvider =>=>=> RelationalSchema.Column>> insertorderingwithjoinedtablemultilevelinheritance.connectionprovider;
ClassDiagram.Attribut>> InsertOrderingWithSingleTableInheritance.connectionprovider:PreparedStatementSpyConnectionProvider =>=>=> RelationalSchema.Column>> insertorderingwithsingletableinheritance.connectionprovider;
ClassDiagram.Attribut>> InsertOrderingWithMultipleManyToOne.connectionprovider:PreparedStatementSpyConnectionProvider =>=>=> RelationalSchema.Column>> insertorderingwithmultiplemanytoone.connectionprovider;
ClassDiagram.Attribut>> InsertOrderingWithBidirectionalOneToOne.connectionprovider:PreparedStatementSpyConnectionProvider =>=>=> RelationalSchema.Column>> insertorderingwithbidirectionalonetoone.connectionprovider;
ClassDiagram.Attribut>> InsertOrderingWithBidirectionalMapsIdOneToOne.connectionprovider:PreparedStatementSpyConnectionProvider =>=>=> RelationalSchema.Column>> insertorderingwithbidirectionalmapsidonetoone.connectionprovider;
ClassDiagram.Attribut>> InsertOrderingWithManyToOne.connectionprovider:PreparedStatementSpyConnectionProvider =>=>=> RelationalSchema.Column>> insertorderingwithmanytoone.connectionprovider;
ClassDiagram.Attribut>> InsertOrderingWithUnidirectionalOneToOne.connectionprovider:PreparedStatementSpyConnectionProvider =>=>=> RelationalSchema.Column>> insertorderingwithunidirectionalonetoone.connectionprovider;
ClassDiagram.Attribut>> EntityLoadedInTwoPhaseLoadTest.fetch_profile_name:String =>=>=> RelationalSchema.Column>> entityloadedintwophaseloadtest.fetch_profile_name;
ClassDiagram.Attribut>> CollectionLoadedInTwoPhaseLoadTest.//note//therearetwofetchprofilesbecausewheniuseonlyonetherelationorgunit.people//ismissinginthefetchprofile.//itismissingbecauseoflogicinfetchprofile.addfetch().donotunderstandtheimplementation//ofthemethodnow,sotheworkaroundistousetwofetchprofiles.fetch_profile_name:String =>=>=> RelationalSchema.Column>> collectionloadedintwophaseloadtest.//note//therearetwofetchprofilesbecausewheniuseonlyonetherelationorgunit.people//ismissinginthefetchprofile.//itismissingbecauseoflogicinfetchprofile.addfetch().donotunderstandtheimplementation//ofthemethodnow,sotheworkaroundistousetwofetchprofiles.fetch_profile_name;
ClassDiagram.Attribut>> CollectionLoadedInTwoPhaseLoadTest.fetch_profile_name_2:String =>=>=> RelationalSchema.Column>> collectionloadedintwophaseloadtest.fetch_profile_name_2;
ClassDiagram.Attribut>> CollectionLoadedInTwoPhaseLoadTest.ou_1:String =>=>=> RelationalSchema.Column>> collectionloadedintwophaseloadtest.ou_1;
ClassDiagram.Attribut>> CollectionLoadedInTwoPhaseLoadTest.ou_2:String =>=>=> RelationalSchema.Column>> collectionloadedintwophaseloadtest.ou_2;
ClassDiagram.Attribut>> CollectionLoadedInTwoPhaseLoadTest.p_1:String =>=>=> RelationalSchema.Column>> collectionloadedintwophaseloadtest.p_1;
ClassDiagram.Attribut>> CollectionLoadedInTwoPhaseLoadTest.p_2:String =>=>=> RelationalSchema.Column>> collectionloadedintwophaseloadtest.p_2;
ClassDiagram.Attribut>> Employee.fetch_profile_tree:String =>=>=> RelationalSchema.Column>> employee.fetch_profile_tree;
ClassDiagram.Attribut>> Employee.id:Long =>=>=> RelationalSchema.Column>> employee.id PRIMARY KEY;
ClassDiagram.Attribut>> Palmtree.leavesize:double =>=>=> RelationalSchema.Column>> palmtree.leavesize;
ClassDiagram.Attribut>> Portal.id:Long =>=>=> RelationalSchema.Column>> portal.id PRIMARY KEY;
ClassDiagram.Attribut>> Gate.id:Long =>=>=> RelationalSchema.Column>> gate.id PRIMARY KEY;
ClassDiagram.Attribut>> Window.id:Long =>=>=> RelationalSchema.Column>> window.id PRIMARY KEY;
ClassDiagram.Attribut>> Tree.id:Long =>=>=> RelationalSchema.Column>> tree.id PRIMARY KEY;
ClassDiagram.Attribut>> AnnotationBinderTest.loginspection:LoggerInspectionRule =>=>=> RelationalSchema.Column>> annotationbindertest.loginspection;
ClassDiagram.Attribut>> LazyAbstractEntityReference.id:Integer =>=>=> RelationalSchema.Column>> lazyabstractentityreference.id PRIMARY KEY;
ClassDiagram.Attribut>> AbstractEntity.id:Integer =>=>=> RelationalSchema.Column>> abstractentity.id PRIMARY KEY;
ClassDiagram.Attribut>> ConcreteEntity.content:String =>=>=> RelationalSchema.Column>> concreteentity.content;
ClassDiagram.Attribut>> Alias.id:Integer =>=>=> RelationalSchema.Column>> alias.id PRIMARY KEY;
ClassDiagram.Attribut>> Alias.alias:String =>=>=> RelationalSchema.Column>> alias.alias;
ClassDiagram.Attribut>> Character.id:Integer =>=>=> RelationalSchema.Column>> character.id PRIMARY KEY;
ClassDiagram.Attribut>> Character.name:String =>=>=> RelationalSchema.Column>> character.name;
ClassDiagram.Attribut>> MultipleCollectionRefEntity1.id:Long =>=>=> RelationalSchema.Column>> multiplecollectionrefentity1.id PRIMARY KEY;
ClassDiagram.Attribut>> MultipleCollectionRefEntity1.text:String =>=>=> RelationalSchema.Column>> multiplecollectionrefentity1.text;
ClassDiagram.Attribut>> MultipleCollectionRefEntity1.multiplecollectionentityid:Long =>=>=> RelationalSchema.Column>> multiplecollectionrefentity1.multiplecollectionentityid;
ClassDiagram.Attribut>> MultipleCollectionEntity.id:Long =>=>=> RelationalSchema.Column>> multiplecollectionentity.id PRIMARY KEY;
ClassDiagram.Attribut>> MultipleCollectionEntity.text:String =>=>=> RelationalSchema.Column>> multiplecollectionentity.text;
ClassDiagram.Attribut>> MultipleCollectionRefEntity2.id:Long =>=>=> RelationalSchema.Column>> multiplecollectionrefentity2.id PRIMARY KEY;
ClassDiagram.Attribut>> MultipleCollectionRefEntity2.text:String =>=>=> RelationalSchema.Column>> multiplecollectionrefentity2.text;
ClassDiagram.Attribut>> MultipleCollectionRefEntity2.multiplecollectionentityid:Long =>=>=> RelationalSchema.Column>> multiplecollectionrefentity2.multiplecollectionentityid;
ClassDiagram.Attribut>> AbstractSkipAutoCommitTest.connectionprovider:PreparedStatementSpyConnectionProvider =>=>=> RelationalSchema.Column>> abstractskipautocommittest.connectionprovider;
ClassDiagram.Attribut>> EntityA.id:int =>=>=> RelationalSchema.Column>> entitya.id PRIMARY KEY;
ClassDiagram.Attribut>> EntityA.name:String =>=>=> RelationalSchema.Column>> entitya.name;
ClassDiagram.Attribut>> Element.id:Long =>=>=> RelationalSchema.Column>> element.id PRIMARY KEY;
ClassDiagram.Attribut>> Element.code:String =>=>=> RelationalSchema.Column>> element.code;
ClassDiagram.Attribut>> Step.id:Integer =>=>=> RelationalSchema.Column>> step.id PRIMARY KEY;
ClassDiagram.Attribut>> ColumnNamesTest.jdbcmetadataextractorstrategy:String =>=>=> RelationalSchema.Column>> columnnamestest.jdbcmetadataextractorstrategy;
ClassDiagram.Attribut>> ColumnNamesTest.ssr:StandardServiceRegistry =>=>=> RelationalSchema.Column>> columnnamestest.ssr;
ClassDiagram.Attribut>> ColumnNamesTest.GeneratedName:Metadata =>=>=> RelationalSchema.Column>> columnnamestest.GeneratedName;
ClassDiagram.Attribut>> ColumnNamesTest.output:File =>=>=> RelationalSchema.Column>> columnnamestest.output;
ClassDiagram.Attribut>> SchemaExportWithIndexAndDefaultSchema.GeneratedName:ServiceRegistry =>=>=> RelationalSchema.Column>> schemaexportwithindexanddefaultschema.GeneratedName;
ClassDiagram.Attribut>> SchemaExportWithIndexAndDefaultSchema.metadata:MetadataImplementor =>=>=> RelationalSchema.Column>> schemaexportwithindexanddefaultschema.metadata;
ClassDiagram.Attribut>> ConnectionsReleaseTest.ssr:StandardServiceRegistry =>=>=> RelationalSchema.Column>> connectionsreleasetest.ssr;
ClassDiagram.Attribut>> ConnectionsReleaseTest.metadata:MetadataImplementor =>=>=> RelationalSchema.Column>> connectionsreleasetest.metadata;
ClassDiagram.Attribut>> ConnectionsReleaseTest.connectionprovider:ConnectionProviderDecorator =>=>=> RelationalSchema.Column>> connectionsreleasetest.connectionprovider;
ClassDiagram.Attribut>> SchemaUpdateHaltOnErrorTest.output:File =>=>=> RelationalSchema.Column>> schemaupdatehaltonerrortest.output;
ClassDiagram.Attribut>> SchemaUpdateHaltOnErrorTest.ssr:StandardServiceRegistry =>=>=> RelationalSchema.Column>> schemaupdatehaltonerrortest.ssr;
ClassDiagram.Attribut>> SchemaUpdateHaltOnErrorTest.metadata:MetadataImplementor =>=>=> RelationalSchema.Column>> schemaupdatehaltonerrortest.metadata;
ClassDiagram.Attribut>> SchemaUpdateWithFunctionIndexTest.GeneratedName:ServiceRegistry =>=>=> RelationalSchema.Column>> schemaupdatewithfunctionindextest.GeneratedName;
ClassDiagram.Attribut>> SchemaUpdateWithFunctionIndexTest.metadata:MetadataImplementor =>=>=> RelationalSchema.Column>> schemaupdatewithfunctionindextest.metadata;
ClassDiagram.Attribut>> ColumnLengthTest.ssr:StandardServiceRegistry =>=>=> RelationalSchema.Column>> columnlengthtest.ssr;
ClassDiagram.Attribut>> ColumnLengthTest.output:File =>=>=> RelationalSchema.Column>> columnlengthtest.output;
ClassDiagram.Attribut>> ColumnLengthTest.metadata:MetadataImplementor =>=>=> RelationalSchema.Column>> columnlengthtest.metadata;
ClassDiagram.Attribut>> SchemaUpdateTest.skiptest:boolean =>=>=> RelationalSchema.Column>> schemaupdatetest.skiptest;
ClassDiagram.Attribut>> SchemaUpdateTest.jdbcmetadataextractorstrategy:String =>=>=> RelationalSchema.Column>> schemaupdatetest.jdbcmetadataextractorstrategy;
ClassDiagram.Attribut>> SchemaUpdateTest.output:File =>=>=> RelationalSchema.Column>> schemaupdatetest.output;
ClassDiagram.Attribut>> SchemaUpdateTest.ssr:StandardServiceRegistry =>=>=> RelationalSchema.Column>> schemaupdatetest.ssr;
ClassDiagram.Attribut>> SchemaUpdateTest.metadata:MetadataImplementor =>=>=> RelationalSchema.Column>> schemaupdatetest.metadata;
ClassDiagram.Attribut>> SchemaDropTest.GeneratedName:ServiceRegistry =>=>=> RelationalSchema.Column>> schemadroptest.GeneratedName;
ClassDiagram.Attribut>> SchemaDropTest.metadata:MetadataImplementor =>=>=> RelationalSchema.Column>> schemadroptest.metadata;
ClassDiagram.Attribut>> SchemaExportWithGlobalQuotingEnabledTest.GeneratedName:ServiceRegistry =>=>=> RelationalSchema.Column>> schemaexportwithglobalquotingenabledtest.GeneratedName;
ClassDiagram.Attribut>> SchemaExportWithGlobalQuotingEnabledTest.metadata:MetadataImplementor =>=>=> RelationalSchema.Column>> schemaexportwithglobalquotingenabledtest.metadata;
ClassDiagram.Attribut>> SchemaUpdateDelimiterTest.expected_delimiter:String =>=>=> RelationalSchema.Column>> schemaupdatedelimitertest.expected_delimiter;
ClassDiagram.Attribut>> SchemaUpdateSQLServerTest.jdbcmetadataextractorstrategy:String =>=>=> RelationalSchema.Column>> schemaupdatesqlservertest.jdbcmetadataextractorstrategy;
ClassDiagram.Attribut>> SchemaUpdateSQLServerTest.output:File =>=>=> RelationalSchema.Column>> schemaupdatesqlservertest.output;
ClassDiagram.Attribut>> SchemaUpdateSQLServerTest.ssr:StandardServiceRegistry =>=>=> RelationalSchema.Column>> schemaupdatesqlservertest.ssr;
ClassDiagram.Attribut>> SchemaUpdateSQLServerTest.metadata:MetadataImplementor =>=>=> RelationalSchema.Column>> schemaupdatesqlservertest.metadata;
ClassDiagram.Attribut>> QuotedTableNameSchemaUpdateTest.output:File =>=>=> RelationalSchema.Column>> quotedtablenameschemaupdatetest.output;
ClassDiagram.Attribut>> QuotedTableNameSchemaUpdateTest.ssr:StandardServiceRegistry =>=>=> RelationalSchema.Column>> quotedtablenameschemaupdatetest.ssr;
ClassDiagram.Attribut>> HANASchemaMigrationTargetScriptCreationTest.output:File =>=>=> RelationalSchema.Column>> hanaschemamigrationtargetscriptcreationtest.output;
ClassDiagram.Attribut>> SchemaUpdateFormatterTest.after_format:String =>=>=> RelationalSchema.Column>> schemaupdateformattertest.after_format;
ClassDiagram.Attribut>> SchemaUpdateFormatterTest.delimiter:String =>=>=> RelationalSchema.Column>> schemaupdateformattertest.delimiter;
ClassDiagram.Attribut>> ComponentIndexTest.ssr:StandardServiceRegistry =>=>=> RelationalSchema.Column>> componentindextest.ssr;
ClassDiagram.Attribut>> ComponentIndexTest.GeneratedName:Metadata =>=>=> RelationalSchema.Column>> componentindextest.GeneratedName;
ClassDiagram.Attribut>> IndexesCreationTest.ssr:StandardServiceRegistry =>=>=> RelationalSchema.Column>> indexescreationtest.ssr;
ClassDiagram.Attribut>> IndexesCreationTest.GeneratedName:Metadata =>=>=> RelationalSchema.Column>> indexescreationtest.GeneratedName;
ClassDiagram.Attribut>> MixedFieldPropertyAnnotationTest.GeneratedName:ServiceRegistry =>=>=> RelationalSchema.Column>> mixedfieldpropertyannotationtest.GeneratedName;
ClassDiagram.Attribut>> MixedFieldPropertyAnnotationTest.metadata:MetadataImplementor =>=>=> RelationalSchema.Column>> mixedfieldpropertyannotationtest.metadata;
ClassDiagram.Attribut>> PostgreSQLMultipleSchemaSequenceTest.output:File =>=>=> RelationalSchema.Column>> postgresqlmultipleschemasequencetest.output;
ClassDiagram.Attribut>> TestFkUpdating.GeneratedName:ServiceRegistry =>=>=> RelationalSchema.Column>> testfkupdating.GeneratedName;
ClassDiagram.Attribut>> TestFkUpdating.metadata:MetadataImplementor =>=>=> RelationalSchema.Column>> testfkupdating.metadata;
ClassDiagram.Attribut>> SchemaUpdateWithViewsTest.GeneratedName:ServiceRegistry =>=>=> RelationalSchema.Column>> schemaupdatewithviewstest.GeneratedName;
ClassDiagram.Attribut>> SchemaUpdateWithViewsTest.metadata:MetadataImplementor =>=>=> RelationalSchema.Column>> schemaupdatewithviewstest.metadata;
ClassDiagram.Attribut>> SchemaTwoEntity.id:String =>=>=> RelationalSchema.Column>> schematwoentity.id PRIMARY KEY;
ClassDiagram.Attribut>> SchemaOneEntity.id:String =>=>=> RelationalSchema.Column>> schemaoneentity.id PRIMARY KEY;
ClassDiagram.Attribut>> ForeignKeyDropTest.output:File =>=>=> RelationalSchema.Column>> foreignkeydroptest.output;
ClassDiagram.Attribut>> ForeignKeyDropTest.metadata:MetadataImplementor =>=>=> RelationalSchema.Column>> foreignkeydroptest.metadata;
ClassDiagram.Attribut>> ForeignKeyDropTest.ssr:StandardServiceRegistry =>=>=> RelationalSchema.Column>> foreignkeydroptest.ssr;
ClassDiagram.Attribut>> ForeignKeyDropTest.GeneratedName:SchemaExport =>=>=> RelationalSchema.Column>> foreignkeydroptest.GeneratedName;
ClassDiagram.Attribut>> SchemaUpdateWithKeywordAutoQuotingEnabledTest.ssr:StandardServiceRegistry =>=>=> RelationalSchema.Column>> schemaupdatewithkeywordautoquotingenabledtest.ssr;
ClassDiagram.Attribut>> SchemaUpdateWithKeywordAutoQuotingEnabledTest.metadata:MetadataImplementor =>=>=> RelationalSchema.Column>> schemaupdatewithkeywordautoquotingenabledtest.metadata;
ClassDiagram.Attribut>> Person.id:Long =>=>=> RelationalSchema.Column>> person.id PRIMARY KEY;
ClassDiagram.Attribut>> Group.id:Long =>=>=> RelationalSchema.Column>> group.id PRIMARY KEY;
ClassDiagram.Attribut>> JoinedInheritanceForeignKeyTest.output:File =>=>=> RelationalSchema.Column>> joinedinheritanceforeignkeytest.output;
ClassDiagram.Attribut>> JoinedInheritanceForeignKeyTest.ssr:StandardServiceRegistry =>=>=> RelationalSchema.Column>> joinedinheritanceforeignkeytest.ssr;
ClassDiagram.Attribut>> JoinedInheritanceForeignKeyTest.metadata:MetadataImplementor =>=>=> RelationalSchema.Column>> joinedinheritanceforeignkeytest.metadata;
ClassDiagram.Attribut>> Project.id:Long =>=>=> RelationalSchema.Column>> project.id PRIMARY KEY;
ClassDiagram.Attribut>> UserSetting.id:long =>=>=> RelationalSchema.Column>> usersetting.id PRIMARY KEY;
ClassDiagram.Attribut>> Phone.id:Long =>=>=> RelationalSchema.Column>> phone.id PRIMARY KEY;
ClassDiagram.Attribut>> Phone.number:String =>=>=> RelationalSchema.Column>> phone.number;
ClassDiagram.Attribut>> User.id:long =>=>=> RelationalSchema.Column>> user.id PRIMARY KEY;
ClassDiagram.Attribut>> Employee.id:Long =>=>=> RelationalSchema.Column>> employee.id PRIMARY KEY;
ClassDiagram.Attribut>> MigrationTest.GeneratedName:ServiceRegistry =>=>=> RelationalSchema.Column>> migrationtest.GeneratedName;
ClassDiagram.Attribut>> SchemaMigrationTargetScriptCreationTest.output:File =>=>=> RelationalSchema.Column>> schemamigrationtargetscriptcreationtest.output;
ClassDiagram.Attribut>> TableCommentTest.output:File =>=>=> RelationalSchema.Column>> tablecommenttest.output;
ClassDiagram.Attribut>> ImplicitCompositeKeyJoinTest.GeneratedName:Logger =>=>=> RelationalSchema.Column>> implicitcompositekeyjointest.GeneratedName;
ClassDiagram.Attribut>> SessionJdbcBatchTest.connectionprovider:PreparedStatementSpyConnectionProvider =>=>=> RelationalSchema.Column>> sessionjdbcbatchtest.connectionprovider;
ClassDiagram.Attribut>> SessionJdbcBatchTest.id:long =>=>=> RelationalSchema.Column>> sessionjdbcbatchtest.id;
ClassDiagram.Attribut>> HiloOptimizerConcurrencyTest.createschema:boolean =>=>=> RelationalSchema.Column>> hilooptimizerconcurrencytest.createschema;
ClassDiagram.Attribut>> HiloOptimizerConcurrencyTest.executor:ExecutorService =>=>=> RelationalSchema.Column>> hilooptimizerconcurrencytest.executor;
ClassDiagram.Attribut>> Super.id:Long =>=>=> RelationalSchema.Column>> super.id PRIMARY KEY;
ClassDiagram.Attribut>> Super.value:Long =>=>=> RelationalSchema.Column>> super.value;
ClassDiagram.Attribut>> House.id:Long =>=>=> RelationalSchema.Column>> house.id PRIMARY KEY;
ClassDiagram.Attribut>> House.streetaddress:String =>=>=> RelationalSchema.Column>> house.streetaddress;
ClassDiagram.Attribut>> User.id:long =>=>=> RelationalSchema.Column>> user.id PRIMARY KEY;
ClassDiagram.Attribut>> User.house1:Long =>=>=> RelationalSchema.Column>> user.house1;
ClassDiagram.Attribut>> User.house2:Long =>=>=> RelationalSchema.Column>> user.house2;
ClassDiagram.Attribut>> Phone.id:Integer =>=>=> RelationalSchema.Column>> phone.id PRIMARY KEY;
ClassDiagram.Attribut>> Phone.brandname:String =>=>=> RelationalSchema.Column>> phone.brandname;
ClassDiagram.Attribut>> Phone.price:float =>=>=> RelationalSchema.Column>> phone.price;
ClassDiagram.Attribut>> Role.id:long =>=>=> RelationalSchema.Column>> role.id PRIMARY KEY;
ClassDiagram.Attribut>> Person.id:long =>=>=> RelationalSchema.Column>> person.id PRIMARY KEY;
ClassDiagram.Attribut>> Person.name:String =>=>=> RelationalSchema.Column>> person.name;
ClassDiagram.Attribut>> TableGeneratorQuotingTest.serviceregistry:StandardServiceRegistry =>=>=> RelationalSchema.Column>> tablegeneratorquotingtest.serviceregistry;
ClassDiagram.Attribut>> Bid.amount:float =>=>=> RelationalSchema.Column>> bid.amount PRIMARY KEY;
ClassDiagram.Attribut>> Bid.GeneratedName:Item =>=>=> RelationalSchema.Column>> bid.GeneratedName PRIMARY KEY;
ClassDiagram.Attribut>> ListActionRole.role:Code =>=>=> RelationalSchema.Column>> listactionrole.role PRIMARY KEY;
ClassDiagram.Attribut>> Role.GeneratedName:Code =>=>=> RelationalSchema.Column>> role.GeneratedName PRIMARY KEY;
ClassDiagram.Attribut>> Item.name:String =>=>=> RelationalSchema.Column>> item.name PRIMARY KEY;
ClassDiagram.Attribut>> Customer.id:Integer =>=>=> RelationalSchema.Column>> customer.id PRIMARY KEY;
ClassDiagram.Attribut>> Customer.name:String =>=>=> RelationalSchema.Column>> customer.name;
ClassDiagram.Attribut>> Seller.id:Integer =>=>=> RelationalSchema.Column>> seller.id PRIMARY KEY;
ClassDiagram.Attribut>> Seller.name:String =>=>=> RelationalSchema.Column>> seller.name;
ClassDiagram.Attribut>> MixedAccessTest.script_engine:ScriptEngine =>=>=> RelationalSchema.Column>> mixedaccesstest.script_engine;
ClassDiagram.Attribut>> MixedAccessTest.mapping_function:Function<Map.Entry,String> =>=>=> RelationalSchema.Column>> mixedaccesstest.mapping_function;
ClassDiagram.Attribut>> MixedAccessTest.cleanup:boolean =>=>=> RelationalSchema.Column>> mixedaccesstest.cleanup;
ClassDiagram.Attribut>> InitFromCacheTest.persister:EntityPersister =>=>=> RelationalSchema.Column>> initfromcachetest.persister;
ClassDiagram.Attribut>> InitFromCacheTest.documentid:Long =>=>=> RelationalSchema.Column>> initfromcachetest.documentid;
ClassDiagram.Attribut>> LazyBasicFieldNotInitializedTest.entityid:Long =>=>=> RelationalSchema.Column>> lazybasicfieldnotinitializedtest.entityid;
ClassDiagram.Attribut>> LazyBasicFieldAccessTest.entity:LazyEntity =>=>=> RelationalSchema.Column>> lazybasicfieldaccesstest.entity;
ClassDiagram.Attribut>> LazyBasicFieldAccessTest.entityid:Long =>=>=> RelationalSchema.Column>> lazybasicfieldaccesstest.entityid;
ClassDiagram.Attribut>> LazyBasicPropertyAccessTest.entity:LazyEntity =>=>=> RelationalSchema.Column>> lazybasicpropertyaccesstest.entity;
ClassDiagram.Attribut>> LazyBasicPropertyAccessTest.entityid:Long =>=>=> RelationalSchema.Column>> lazybasicpropertyaccesstest.entityid;
ClassDiagram.Attribut>> LazyInCacheTest.orderid:Long =>=>=> RelationalSchema.Column>> lazyincachetest.orderid;
ClassDiagram.Attribut>> LGMB_From.name:String =>=>=> RelationalSchema.Column>> lgmb_from.name;
ClassDiagram.Attribut>> LGMB_From.//lazy-attributewithoutlazygroup-annotation(thereforedefault-lazygroup)bigtext:String =>=>=> RelationalSchema.Column>> lgmb_from.//lazy-attributewithoutlazygroup-annotation(thereforedefault-lazygroup)bigtext;
ClassDiagram.Attribut>> LGMB_From.id:Long =>=>=> RelationalSchema.Column>> lgmb_from.id PRIMARY KEY;
ClassDiagram.Attribut>> SimpleLazyGroupUpdateTest.really_big_:String =>=>=> RelationalSchema.Column>> simplelazygroupupdatetest.really_big_;
ClassDiagram.Attribut>> LGMB_To.id:Long =>=>=> RelationalSchema.Column>> lgmb_to.id PRIMARY KEY;
ClassDiagram.Attribut>> LGMB_To.name:String =>=>=> RelationalSchema.Column>> lgmb_to.name;
ClassDiagram.Attribut>> UnexpectedDeleteTest2.my:Bar =>=>=> RelationalSchema.Column>> unexpecteddeletetest2.my;
ClassDiagram.Attribut>> UnexpectedDeleteTest1.fooid:long =>=>=> RelationalSchema.Column>> unexpecteddeletetest1.fooid;
ClassDiagram.Attribut>> LazyCollectionDetachTest.children_size:int =>=>=> RelationalSchema.Column>> lazycollectiondetachtest.children_size;
ClassDiagram.Attribut>> LazyCollectionDetachTest.parentid:Long =>=>=> RelationalSchema.Column>> lazycollectiondetachtest.parentid;
ClassDiagram.Attribut>> LazyLoadingTest.children_size:int =>=>=> RelationalSchema.Column>> lazyloadingtest.children_size;
ClassDiagram.Attribut>> LazyLoadingTest.parentid:Long =>=>=> RelationalSchema.Column>> lazyloadingtest.parentid;
ClassDiagram.Attribut>> LazyLoadingTest.lastchildid:Long =>=>=> RelationalSchema.Column>> lazyloadingtest.lastchildid;
ClassDiagram.Attribut>> LazyCollectionDeletedTest.postid:Long =>=>=> RelationalSchema.Column>> lazycollectiondeletedtest.postid;
ClassDiagram.Attribut>> LazyCollectionLoadingTest.children_size:int =>=>=> RelationalSchema.Column>> lazycollectionloadingtest.children_size;
ClassDiagram.Attribut>> LazyCollectionLoadingTest.parentid:Long =>=>=> RelationalSchema.Column>> lazycollectionloadingtest.parentid;
ClassDiagram.Attribut>> LazyCollectionLoadingTest.GeneratedName:Parent =>=>=> RelationalSchema.Column>> lazycollectionloadingtest.GeneratedName;
ClassDiagram.Attribut>> LazyLoadingByEnhancerSetterTest.,merged:Item =>=>=> RelationalSchema.Column>> lazyloadingbyenhancersettertest.,merged;
ClassDiagram.Attribut>> LazyProxyOnEnhancedEntityTest.parentid:Long =>=>=> RelationalSchema.Column>> lazyproxyonenhancedentitytest.parentid;
ClassDiagram.Attribut>> LazyLoadingIntegrationTest.children_size:int =>=>=> RelationalSchema.Column>> lazyloadingintegrationtest.children_size;
ClassDiagram.Attribut>> LazyLoadingIntegrationTest.lastchildid:Long =>=>=> RelationalSchema.Column>> lazyloadingintegrationtest.lastchildid;
ClassDiagram.Attribut>> CascadeWithFkConstraintTest.garageid,car1id,car2id:String =>=>=> RelationalSchema.Column>> cascadewithfkconstrainttest.garageid,car1id,car2id;
ClassDiagram.Attribut>> CompositeMergeTest.entityid:long =>=>=> RelationalSchema.Column>> compositemergetest.entityid;
ClassDiagram.Attribut>> DoesNotWork.serialversionuid:long =>=>=> RelationalSchema.Column>> doesnotwork.serialversionuid;
ClassDiagram.Attribut>> DoesNotWork.GeneratedName:DoesNotWorkPk =>=>=> RelationalSchema.Column>> doesnotwork.GeneratedName;
ClassDiagram.Attribut>> DoesNotWork.globadditinfotid:Long =>=>=> RelationalSchema.Column>> doesnotwork.globadditinfotid;
ClassDiagram.Attribut>> DoesNotWork.globalnotes:List<String> =>=>=> RelationalSchema.Column>> doesnotwork.globalnotes;
ClassDiagram.Attribut>> LobEntity.blob_length:int =>=>=> RelationalSchema.Column>> lobentity.blob_length;
ClassDiagram.Attribut>> LobEntity.id:Long =>=>=> RelationalSchema.Column>> lobentity.id PRIMARY KEY;
ClassDiagram.Attribut>> LobEntity.GeneratedName:Blob =>=>=> RelationalSchema.Column>> lobentity.GeneratedName;
ClassDiagram.Attribut>> LobStringTest.long_string_size:int =>=>=> RelationalSchema.Column>> lobstringtest.long_string_size;
ClassDiagram.Attribut>> LobStringTest.value1:String =>=>=> RelationalSchema.Column>> lobstringtest.value1;
ClassDiagram.Attribut>> LobStringTest.value2:String =>=>=> RelationalSchema.Column>> lobstringtest.value2;
ClassDiagram.Attribut>> PostgreSqlLobStringTest.value1:String =>=>=> RelationalSchema.Column>> postgresqllobstringtest.value1;
ClassDiagram.Attribut>> PostgreSqlLobStringTest.value2:String =>=>=> RelationalSchema.Column>> postgresqllobstringtest.value2;
ClassDiagram.Attribut>> PostgreSqlLobStringTest.value3:String =>=>=> RelationalSchema.Column>> postgresqllobstringtest.value3;
ClassDiagram.Attribut>> VariousTypesEntity.id:Integer =>=>=> RelationalSchema.Column>> varioustypesentity.id PRIMARY KEY;
ClassDiagram.Attribut>> VariousTypesEntity.data:byte =>=>=> RelationalSchema.Column>> varioustypesentity.data;
ClassDiagram.Attribut>> Issue.id:Long =>=>=> RelationalSchema.Column>> issue.id PRIMARY KEY;
ClassDiagram.Attribut>> Issue.description:String =>=>=> RelationalSchema.Column>> issue.description;
ClassDiagram.Attribut>> Issue.issuenumber:String =>=>=> RelationalSchema.Column>> issue.issuenumber;
ClassDiagram.Attribut>> PageAdvertisement.id:Integer =>=>=> RelationalSchema.Column>> pageadvertisement.id PRIMARY KEY;
ClassDiagram.Attribut>> Advertisement.id:Integer =>=>=> RelationalSchema.Column>> advertisement.id PRIMARY KEY;
ClassDiagram.Attribut>> Attachment.id:Integer =>=>=> RelationalSchema.Column>> attachment.id PRIMARY KEY;
ClassDiagram.Attribut>> Attachment.filename:String =>=>=> RelationalSchema.Column>> attachment.filename;
ClassDiagram.Attribut>> Attachment.deleted:String =>=>=> RelationalSchema.Column>> attachment.deleted;
ClassDiagram.Attribut>> B.oid:long =>=>=> RelationalSchema.Column>> b.oid PRIMARY KEY;
ClassDiagram.Attribut>> B.naturalid:int =>=>=> RelationalSchema.Column>> b.naturalid;
ClassDiagram.Attribut>> AllCached.id:Integer =>=>=> RelationalSchema.Column>> allcached.id PRIMARY KEY;
ClassDiagram.Attribut>> AllCached.name:String =>=>=> RelationalSchema.Column>> allcached.name;
ClassDiagram.Attribut>> Another.id:Integer =>=>=> RelationalSchema.Column>> another.id PRIMARY KEY;
ClassDiagram.Attribut>> Another.name:String =>=>=> RelationalSchema.Column>> another.name;
ClassDiagram.Attribut>> Another.surname:String =>=>=> RelationalSchema.Column>> another.surname;
ClassDiagram.Attribut>> A.oid:long =>=>=> RelationalSchema.Column>> a.oid PRIMARY KEY;
ClassDiagram.Attribut>> A.myname:String =>=>=> RelationalSchema.Column>> a.myname;
ClassDiagram.Attribut>> User.username:String =>=>=> RelationalSchema.Column>> user.username;
ClassDiagram.Attribut>> Principal.id:Long =>=>=> RelationalSchema.Column>> principal.id PRIMARY KEY;
ClassDiagram.Attribut>> Principal.uid:String =>=>=> RelationalSchema.Column>> principal.uid;
ClassDiagram.Attribut>> ExtendedEntity.extendedvalue:String =>=>=> RelationalSchema.Column>> extendedentity.extendedvalue;
ClassDiagram.Attribut>> MyEntity.id:Long =>=>=> RelationalSchema.Column>> myentity.id PRIMARY KEY;
ClassDiagram.Attribut>> MyEntity.uid:String =>=>=> RelationalSchema.Column>> myentity.uid;
ClassDiagram.Attribut>> Principal.id:Long =>=>=> RelationalSchema.Column>> principal.id PRIMARY KEY;
ClassDiagram.Attribut>> Principal.uid:String =>=>=> RelationalSchema.Column>> principal.uid;
ClassDiagram.Attribut>> B.oid:long =>=>=> RelationalSchema.Column>> b.oid PRIMARY KEY;
ClassDiagram.Attribut>> B.naturalid:int =>=>=> RelationalSchema.Column>> b.naturalid;
ClassDiagram.Attribut>> C.oid:long =>=>=> RelationalSchema.Column>> c.oid PRIMARY KEY;
ClassDiagram.Attribut>> C.name:String =>=>=> RelationalSchema.Column>> c.name;
ClassDiagram.Attribut>> A.oid:long =>=>=> RelationalSchema.Column>> a.oid PRIMARY KEY;
ClassDiagram.Attribut>> A.myname:String =>=>=> RelationalSchema.Column>> a.myname;
ClassDiagram.Attribut>> D.oid:long =>=>=> RelationalSchema.Column>> d.oid PRIMARY KEY;
ClassDiagram.Attribut>> D.name:String =>=>=> RelationalSchema.Column>> d.name;
ClassDiagram.Attribut>> Building.id:Integer =>=>=> RelationalSchema.Column>> building.id PRIMARY KEY;
ClassDiagram.Attribut>> Building.name:String =>=>=> RelationalSchema.Column>> building.name;
ClassDiagram.Attribut>> Building.address:String =>=>=> RelationalSchema.Column>> building.address;
ClassDiagram.Attribut>> Building.city:String =>=>=> RelationalSchema.Column>> building.city;
ClassDiagram.Attribut>> Building.state:String =>=>=> RelationalSchema.Column>> building.state;
ClassDiagram.Attribut>> PostalCarrier.id:Long =>=>=> RelationalSchema.Column>> postalcarrier.id PRIMARY KEY;
ClassDiagram.Attribut>> PostalCarrier.GeneratedName:PostalCode =>=>=> RelationalSchema.Column>> postalcarrier.GeneratedName;
ClassDiagram.Attribut>> Student.id:Long =>=>=> RelationalSchema.Column>> student.id PRIMARY KEY;
ClassDiagram.Attribut>> Student.firstname:String =>=>=> RelationalSchema.Column>> student.firstname;
ClassDiagram.Attribut>> Student.gpa:int =>=>=> RelationalSchema.Column>> student.gpa;
ClassDiagram.Attribut>> Championship.id:int =>=>=> RelationalSchema.Column>> championship.id PRIMARY KEY;
ClassDiagram.Attribut>> School.id:int =>=>=> RelationalSchema.Column>> school.id PRIMARY KEY;
ClassDiagram.Attribut>> QueryTimeOutTest.connection_provider:PreparedStatementSpyConnectionProvider =>=>=> RelationalSchema.Column>> querytimeouttest.connection_provider;
ClassDiagram.Attribut>> QueryTimeOutTest.query:String =>=>=> RelationalSchema.Column>> querytimeouttest.query;
ClassDiagram.Attribut>> LongVarcharValidationTest.jdbcmetadataextractorstrategy:String =>=>=> RelationalSchema.Column>> longvarcharvalidationtest.jdbcmetadataextractorstrategy;
ClassDiagram.Attribut>> LongVarcharValidationTest.ssr:StandardServiceRegistry =>=>=> RelationalSchema.Column>> longvarcharvalidationtest.ssr;
ClassDiagram.Attribut>> NumericValidationTest.jdbcmetadataextractorstrategy:String =>=>=> RelationalSchema.Column>> numericvalidationtest.jdbcmetadataextractorstrategy;
ClassDiagram.Attribut>> NumericValidationTest.ssr:StandardServiceRegistry =>=>=> RelationalSchema.Column>> numericvalidationtest.ssr;
ClassDiagram.Attribut>> SynonymValidationTest.ssr:StandardServiceRegistry =>=>=> RelationalSchema.Column>> synonymvalidationtest.ssr;
ClassDiagram.Attribut>> ViewValidationTest.ssr:StandardServiceRegistry =>=>=> RelationalSchema.Column>> viewvalidationtest.ssr;
ClassDiagram.Attribut>> ComponentEmptyEmbeddedOwner.id:Integer =>=>=> RelationalSchema.Column>> componentemptyembeddedowner.id PRIMARY KEY;
ClassDiagram.Attribut>> ComponentEmptyEmbeddedOwner.embedded:ComponentEmptyEmbedded =>=>=> RelationalSchema.Column>> componentemptyembeddedowner.embedded;
ClassDiagram.Attribut>> SelectBeforeUpdateEmbeddedTest.i:OnFlushDirtyInterceptor =>=>=> RelationalSchema.Column>> selectbeforeupdateembeddedtest.i;
ClassDiagram.Attribut>> Person.id:int =>=>=> RelationalSchema.Column>> person.id PRIMARY KEY;
ClassDiagram.Attribut>> Person.GeneratedName:Name =>=>=> RelationalSchema.Column>> person.GeneratedName;
ClassDiagram.Attribut>> Component.id:Long =>=>=> RelationalSchema.Column>> component.id PRIMARY KEY;
ClassDiagram.Attribut>> Component.emb:Component.Emb =>=>=> RelationalSchema.Column>> component.emb;
ClassDiagram.Attribut>> BasicJodaTimeConversionTest.converttodatabasecolumncalled:boolean =>=>=> RelationalSchema.Column>> basicjodatimeconversiontest.converttodatabasecolumncalled;
ClassDiagram.Attribut>> BasicJodaTimeConversionTest.converttoentityattributecalled:boolean =>=>=> RelationalSchema.Column>> basicjodatimeconversiontest.converttoentityattributecalled;
ClassDiagram.Attribut>> SimpleConvertAnnotationTest.converttodatabasecolumncalled:boolean =>=>=> RelationalSchema.Column>> simpleconvertannotationtest.converttodatabasecolumncalled;
ClassDiagram.Attribut>> SimpleConvertAnnotationTest.converttoentityattributecalled:boolean =>=>=> RelationalSchema.Column>> simpleconvertannotationtest.converttoentityattributecalled;
ClassDiagram.Attribut>> ExplicitJavaTypeDescriptorTest.mutabletodatabasecallcount:int =>=>=> RelationalSchema.Column>> explicitjavatypedescriptortest.mutabletodatabasecallcount;
ClassDiagram.Attribut>> ExplicitJavaTypeDescriptorTest.mutabletodomaincallcount:int =>=>=> RelationalSchema.Column>> explicitjavatypedescriptortest.mutabletodomaincallcount;
ClassDiagram.Attribut>> ExplicitJavaTypeDescriptorTest.immutabletodatabasecallcount:int =>=>=> RelationalSchema.Column>> explicitjavatypedescriptortest.immutabletodatabasecallcount;
ClassDiagram.Attribut>> ExplicitJavaTypeDescriptorTest.immutabletodomaincallcount:int =>=>=> RelationalSchema.Column>> explicitjavatypedescriptortest.immutabletodomaincallcount;
ClassDiagram.Attribut>> ExplicitJavaTypeDescriptorTest.immutablemutabletodatabasecallcount:int =>=>=> RelationalSchema.Column>> explicitjavatypedescriptortest.immutablemutabletodatabasecallcount;
ClassDiagram.Attribut>> ExplicitJavaTypeDescriptorTest.immutablemutabletodomaincallcount:int =>=>=> RelationalSchema.Column>> explicitjavatypedescriptortest.immutablemutabletodomaincallcount;
ClassDiagram.Attribut>> AndLobTest.ssr:StandardServiceRegistry =>=>=> RelationalSchema.Column>> andlobtest.ssr;
ClassDiagram.Attribut>> ExplicitDateConvertersTest.//note:initiallyunabletoreproducethereportedproblemconverttodatabasecolumncalled:boolean =>=>=> RelationalSchema.Column>> explicitdateconverterstest.//note:initiallyunabletoreproducethereportedproblemconverttodatabasecolumncalled;
ClassDiagram.Attribut>> ExplicitDateConvertersTest.converttoentityattributecalled:boolean =>=>=> RelationalSchema.Column>> explicitdateconverterstest.converttoentityattributecalled;
ClassDiagram.Attribut>> QueryTest.salary:float =>=>=> RelationalSchema.Column>> querytest.salary;
ClassDiagram.Attribut>> Address.id:Integer =>=>=> RelationalSchema.Column>> address.id PRIMARY KEY;
ClassDiagram.Attribut>> Address.streetline1:String =>=>=> RelationalSchema.Column>> address.streetline1;
ClassDiagram.Attribut>> Address.streetline2:String =>=>=> RelationalSchema.Column>> address.streetline2;
ClassDiagram.Attribut>> Address.GeneratedName:PostalArea =>=>=> RelationalSchema.Column>> address.GeneratedName;
ClassDiagram.Attribut>> SimpleConvertsAnnotationTest.converttodatabasecolumncalled:boolean =>=>=> RelationalSchema.Column>> simpleconvertsannotationtest.converttodatabasecolumncalled;
ClassDiagram.Attribut>> SimpleConvertsAnnotationTest.converttoentityattributecalled:boolean =>=>=> RelationalSchema.Column>> simpleconvertsannotationtest.converttoentityattributecalled;
ClassDiagram.Attribut>> SimpleXmlOverriddenTest.ssr:StandardServiceRegistry =>=>=> RelationalSchema.Column>> simplexmloverriddentest.ssr;
ClassDiagram.Attribut>> ExplicitEnumConvertersTest.converttodatabasecolumncalled:boolean =>=>=> RelationalSchema.Column>> explicitenumconverterstest.converttodatabasecolumncalled;
ClassDiagram.Attribut>> ExplicitEnumConvertersTest.converttoentityattributecalled:boolean =>=>=> RelationalSchema.Column>> explicitenumconverterstest.converttoentityattributecalled;
ClassDiagram.Attribut>> XmlWithExplicitConvertAnnotationsTest.//note:essentiallythesameexacttestasexplicitdateconverterstest,butherewewillmixannotationsandxmlconverttodatabasecolumncalled:boolean =>=>=> RelationalSchema.Column>> xmlwithexplicitconvertannotationstest.//note:essentiallythesameexacttestasexplicitdateconverterstest,butherewewillmixannotationsandxmlconverttodatabasecolumncalled;
ClassDiagram.Attribut>> XmlWithExplicitConvertAnnotationsTest.converttoentityattributecalled:boolean =>=>=> RelationalSchema.Column>> xmlwithexplicitconvertannotationstest.converttoentityattributecalled;
ClassDiagram.Attribut>> CollectionCompositeElementExplicitConversionTest.ssr:StandardServiceRegistry =>=>=> RelationalSchema.Column>> collectioncompositeelementexplicitconversiontest.ssr;
ClassDiagram.Attribut>> CollectionCompositeElementExplicitConversionTest.simplevalueattributeconverterdescriptor:Field =>=>=> RelationalSchema.Column>> collectioncompositeelementexplicitconversiontest.simplevalueattributeconverterdescriptor;
ClassDiagram.Attribut>> Address.id:Integer =>=>=> RelationalSchema.Column>> address.id PRIMARY KEY;
ClassDiagram.Attribut>> Address.streetline1:String =>=>=> RelationalSchema.Column>> address.streetline1;
ClassDiagram.Attribut>> Address.streetline2:String =>=>=> RelationalSchema.Column>> address.streetline2;
ClassDiagram.Attribut>> Address.GeneratedName:PostalArea =>=>=> RelationalSchema.Column>> address.GeneratedName;
ClassDiagram.Attribut>> ParameterizedAttributeConverterParameterTypeTest.ssr:StandardServiceRegistry =>=>=> RelationalSchema.Column>> parameterizedattributeconverterparametertypetest.ssr;
ClassDiagram.Attribut>> Customer.id:Long =>=>=> RelationalSchema.Column>> customer.id PRIMARY KEY;
ClassDiagram.Attribut>> Customer.name:String =>=>=> RelationalSchema.Column>> customer.name;
ClassDiagram.Attribut>> Invoice.id:Long =>=>=> RelationalSchema.Column>> invoice.id PRIMARY KEY;
ClassDiagram.Attribut>> Door.id:Integer =>=>=> RelationalSchema.Column>> door.id PRIMARY KEY;
ClassDiagram.Attribut>> Door.name:String =>=>=> RelationalSchema.Column>> door.name;
ClassDiagram.Attribut>> LockNoneWarmingTest.GeneratedName:Triggerable =>=>=> RelationalSchema.Column>> locknonewarmingtest.GeneratedName;
ClassDiagram.Attribut>> LockNoneWarmingTest.loginspection:LoggerInspectionRule =>=>=> RelationalSchema.Column>> locknonewarmingtest.loginspection;
ClassDiagram.Attribut>> A.id:Long =>=>=> RelationalSchema.Column>> a.id PRIMARY KEY;
ClassDiagram.Attribut>> A.value:String =>=>=> RelationalSchema.Column>> a.value;
ClassDiagram.Attribut>> Group.id:Long =>=>=> RelationalSchema.Column>> group.id PRIMARY KEY;
ClassDiagram.Attribut>> Group.name:String =>=>=> RelationalSchema.Column>> group.name;
ClassDiagram.Attribut>> User.id:Long =>=>=> RelationalSchema.Column>> user.id PRIMARY KEY;
ClassDiagram.Attribut>> User.name:String =>=>=> RelationalSchema.Column>> user.name;
ClassDiagram.Attribut>> Membership.id:Long =>=>=> RelationalSchema.Column>> membership.id PRIMARY KEY;
ClassDiagram.Attribut>> Membership.GeneratedName:Group =>=>=> RelationalSchema.Column>> membership.GeneratedName;
ClassDiagram.Attribut>> Membership.join:Date =>=>=> RelationalSchema.Column>> membership.join;
ClassDiagram.Attribut>> Membership.dues:Float =>=>=> RelationalSchema.Column>> membership.dues;
ClassDiagram.Attribut>> NumValue.num:long =>=>=> RelationalSchema.Column>> numvalue.num PRIMARY KEY;
ClassDiagram.Attribut>> NumValue.value:String =>=>=> RelationalSchema.Column>> numvalue.value;
ClassDiagram.Attribut>> PostgresRefCursorSupportTest.sf:SessionFactory =>=>=> RelationalSchema.Column>> postgresrefcursorsupporttest.sf;
ClassDiagram.Attribut>> IsolatedEvictableEntity.id:Integer =>=>=> RelationalSchema.Column>> isolatedevictableentity.id PRIMARY KEY;
ClassDiagram.Attribut>> IsolatedEvictableEntity.name:String =>=>=> RelationalSchema.Column>> isolatedevictableentity.name;
ClassDiagram.Attribut>> JdbcTimestampWithoutUTCTimeZoneTest.connectionprovider:TimeZoneConnectionProvider =>=>=> RelationalSchema.Column>> jdbctimestampwithoututctimezonetest.connectionprovider;
ClassDiagram.Attribut>> JdbcTimestampCustomTimeZoneTest.connectionprovider:PreparedStatementSpyConnectionProvider =>=>=> RelationalSchema.Column>> jdbctimestampcustomtimezonetest.connectionprovider;
ClassDiagram.Attribut>> JdbcTimestampCustomTimeZoneTest.time_zone:TimeZone =>=>=> RelationalSchema.Column>> jdbctimestampcustomtimezonetest.time_zone;
ClassDiagram.Attribut>> JdbcTimestampCustomSessionLevelTimeZoneTest.connectionprovider:PreparedStatementSpyConnectionProvider =>=>=> RelationalSchema.Column>> jdbctimestampcustomsessionleveltimezonetest.connectionprovider;
ClassDiagram.Attribut>> JdbcTimestampCustomSessionLevelTimeZoneTest.time_zone:TimeZone =>=>=> RelationalSchema.Column>> jdbctimestampcustomsessionleveltimezonetest.time_zone;
ClassDiagram.Attribut>> JdbcTimeCustomTimeZoneTest.connectionprovider:PreparedStatementSpyConnectionProvider =>=>=> RelationalSchema.Column>> jdbctimecustomtimezonetest.connectionprovider;
ClassDiagram.Attribut>> JdbcTimeCustomTimeZoneTest.time_zone:TimeZone =>=>=> RelationalSchema.Column>> jdbctimecustomtimezonetest.time_zone;
ClassDiagram.Attribut>> JdbcTimestampDefaultTimeZoneTest.connectionprovider:PreparedStatementSpyConnectionProvider =>=>=> RelationalSchema.Column>> jdbctimestampdefaulttimezonetest.connectionprovider;
ClassDiagram.Attribut>> JdbcTimeDefaultTimeZoneTest.connectionprovider:PreparedStatementSpyConnectionProvider =>=>=> RelationalSchema.Column>> jdbctimedefaulttimezonetest.connectionprovider;
ClassDiagram.Attribut>> LocalDateCustomSessionLevelTimeZoneTest.time_zone:TimeZone =>=>=> RelationalSchema.Column>> localdatecustomsessionleveltimezonetest.time_zone;
ClassDiagram.Attribut>> LocalDateCustomSessionLevelTimeZoneTest.connectionprovider:ConnectionProviderDelegate =>=>=> RelationalSchema.Column>> localdatecustomsessionleveltimezonetest.connectionprovider;
ClassDiagram.Attribut>> Y.id:Long =>=>=> RelationalSchema.Column>> y.id PRIMARY KEY;
ClassDiagram.Attribut>> Tranche.id:Long =>=>=> RelationalSchema.Column>> tranche.id PRIMARY KEY;
ClassDiagram.Attribut>> X.id:Long =>=>=> RelationalSchema.Column>> x.id PRIMARY KEY;
ClassDiagram.Attribut>> Preisregelung.id:Long =>=>=> RelationalSchema.Column>> preisregelung.id PRIMARY KEY;
ClassDiagram.Attribut>> Tranchenmodell.id:Long =>=>=> RelationalSchema.Column>> tranchenmodell.id PRIMARY KEY;
ClassDiagram.Attribut>> Preisregelung.id:Long =>=>=> RelationalSchema.Column>> preisregelung.id PRIMARY KEY;
ClassDiagram.Attribut>> Tranche.id:Long =>=>=> RelationalSchema.Column>> tranche.id PRIMARY KEY;
ClassDiagram.Attribut>> Tranchenmodell.id:Long =>=>=> RelationalSchema.Column>> tranchenmodell.id PRIMARY KEY;
ClassDiagram.Attribut>> Product.id:Long =>=>=> RelationalSchema.Column>> product.id PRIMARY KEY;
ClassDiagram.Attribut>> Product.name:String =>=>=> RelationalSchema.Column>> product.name;
ClassDiagram.Attribut>> Feature.id:Long =>=>=> RelationalSchema.Column>> feature.id PRIMARY KEY;
ClassDiagram.Attribut>> Feature.name:String =>=>=> RelationalSchema.Column>> feature.name;
ClassDiagram.Attribut>> WildFlyDdlEntity.id:Integer =>=>=> RelationalSchema.Column>> wildflyddlentity.id PRIMARY KEY;
ClassDiagram.Attribut>> WildFlyDdlEntity.name:String =>=>=> RelationalSchema.Column>> wildflyddlentity.name;
ClassDiagram.Attribut>> Table2.id:long =>=>=> RelationalSchema.Column>> table2.id PRIMARY KEY;
ClassDiagram.Attribut>> PersistOnLazyCollectionTest.receipt_a:String =>=>=> RelationalSchema.Column>> persistonlazycollectiontest.receipt_a;
ClassDiagram.Attribut>> PersistOnLazyCollectionTest.invoice_a:String =>=>=> RelationalSchema.Column>> persistonlazycollectiontest.invoice_a;
ClassDiagram.Attribut>> PersistOnLazyCollectionTest.invoiceline_a:String =>=>=> RelationalSchema.Column>> persistonlazycollectiontest.invoiceline_a;
ClassDiagram.Attribut>> PersistOnLazyCollectionTest.invoiceline_b:String =>=>=> RelationalSchema.Column>> persistonlazycollectiontest.invoiceline_b;
ClassDiagram.Attribut>> ConfEntity.serialversionuid:long =>=>=> RelationalSchema.Column>> confentity.serialversionuid;
ClassDiagram.Attribut>> ConfEntity.confkey:String =>=>=> RelationalSchema.Column>> confentity.confkey PRIMARY KEY;
ClassDiagram.Attribut>> ConfEntity.confvalue:String =>=>=> RelationalSchema.Column>> confentity.confvalue PRIMARY KEY;
ClassDiagram.Attribut>> UserEntity.serialversionuid:long =>=>=> RelationalSchema.Column>> userentity.serialversionuid;
ClassDiagram.Attribut>> UserEntity.id:Long =>=>=> RelationalSchema.Column>> userentity.id PRIMARY KEY;
ClassDiagram.Attribut>> UserEntity.name:String =>=>=> RelationalSchema.Column>> userentity.name;
ClassDiagram.Attribut>> Table1.id:long =>=>=> RelationalSchema.Column>> table1.id PRIMARY KEY;
ClassDiagram.Attribut>> UserConfEntity.serialversionuid:long =>=>=> RelationalSchema.Column>> userconfentity.serialversionuid;
ClassDiagram.Attribut>> UserConfEntity.user:UserEntity =>=>=> RelationalSchema.Column>> userconfentity.user PRIMARY KEY;
ClassDiagram.Attribut>> UserConfEntity.conf:ConfEntity =>=>=> RelationalSchema.Column>> userconfentity.conf PRIMARY KEY;
ClassDiagram.Attribut>> Company.id:int =>=>=> RelationalSchema.Column>> company.id PRIMARY KEY;
ClassDiagram.Attribut>> Company.name:String =>=>=> RelationalSchema.Column>> company.name;
ClassDiagram.Attribut>> User.id:int =>=>=> RelationalSchema.Column>> user.id PRIMARY KEY;
ClassDiagram.Attribut>> User.version:int =>=>=> RelationalSchema.Column>> user.version;
ClassDiagram.Attribut>> User.name:String =>=>=> RelationalSchema.Column>> user.name;
ClassDiagram.Attribut>> CacheableItem.id:Long =>=>=> RelationalSchema.Column>> cacheableitem.id PRIMARY KEY;
ClassDiagram.Attribut>> CacheableItem.name:String =>=>=> RelationalSchema.Column>> cacheableitem.name;
ClassDiagram.Attribut>> NonRootEntityWithCacheAnnotationTest.loginspection:LoggerInspectionRule =>=>=> RelationalSchema.Column>> nonrootentitywithcacheannotationtest.loginspection;
ClassDiagram.Attribut>> It.key1:Integer =>=>=> RelationalSchema.Column>> it.key1 PRIMARY KEY;
ClassDiagram.Attribut>> It.key2:Integer =>=>=> RelationalSchema.Column>> it.key2 PRIMARY KEY;
ClassDiagram.Attribut>> It.name:String =>=>=> RelationalSchema.Column>> it.name;
ClassDiagram.Attribut>> ItWithPkClass.key1:Integer =>=>=> RelationalSchema.Column>> itwithpkclass.key1 PRIMARY KEY;
ClassDiagram.Attribut>> ItWithPkClass.key2:Integer =>=>=> RelationalSchema.Column>> itwithpkclass.key2 PRIMARY KEY;
ClassDiagram.Attribut>> ItWithPkClass.name:String =>=>=> RelationalSchema.Column>> itwithpkclass.name;
ClassDiagram.Attribut>> NonRootEntityWithCacheableAnnotationTest.loginspection:LoggerInspectionRule =>=>=> RelationalSchema.Column>> nonrootentitywithcacheableannotationtest.loginspection;
ClassDiagram.Attribut>> AbstractCachedItem.id:Long =>=>=> RelationalSchema.Column>> abstractcacheditem.id PRIMARY KEY;
ClassDiagram.Attribut>> AbstractCachedItem.name:String =>=>=> RelationalSchema.Column>> abstractcacheditem.name;
ClassDiagram.Attribut>> ManyToManyTarget.id:Integer =>=>=> RelationalSchema.Column>> manytomanytarget.id PRIMARY KEY;
ClassDiagram.Attribut>> ManyToManyTarget.name:String =>=>=> RelationalSchema.Column>> manytomanytarget.name;
ClassDiagram.Attribut>> ManyToManyOwner.id:Integer =>=>=> RelationalSchema.Column>> manytomanyowner.id PRIMARY KEY;
ClassDiagram.Attribut>> ManyToManyOwner.name:String =>=>=> RelationalSchema.Column>> manytomanyowner.name;
ClassDiagram.Attribut>> ExtraStateTest./***storingitasafieldsoitcanbeaccessedfromtheentitysetter.*/:Session =>=>=> RelationalSchema.Column>> extrastatetest./***storingitasafieldsoitcanbeaccessedfromtheentitysetter.*/;
ClassDiagram.Attribut>> InformixFunctionTest.GeneratedName:Event =>=>=> RelationalSchema.Column>> informixfunctiontest.GeneratedName;
ClassDiagram.Attribut>> In.id:long =>=>=> RelationalSchema.Column>> in.id PRIMARY KEY;
ClassDiagram.Attribut>> In.prop:String =>=>=> RelationalSchema.Column>> in.prop;
ClassDiagram.Attribut>> Any.id:long =>=>=> RelationalSchema.Column>> any.id PRIMARY KEY;
ClassDiagram.Attribut>> Any.prop:String =>=>=> RelationalSchema.Column>> any.prop;
One-To-Many relationship from ClassDiagram.Class>>Order  to ClassDiagram.Class>>Set<Item>;
Many-To-One relationship from ClassDiagram.Class>>Order  to ClassDiagram.Class>>customer represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Customer  to ClassDiagram.Class>>List<Order>;
One-To-Many relationship from ClassDiagram.Class>>AccountGroup  to ClassDiagram.Class>>List<Account>;
One-To-One relationship between ClassDiagram.Class>>Oven  to ClassDiagram.Class>>kitchen represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Kitchen  to ClassDiagram.Class>>oven represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>IncidentStatus  to ClassDiagram.Class>>incident represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Incident  to ClassDiagram.Class>>Status represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-Many relationship between ClassDiagram.Class>>DeskWithRawType  and ClassDiagram.Class>>collection: desk_empl(desk_fk:DeskWithRawType [PK] #FK to DeskWithRawType,empl_fk:collection [PK] #FK to collection);
One-To-Many relationship from ClassDiagram.Class>>Parent  to ClassDiagram.Class>>Set<Child>;
One-To-Many relationship from ClassDiagram.Class>>Garden  to ClassDiagram.Class>>List<Flower>;
Many-To-One relationship from ClassDiagram.Class>>WithGenericCollection  to ClassDiagram.Class>>withgenericcollection<? extends object> represented by ClassDiagram.Atrribute>>parent;
One-To-Many relationship from ClassDiagram.Class>>WithGenericCollection  to ClassDiagram.Class>>List<WithGenericCollection<? extends Object>>;
One-To-One relationship between ClassDiagram.Class>>SimpleMedicalHistory  to ClassDiagram.Class>>simpleperson represented by ClassDiagram.Atrribute>>patient;
One-To-Many relationship from ClassDiagram.Class>>Troop  to ClassDiagram.Class>>Set<Soldier>;
One-To-Many relationship from ClassDiagram.Class>>Top  to ClassDiagram.Class>>List<Middle>;
Many-To-One relationship from ClassDiagram.Class>>Middle  to ClassDiagram.Class>>top represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Middle  to ClassDiagram.Class>>bottom represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Bottom  to ClassDiagram.Class>>middle represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Soldier2  to ClassDiagram.Class>>troop2 represented by ClassDiagram.Atrribute>>troop;
One-To-Many relationship from ClassDiagram.Class>>ExtractionDocumentInfo  to ClassDiagram.Class>>List<ExtractionDocument>;
One-To-Many relationship from ClassDiagram.Class>>Teacher  to ClassDiagram.Class>>Set<Student>;
One-To-One relationship between ClassDiagram.Class>>Teacher  to ClassDiagram.Class>>student represented by ClassDiagram.Atrribute>>favorite;
One-To-One relationship between ClassDiagram.Class>>ExtractionDocument  to ClassDiagram.Class>>extractiondocumentinfo represented by ClassDiagram.Atrribute>>documentinfo;
Many-To-One relationship from ClassDiagram.Class>>Grandson  to ClassDiagram.Class>>son represented by ClassDiagram.Atrribute>>parent;
One-To-One relationship between ClassDiagram.Class>>Conference  to ClassDiagram.Class>>extractiondocumentinfo represented by ClassDiagram.Atrribute>>extractiondocument;
Many-To-One relationship from ClassDiagram.Class>>Student  to ClassDiagram.Class>>teacher represented by ClassDiagram.Atrribute>>primary;
One-To-One relationship between ClassDiagram.Class>>Student  to ClassDiagram.Class>>teacher represented by ClassDiagram.Atrribute>>favorite;
Many-To-One relationship from ClassDiagram.Class>>Song  to ClassDiagram.Class>>author represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Son  to ClassDiagram.Class>>Parent represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Item  to ClassDiagram.Class>>Set<Distributor>;
One-To-One relationship between ClassDiagram.Class>>Customer  to ClassDiagram.Class>>employee represented by ClassDiagram.Atrribute>>salesperson;
One-To-One relationship between ClassDiagram.Class>>Employee  to ClassDiagram.Class>>employee represented by ClassDiagram.Atrribute>>manager;
One-To-One relationship between ClassDiagram.Class>>Television  to ClassDiagram.Class>>remotecontrol represented by ClassDiagram.Atrribute>>control;
One-To-One relationship between ClassDiagram.Class>>Y  to ClassDiagram.Class>>tranche represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>X  to ClassDiagram.Class>>tranchenmodell represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Tranchenmodell  to ClassDiagram.Class>>List<Tranche>;
One-To-One relationship between ClassDiagram.Class>>Tranchenmodell  to ClassDiagram.Class>>preisregelung represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Tranchenmodell  to ClassDiagram.Class>>x represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Preisregelung  to ClassDiagram.Class>>tranchenmodell represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Tranche  to ClassDiagram.Class>>tranchenmodell represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Tranche  to ClassDiagram.Class>>y represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Feature  to ClassDiagram.Class>>product represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Product  to ClassDiagram.Class>>List<Feature>;
Many-To-One relationship from ClassDiagram.Class>>Entity1  to ClassDiagram.Class>>Entity represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Customer  to ClassDiagram.Class>>address represented by ClassDiagram.Atrribute>>home;
One-To-One relationship between ClassDiagram.Class>>Customer  to ClassDiagram.Class>>address represented by ClassDiagram.Atrribute>>work;
One-To-Many relationship from ClassDiagram.Class>>Customer  to ClassDiagram.Class>>Collection<CreditCard>;
One-To-Many relationship from ClassDiagram.Class>>Customer  to ClassDiagram.Class>>Collection<Order>;
One-To-Many relationship from ClassDiagram.Class>>Order  to ClassDiagram.Class>>Collection<LineItem>;
One-To-Many relationship from ClassDiagram.Class>>Address  to ClassDiagram.Class>>List<Phone>;
Many-To-One relationship from ClassDiagram.Class>>Entity2  to ClassDiagram.Class>>Entity represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Article  to ClassDiagram.Class>>Map<Locale,Translation>;
Many-To-Many relationship between ClassDiagram.Class>>Alias  and ClassDiagram.Class>>collection<customer>: fks_anoop_cnoop(fk2_for_alias_table:Alias [PK] #FK to Alias,fk8_for_customer_table:collection<customer> [PK] #FK to collection<customer>);
Many-To-Many relationship between ClassDiagram.Class>>Alias  and ClassDiagram.Class>>collection<customer>: fks_anoop_cnoop(fk2_for_alias_table:Alias [PK] #FK to Alias,fk8_for_customer_table:collection<customer> [PK] #FK to collection<customer>);fks_alias_customer(fk_for_alias_table:Alias [PK] #FK to Alias,fk_for_customer_table:collection<customer> [PK] #FK to collection<customer>);
Many-To-One relationship from ClassDiagram.Class>>NestedLegacyEntity  to ClassDiagram.Class>>Entity represented by ClassDiagram.Atrribute>>primitivepk1;
Many-To-One relationship from ClassDiagram.Class>>NestedLegacyEntity  to ClassDiagram.Class>>Entity represented by ClassDiagram.Atrribute>>id;
Many-To-One relationship from ClassDiagram.Class>>Category  to ClassDiagram.Class>>item represented by ClassDiagram.Atrribute>>example;
Many-To-Many relationship between ClassDiagram.Class>>Competition  and ClassDiagram.Class>>list<competitor>: competition_competitor(Competition_ID:Competition [PK] #FK to Competition,list<competitor>_ID:list<competitor> [PK] #FK to list<competitor>);
Many-To-One relationship from ClassDiagram.Class>>B2  to ClassDiagram.Class>>a represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>B2  to ClassDiagram.Class>>Set<C2>;
One-To-Many relationship from ClassDiagram.Class>>A  to ClassDiagram.Class>>Set<B1>;
One-To-Many relationship from ClassDiagram.Class>>A  to ClassDiagram.Class>>Set<B2>;
One-To-Many relationship from ClassDiagram.Class>>A  to ClassDiagram.Class>>Set<B3>;
One-To-Many relationship from ClassDiagram.Class>>A  to ClassDiagram.Class>>Set<B4>;
Many-To-One relationship from ClassDiagram.Class>>C2  to ClassDiagram.Class>>b2 represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>B3  to ClassDiagram.Class>>a represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>C1  to ClassDiagram.Class>>b1 represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>B1  to ClassDiagram.Class>>a represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>B1  to ClassDiagram.Class>>Set<C1>;
Many-To-One relationship from ClassDiagram.Class>>B4  to ClassDiagram.Class>>a represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Item  to ClassDiagram.Class>>category represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Hoarder  to ClassDiagram.Class>>item represented by ClassDiagram.Atrribute>>favorite;
One-To-Many relationship from ClassDiagram.Class>>Hoarder  to ClassDiagram.Class>>Set<Item>;
One-To-Many relationship from ClassDiagram.Class>>Race  to ClassDiagram.Class>>List<Competitor>;
One-To-Many relationship from ClassDiagram.Class>>Empire  to ClassDiagram.Class>>Set<Colony>;
Many-To-One relationship from ClassDiagram.Class>>Wall  to ClassDiagram.Class>>wall represented by ClassDiagram.Atrribute>>left;
Many-To-One relationship from ClassDiagram.Class>>Wall  to ClassDiagram.Class>>wall represented by ClassDiagram.Atrribute>>right;
Many-To-One relationship from ClassDiagram.Class>>Person  to ClassDiagram.Class>>subject represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-Many relationship between ClassDiagram.Class>>PurchaseOrg  and ClassDiagram.Class>>list<facility>: purchase_facility(purchase_org_id:PurchaseOrg [PK] #FK to PurchaseOrg,facility_id:list<facility> [PK] #FK to list<facility>);
One-To-Many relationship from ClassDiagram.Class>>Order  to ClassDiagram.Class>>Set<OrderLine>;
Many-To-One relationship from ClassDiagram.Class>>OrderLine  to ClassDiagram.Class>>Order represented by ClassDiagram.Atrribute>>purchase_org_id;
One-To-Many relationship from ClassDiagram.Class>>Book  to ClassDiagram.Class>>Set<Store>;
Many-To-One relationship from ClassDiagram.Class>>Animal  to ClassDiagram.Class>>animal represented by ClassDiagram.Atrribute>>mother;
Many-To-One relationship from ClassDiagram.Class>>Animal  to ClassDiagram.Class>>animal represented by ClassDiagram.Atrribute>>father;
One-To-Many relationship from ClassDiagram.Class>>Cat  to ClassDiagram.Class>>List<Kitten>;
Many-To-One relationship from ClassDiagram.Class>>Child  to ClassDiagram.Class>>Parent represented by ClassDiagram.Atrribute>>daddy;
One-To-Many relationship from ClassDiagram.Class>>Parent  to ClassDiagram.Class>>Set<Child>;
Many-To-One relationship from ClassDiagram.Class>>Person  to ClassDiagram.Class>>person represented by ClassDiagram.Atrribute>>parent;
set<manager>: employee_set<manager>(employeeID:employee [PK] #FK to employee,set<manager>ID:set<manager> [PK] #FK to set<manager>);
set<employee>: employee_set<manager>(employeeID:employee [PK] #FK to employee,set<manager>ID:set<manager> [PK] #FK to set<manager>);employee_set<employee>(employeeID:employee [PK] #FK to employee,set<employee>ID:set<employee> [PK] #FK to set<employee>);
Many-To-Many relationship between ClassDiagram.Class>>Student  and ClassDiagram.Class>>set<course>: student_courses(id:Student [PK] #FK to Student,id:set<course> [PK] #FK to set<course>);
One-To-One relationship between ClassDiagram.Class>>Foo2  to ClassDiagram.Class>>foo represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Company  to ClassDiagram.Class>>Set<Employee>;
One-To-One relationship between ClassDiagram.Class>>Company  to ClassDiagram.Class>>location represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Article  to ClassDiagram.Class>>author represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Employee  to ClassDiagram.Class>>department represented by ClassDiagram.Atrribute>>//illustratestheproblematicsituationdescribedinhhh-8980belongsto;
Many-To-One relationship from ClassDiagram.Class>>Contractor  to ClassDiagram.Class>>department represented by ClassDiagram.Atrribute>>//illustratestheproblematicsituationdescribedinhhh-8330reportsto;
Many-To-One relationship from ClassDiagram.Class>>DestinationEntity  to ClassDiagram.Class>>Entity represented by ClassDiagram.Atrribute>>from;
Many-To-One relationship from ClassDiagram.Class>>Entity1  to ClassDiagram.Class>>Entity represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Parent  to ClassDiagram.Class>>Set<Child>;
Many-To-One relationship from ClassDiagram.Class>>Entity2  to ClassDiagram.Class>>Entity represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Child  to ClassDiagram.Class>>Set<GrandChild>;
Many-To-One relationship from ClassDiagram.Class>>TrtPanel  to ClassDiagram.Class>>panel represented by ClassDiagram.Atrribute>>GeneratedName;
list<crop>: farm_list<crop>(farmID:farm [PK] #FK to farm,list<crop>ID:list<crop> [PK] #FK to list<crop>);
One-To-One relationship between ClassDiagram.Class>>Employee  to ClassDiagram.Class>>title represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Employee  to ClassDiagram.Class>>department represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Language  to ClassDiagram.Class>>language represented by ClassDiagram.Atrribute>>fallback;
set<item>: category_set<item>(categoryID:category [PK] #FK to category,set<item>ID:set<item> [PK] #FK to set<item>);
One-To-Many relationship from ClassDiagram.Class>>Customer  to ClassDiagram.Class>>List<Order>;
set<industry>: customer_set<industry>(customerID:customer [PK] #FK to customer,set<industry>ID:set<industry> [PK] #FK to set<industry>);
One-To-Many relationship from ClassDiagram.Class>>Zoo  to ClassDiagram.Class>>Set<Tiger>;
One-To-Many relationship from ClassDiagram.Class>>Zoo  to ClassDiagram.Class>>Set<Lion>;
One-To-Many relationship from ClassDiagram.Class>>User  to ClassDiagram.Class>>IMyList<Email>;
One-To-Many relationship from ClassDiagram.Class>>VersionedCascadeOne  to ClassDiagram.Class>>Set<Many>;
One-To-Many relationship from ClassDiagram.Class>>UnversionedNoCascadeOne  to ClassDiagram.Class>>Set<Many>;
One-To-Many relationship from ClassDiagram.Class>>VersionedNoCascadeOne  to ClassDiagram.Class>>Set<Many>;
One-To-Many relationship from ClassDiagram.Class>>UnversionedCascadeOne  to ClassDiagram.Class>>Set<Many>;
Many-To-One relationship from ClassDiagram.Class>>MultilingualStringParent  to ClassDiagram.Class>>Parent represented by ClassDiagram.Atrribute>>parent;
Many-To-One relationship from ClassDiagram.Class>>MultilingualStringParent  to ClassDiagram.Class>>multilingualstring represented by ClassDiagram.Atrribute>>string;
Many-To-One relationship from ClassDiagram.Class>>MapKey  to ClassDiagram.Class>>mapvalue represented by ClassDiagram.Atrribute>>defaultvalue;
Many-To-Many relationship between ClassDiagram.Class>>MapHolder  and ClassDiagram.Class>>map<mapkey,mapvalue>: map_key_map_value(map_holder_id:MapHolder [PK] #FK to MapHolder,map_value_id:map<mapkey,mapvalue> [PK] #FK to map<mapkey,mapvalue>);
One-To-One relationship between ClassDiagram.Class>>Parent  to ClassDiagram.Class>>child represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Child  to ClassDiagram.Class>>Parent represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>ABlockableEntity  to ClassDiagram.Class>>Entity represented by ClassDiagram.Atrribute>>//wehavetwoone-to-oneassociationstomakesureparent_idisn'tconsideredaspartofthistableregardingduplicatemappingsother;
One-To-One relationship between ClassDiagram.Class>>ABlockableEntity  to ClassDiagram.Class>>Entity represented by ClassDiagram.Atrribute>>other2;
Many-To-One relationship from ClassDiagram.Class>>ABlockableEntity  to ClassDiagram.Class>>Entity represented by ClassDiagram.Atrribute>>//twomany-to-onestomakesurethatstillworksinthisscenariomanytoone1;
Many-To-One relationship from ClassDiagram.Class>>ABlockableEntity  to ClassDiagram.Class>>Entity represented by ClassDiagram.Atrribute>>manytoone2;
One-To-Many relationship from ClassDiagram.Class>>ABlockableEntity  to ClassDiagram.Class>>Set<OtherEntity>;
One-To-Many relationship from ClassDiagram.Class>>ABlockableEntity  to ClassDiagram.Class>>Set<ABlockableEntity>;
One-To-Many relationship from ClassDiagram.Class>>Parent  to ClassDiagram.Class>>List<Child>;
One-To-Many relationship from ClassDiagram.Class>>PrimeMinister  to ClassDiagram.Class>>Set<Government>;
Type: sky_Type(skyID:sky [PK] #FK to sky,TypeID:Type [PK] #FK to Type);
Many-To-One relationship from ClassDiagram.Class>>Sky  to ClassDiagram.Class>>Type represented by ClassDiagram.Atrribute>>maincloud;
One-To-Many relationship from ClassDiagram.Class>>Manufacturer  to ClassDiagram.Class>>Set<Model>;
One-To-Many relationship from ClassDiagram.Class>>Bunny  to ClassDiagram.Class>>Set<PointyTooth>;
One-To-Many relationship from ClassDiagram.Class>>Bunny  to ClassDiagram.Class>>Set<TwinkleToes>;
Many-To-One relationship from ClassDiagram.Class>>TwinkleToes  to ClassDiagram.Class>>bunny represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>PointyTooth  to ClassDiagram.Class>>bunny represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>PointyTooth  to ClassDiagram.Class>>bunny represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>TwinkleToes  to ClassDiagram.Class>>bunny represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Bunny  to ClassDiagram.Class>>Set<PointyTooth>;
One-To-Many relationship from ClassDiagram.Class>>Bunny  to ClassDiagram.Class>>Set<TwinkleToes>;
One-To-One relationship between ClassDiagram.Class>>BiggestForest  to ClassDiagram.Class>>Type represented by ClassDiagram.Atrribute>>type;
Many-To-One relationship from ClassDiagram.Class>>Deal  to ClassDiagram.Class>>customer represented by ClassDiagram.Atrribute>>userid;
Many-To-One relationship from ClassDiagram.Class>>Deal  to ClassDiagram.Class>>customer represented by ClassDiagram.Atrribute>>userid;
One-To-Many relationship from ClassDiagram.Class>>Lotz  to ClassDiagram.Class>>List<Carz>;
Many-To-One relationship from ClassDiagram.Class>>DistrictUser  to ClassDiagram.Class>>user represented by ClassDiagram.Atrribute>>ctvusers_key;
Many-To-One relationship from ClassDiagram.Class>>Child  to ClassDiagram.Class>>Parent represented by ClassDiagram.Atrribute>>ismale;
One-To-Many relationship from ClassDiagram.Class>>Order  to ClassDiagram.Class>>Set<OrderLine>;
One-To-Many relationship from ClassDiagram.Class>>ForestType  to ClassDiagram.Class>>Set<TreeType>;
One-To-One relationship between ClassDiagram.Class>>ForestType  to ClassDiagram.Class>>biggestforest represented by ClassDiagram.Atrribute>>biggestrepresentative;
Many-To-One relationship from ClassDiagram.Class>>Car  to ClassDiagram.Class>>Parent represented by ClassDiagram.Atrribute>>owner;
Many-To-One relationship from ClassDiagram.Class>>WarehouseItem  to ClassDiagram.Class>>zitemcost represented by ClassDiagram.Atrribute>>vendor_id;
Many-To-One relationship from ClassDiagram.Class>>Node  to ClassDiagram.Class>>Node represented by ClassDiagram.Atrribute>>parent;
Many-To-One relationship from ClassDiagram.Class>>Carz  to ClassDiagram.Class>>lotz represented by ClassDiagram.Atrribute>>loc_code;
One-To-Many relationship from ClassDiagram.Class>>User  to ClassDiagram.Class>>Set<DistrictUser>;
One-To-Many relationship from ClassDiagram.Class>>Frame  to ClassDiagram.Class>>Set<Lens>;
Many-To-One relationship from ClassDiagram.Class>>Lens  to ClassDiagram.Class>>frame represented by ClassDiagram.Atrribute>>name;
One-To-One relationship between ClassDiagram.Class>>Administration  to ClassDiagram.Class>>bustrip represented by ClassDiagram.Atrribute>>default;
One-To-Many relationship from ClassDiagram.Class>>Father  to ClassDiagram.Class>>List<Son>;
One-To-Many relationship from ClassDiagram.Class>>Mother  to ClassDiagram.Class>>Set<Son>;
One-To-Many relationship from ClassDiagram.Class>>Topic  to ClassDiagram.Class>>Set<Narrative>;
Many-To-One relationship from ClassDiagram.Class>>Player  to ClassDiagram.Class>>soccerteam represented by ClassDiagram.Atrribute>>team;
One-To-Many relationship from ClassDiagram.Class>>SoccerTeam  to ClassDiagram.Class>>List<Doctor>;
One-To-Many relationship from ClassDiagram.Class>>SoccerTeam  to ClassDiagram.Class>>Set<Player>;
One-To-One relationship between ClassDiagram.Class>>SoccerTeam  to ClassDiagram.Class>>player represented by ClassDiagram.Atrribute>>onevone;
One-To-Many relationship from ClassDiagram.Class>>Card  to ClassDiagram.Class>>Set<CardField>;
Many-To-One relationship from ClassDiagram.Class>>Card  to ClassDiagram.Class>>cardfield represented by ClassDiagram.Atrribute>>main;
One-To-Many relationship from ClassDiagram.Class>>C  to ClassDiagram.Class>>List<B>;
Many-To-One relationship from ClassDiagram.Class>>Droitacces  to ClassDiagram.Class>>benefserv represented by ClassDiagram.Atrribute>>idpkbenef;
Many-To-One relationship from ClassDiagram.Class>>Acces  to ClassDiagram.Class>>droitacces represented by ClassDiagram.Atrribute>>idpkdracc;
Many-To-One relationship from ClassDiagram.Class>>Benefserv  to ClassDiagram.Class>>service represented by ClassDiagram.Atrribute>>idpkser;
One-To-Many relationship from ClassDiagram.Class>>A  to ClassDiagram.Class>>List<C>;
Many-To-One relationship from ClassDiagram.Class>>StoreCustomer  to ClassDiagram.Class>>store represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>StoreCustomer  to ClassDiagram.Class>>customer represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>CardField  to ClassDiagram.Class>>card represented by ClassDiagram.Atrribute>>tmp;
One-To-Many relationship from ClassDiagram.Class>>Customers  to ClassDiagram.Class>>java.util.Set;
Many-To-One relationship from ClassDiagram.Class>>CourseStudent  to ClassDiagram.Class>>course represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>CourseStudent  to ClassDiagram.Class>>student represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Student  to ClassDiagram.Class>>Set<CourseStudent>;
One-To-Many relationship from ClassDiagram.Class>>Store  to ClassDiagram.Class>>Set<StoreCustomer>;
Many-To-One relationship from ClassDiagram.Class>>ShoppingBaskets  to ClassDiagram.Class>>customers represented by ClassDiagram.Atrribute>>customerid;
One-To-Many relationship from ClassDiagram.Class>>ShoppingBaskets  to ClassDiagram.Class>>java.util.Set;
One-To-Many relationship from ClassDiagram.Class>>Course  to ClassDiagram.Class>>Set<CourseStudent>;
Many-To-One relationship from ClassDiagram.Class>>BasketItems  to ClassDiagram.Class>>shoppingbaskets represented by ClassDiagram.Atrribute>>basketdatetime;
One-To-Many relationship from ClassDiagram.Class>>Customer  to ClassDiagram.Class>>Set<StoreCustomer>;
One-To-Many relationship from ClassDiagram.Class>>Country  to ClassDiagram.Class>>List<State>;
Many-To-One relationship from ClassDiagram.Class>>Employee  to ClassDiagram.Class>>employeegroup represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Employee  to ClassDiagram.Class>>attrset represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Attrset  to ClassDiagram.Class>>Set<Attrvalue>;
One-To-Many relationship from ClassDiagram.Class>>Chaos  to ClassDiagram.Class>>Set<CasimirParticle>;
One-To-Many relationship from ClassDiagram.Class>>Employeegroup  to ClassDiagram.Class>>List<Employee>;
Many-To-One relationship from ClassDiagram.Class>>Employeegroup  to ClassDiagram.Class>>attrset represented by ClassDiagram.Atrribute>>GeneratedName;
set<color>: screen_set<color>(screenID:screen [PK] #FK to screen,set<color>ID:set<color> [PK] #FK to set<color>);
Many-To-One relationship from ClassDiagram.Class>>TvOwner  to ClassDiagram.Class>>tv represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Alarm  to ClassDiagram.Class>>eventinformation represented by ClassDiagram.Atrribute>>eventinfo;
One-To-Many relationship from ClassDiagram.Class>>Folder  to ClassDiagram.Class>>Set<File>;
Many-To-One relationship from ClassDiagram.Class>>SymbolicLink  to ClassDiagram.Class>>file represented by ClassDiagram.Atrribute>>target;
Many-To-One relationship from ClassDiagram.Class>>Client  to ClassDiagram.Class>>account represented by ClassDiagram.Atrribute>>id;
Many-To-One relationship from ClassDiagram.Class>>File  to ClassDiagram.Class>>folder represented by ClassDiagram.Atrribute>>parent;
Many-To-One relationship from ClassDiagram.Class>>ProgramExecution  to ClassDiagram.Class>>file represented by ClassDiagram.Atrribute>>applieson;
One-To-Many relationship from ClassDiagram.Class>>Account  to ClassDiagram.Class>>Set<Client>;
One-To-Many relationship from ClassDiagram.Class>>Folder  to ClassDiagram.Class>>Set<File>;
Many-To-One relationship from ClassDiagram.Class>>File  to ClassDiagram.Class>>folder represented by ClassDiagram.Atrribute>>parent;
Many-To-One relationship from ClassDiagram.Class>>SymbolicLink  to ClassDiagram.Class>>file represented by ClassDiagram.Atrribute>>target;
One-To-Many relationship from ClassDiagram.Class>>Folder  to ClassDiagram.Class>>Set<File>;
Many-To-One relationship from ClassDiagram.Class>>SymbolicLink  to ClassDiagram.Class>>file represented by ClassDiagram.Atrribute>>target;
Many-To-One relationship from ClassDiagram.Class>>File  to ClassDiagram.Class>>folder represented by ClassDiagram.Atrribute>>parent;
Many-To-One relationship from ClassDiagram.Class>>AddressEntry  to ClassDiagram.Class>>addressbook represented by ClassDiagram.Atrribute>>book;
Many-To-One relationship from ClassDiagram.Class>>AddressEntry  to ClassDiagram.Class>>alphabeticaldirectory represented by ClassDiagram.Atrribute>>directory;
One-To-Many relationship from ClassDiagram.Class>>Painter  to ClassDiagram.Class>>Map<String,Painting>;
map<string,gas>: atmosphere_map<string,gas>(atmosphereID:atmosphere [PK] #FK to atmosphere,map<string,gas>ID:map<string,gas> [PK] #FK to map<string,gas>);
Many-To-Many relationship between ClassDiagram.Class>>Atmosphere  and ClassDiagram.Class>>map<gaskey,gas>: atmosphere_map<string,gas>(atmosphereID:atmosphere [PK] #FK to atmosphere,map<string,gas>ID:map<string,gas> [PK] #FK to map<string,gas>);gas_per_key(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,map<gaskey,gas>_ID:map<gaskey,gas> [PK] #FK to map<gaskey,gas>);
Many-To-Many relationship between ClassDiagram.Class>>Atmosphere  and ClassDiagram.Class>>map<string,gas>: atmosphere_map<string,gas>(atmosphereID:atmosphere [PK] #FK to atmosphere,map<string,gas>ID:map<string,gas> [PK] #FK to map<string,gas>);gas_per_key(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,map<gaskey,gas>_ID:map<gaskey,gas> [PK] #FK to map<gaskey,gas>);atm_gas_def(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,map<string,gas>_ID:map<string,gas> [PK] #FK to map<string,gas>);
Many-To-Many relationship between ClassDiagram.Class>>Atmosphere  and ClassDiagram.Class>>map<string,gas>: atmosphere_map<string,gas>(atmosphereID:atmosphere [PK] #FK to atmosphere,map<string,gas>ID:map<string,gas> [PK] #FK to map<string,gas>);gas_per_key(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,map<gaskey,gas>_ID:map<gaskey,gas> [PK] #FK to map<gaskey,gas>);atm_gas_def(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,map<string,gas>_ID:map<string,gas> [PK] #FK to map<string,gas>);atm_gas_defleg(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,map<string,gas>_ID:map<string,gas> [PK] #FK to map<string,gas>);
Many-To-Many relationship between ClassDiagram.Class>>Atmosphere  and ClassDiagram.Class>>map<gaskey,gas>: atmosphere_map<string,gas>(atmosphereID:atmosphere [PK] #FK to atmosphere,map<string,gas>ID:map<string,gas> [PK] #FK to map<string,gas>);gas_per_key(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,map<gaskey,gas>_ID:map<gaskey,gas> [PK] #FK to map<gaskey,gas>);atm_gas_def(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,map<string,gas>_ID:map<string,gas> [PK] #FK to map<string,gas>);atm_gas_defleg(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,map<string,gas>_ID:map<string,gas> [PK] #FK to map<string,gas>);gas_p_key_def(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,map<gaskey,gas>_ID:map<gaskey,gas> [PK] #FK to map<gaskey,gas>);
map<string,gas>: atmosphere_map<string,gas>(atmosphereID:atmosphere [PK] #FK to atmosphere,map<string,gas>ID:map<string,gas> [PK] #FK to map<string,gas>);
Many-To-Many relationship between ClassDiagram.Class>>Atmosphere  and ClassDiagram.Class>>map<gaskey,gas>: atmosphere_map<string,gas>(atmosphereID:atmosphere [PK] #FK to atmosphere,map<string,gas>ID:map<string,gas> [PK] #FK to map<string,gas>);gas_per_key(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,map<gaskey,gas>_ID:map<gaskey,gas> [PK] #FK to map<gaskey,gas>);
Many-To-Many relationship between ClassDiagram.Class>>Atmosphere  and ClassDiagram.Class>>map<string,gas>: atmosphere_map<string,gas>(atmosphereID:atmosphere [PK] #FK to atmosphere,map<string,gas>ID:map<string,gas> [PK] #FK to map<string,gas>);gas_per_key(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,map<gaskey,gas>_ID:map<gaskey,gas> [PK] #FK to map<gaskey,gas>);atm_gas_def(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,map<string,gas>_ID:map<string,gas> [PK] #FK to map<string,gas>);
Many-To-Many relationship between ClassDiagram.Class>>Atmosphere  and ClassDiagram.Class>>map<string,gas>: atmosphere_map<string,gas>(atmosphereID:atmosphere [PK] #FK to atmosphere,map<string,gas>ID:map<string,gas> [PK] #FK to map<string,gas>);gas_per_key(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,map<gaskey,gas>_ID:map<gaskey,gas> [PK] #FK to map<gaskey,gas>);atm_gas_def(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,map<string,gas>_ID:map<string,gas> [PK] #FK to map<string,gas>);atm_gas_defleg(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,map<string,gas>_ID:map<string,gas> [PK] #FK to map<string,gas>);
Many-To-Many relationship between ClassDiagram.Class>>Atmosphere  and ClassDiagram.Class>>map<gaskey,gas>: atmosphere_map<string,gas>(atmosphereID:atmosphere [PK] #FK to atmosphere,map<string,gas>ID:map<string,gas> [PK] #FK to map<string,gas>);gas_per_key(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,map<gaskey,gas>_ID:map<gaskey,gas> [PK] #FK to map<gaskey,gas>);atm_gas_def(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,map<string,gas>_ID:map<string,gas> [PK] #FK to map<string,gas>);atm_gas_defleg(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,map<string,gas>_ID:map<string,gas> [PK] #FK to map<string,gas>);gas_p_key_def(Atmosphere_ID:Atmosphere [PK] #FK to Atmosphere,map<gaskey,gas>_ID:map<gaskey,gas> [PK] #FK to map<gaskey,gas>);
One-To-Many relationship from ClassDiagram.Class>>GenerationUser  to ClassDiagram.Class>>Map<Generation,GenerationGroup>;
One-To-Many relationship from ClassDiagram.Class>>Software  to ClassDiagram.Class>>Map<String,Version>;
map<string,news>: newspaper_map<string,news>(newspaperID:newspaper [PK] #FK to newspaper,map<string,news>ID:map<string,news> [PK] #FK to map<string,news>);
One-To-Many relationship from ClassDiagram.Class>>Drawer  to ClassDiagram.Class>>List<Dress>;
Sort: training_Sort(trainingID:training [PK] #FK to training,SortID:Sort [PK] #FK to Sort);
One-To-Many relationship from ClassDiagram.Class>>Wardrobe  to ClassDiagram.Class>>List<Drawer>;
Many-To-Many relationship between ClassDiagram.Class>>PressReleaseAgency  and ClassDiagram.Class>>map<integer,news>: pressreleaseagency_id(pressreleaseagency_id:PressReleaseAgency [PK] #FK to PressReleaseAgency,news_id:map<integer,news> [PK] #FK to map<integer,news>);
One-To-Many relationship from ClassDiagram.Class>>AddressBook  to ClassDiagram.Class>>Map<AddressEntryPk,AddressEntry>;
One-To-Many relationship from ClassDiagram.Class>>AddressBook  to ClassDiagram.Class>>Map<String,AddressEntry>;
One-To-Many relationship from ClassDiagram.Class>>AddressBook  to ClassDiagram.Class>>Map<AlphabeticalDirectory,AddressEntry>;
One-To-One relationship between ClassDiagram.Class>>MedicalHistory  to ClassDiagram.Class>>person represented by ClassDiagram.Atrribute>>patient;
One-To-One relationship between ClassDiagram.Class>>MedicalHistory  to ClassDiagram.Class>>person represented by ClassDiagram.Atrribute>>patient;
Many-To-One relationship from ClassDiagram.Class>>Dependent  to ClassDiagram.Class>>employee represented by ClassDiagram.Atrribute>>emp;
One-To-One relationship between ClassDiagram.Class>>ExclusiveDependent  to ClassDiagram.Class>>employee represented by ClassDiagram.Atrribute>>emp;
Many-To-One relationship from ClassDiagram.Class>>Dependent  to ClassDiagram.Class>>employee represented by ClassDiagram.Atrribute>>//@joincolumn(name;
Many-To-One relationship from ClassDiagram.Class>>CustomerInventory  to ClassDiagram.Class>>customer represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>CustomerInventory  to ClassDiagram.Class>>item represented by ClassDiagram.Atrribute>>vehicle;
One-To-Many relationship from ClassDiagram.Class>>CustomerTwo  to ClassDiagram.Class>>List<CustomerInventoryTwo>;
Many-To-One relationship from ClassDiagram.Class>>CustomerInventoryTwo  to ClassDiagram.Class>>customertwo represented by ClassDiagram.Atrribute>>customer;
Many-To-One relationship from ClassDiagram.Class>>CustomerInventoryTwo  to ClassDiagram.Class>>item represented by ClassDiagram.Atrribute>>vehicle;
One-To-Many relationship from ClassDiagram.Class>>Customer  to ClassDiagram.Class>>List<CustomerInventory>;
Many-To-One relationship from ClassDiagram.Class>>CustomerInventory  to ClassDiagram.Class>>customer represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>CustomerInventory  to ClassDiagram.Class>>item represented by ClassDiagram.Atrribute>>vehicle;
One-To-Many relationship from ClassDiagram.Class>>Customer  to ClassDiagram.Class>>List<CustomerInventory>;
One-To-One relationship between ClassDiagram.Class>>MedicalHistory  to ClassDiagram.Class>>person represented by ClassDiagram.Atrribute>>patient;
One-To-One relationship between ClassDiagram.Class>>MedicalHistory  to ClassDiagram.Class>>person represented by ClassDiagram.Atrribute>>patient;
One-To-One relationship between ClassDiagram.Class>>MedicalHistory  to ClassDiagram.Class>>person represented by ClassDiagram.Atrribute>>patient;
One-To-One relationship between ClassDiagram.Class>>Person  to ClassDiagram.Class>>personinfo represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Employee  to ClassDiagram.Class>>Set<Dependent>;
One-To-One relationship between ClassDiagram.Class>>Bar  to ClassDiagram.Class>>foo represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Foo  to ClassDiagram.Class>>bar represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>PersonInfo  to ClassDiagram.Class>>person represented by ClassDiagram.Atrribute>>id;
Many-To-One relationship from ClassDiagram.Class>>OrderLine  to ClassDiagram.Class>>Order represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>OrderLine  to ClassDiagram.Class>>product represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Dependent  to ClassDiagram.Class>>employee represented by ClassDiagram.Atrribute>>emp;
One-To-Many relationship from ClassDiagram.Class>>Order  to ClassDiagram.Class>>Set<OrderLine>;
Many-To-One relationship from ClassDiagram.Class>>Dependent  to ClassDiagram.Class>>employee represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Dependent  to ClassDiagram.Class>>employee represented by ClassDiagram.Atrribute>>emp;
Many-To-One relationship from ClassDiagram.Class>>Dependent  to ClassDiagram.Class>>employee represented by ClassDiagram.Atrribute>>firstname;
Many-To-One relationship from ClassDiagram.Class>>Dependent  to ClassDiagram.Class>>employee represented by ClassDiagram.Atrribute>>emp;
Many-To-One relationship from ClassDiagram.Class>>Policy  to ClassDiagram.Class>>dependent represented by ClassDiagram.Atrribute>>dep;
Many-To-One relationship from ClassDiagram.Class>>Dependent  to ClassDiagram.Class>>employee represented by ClassDiagram.Atrribute>>firstname;
Many-To-One relationship from ClassDiagram.Class>>Dependent  to ClassDiagram.Class>>employee represented by ClassDiagram.Atrribute>>firstname;
Many-To-One relationship from ClassDiagram.Class>>Policy  to ClassDiagram.Class>>dependent represented by ClassDiagram.Atrribute>>firstname;
Many-To-One relationship from ClassDiagram.Class>>Dependent  to ClassDiagram.Class>>employee represented by ClassDiagram.Atrribute>>firstname;
One-To-One relationship between ClassDiagram.Class>>MedicalHistory  to ClassDiagram.Class>>person represented by ClassDiagram.Atrribute>>patient;
One-To-One relationship between ClassDiagram.Class>>MedicalHistory  to ClassDiagram.Class>>person represented by ClassDiagram.Atrribute>>patient;
Many-To-One relationship from ClassDiagram.Class>>FinancialHistory  to ClassDiagram.Class>>person represented by ClassDiagram.Atrribute>>patient;
One-To-One relationship between ClassDiagram.Class>>MedicalHistory  to ClassDiagram.Class>>person represented by ClassDiagram.Atrribute>>patient;
Many-To-One relationship from ClassDiagram.Class>>FinancialHistory  to ClassDiagram.Class>>person represented by ClassDiagram.Atrribute>>patient;
Many-To-One relationship from ClassDiagram.Class>>Employer  to ClassDiagram.Class>>employee represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Course2  to ClassDiagram.Class>>List<Student>;
One-To-Many relationship from ClassDiagram.Class>>Course6  to ClassDiagram.Class>>List<Student>;
One-To-Many relationship from ClassDiagram.Class>>Course3  to ClassDiagram.Class>>List<Student>;
One-To-Many relationship from ClassDiagram.Class>>Course7  to ClassDiagram.Class>>List<Student>;
One-To-Many relationship from ClassDiagram.Class>>Course1  to ClassDiagram.Class>>List<Student>;
One-To-Many relationship from ClassDiagram.Class>>User  to ClassDiagram.Class>>List<User>;
list<student>: course5_list<student>(course5ID:course5 [PK] #FK to course5,list<student>ID:list<student> [PK] #FK to list<student>);
One-To-Many relationship from ClassDiagram.Class>>Course4  to ClassDiagram.Class>>List<Student>;
One-To-Many relationship from ClassDiagram.Class>>Course8  to ClassDiagram.Class>>List<Student>;
Many-To-One relationship from ClassDiagram.Class>>Vehicule  to ClassDiagram.Class>>conductor represented by ClassDiagram.Atrribute>>current;
Many-To-One relationship from ClassDiagram.Class>>Vehicule  to ClassDiagram.Class>>conductor represented by ClassDiagram.Atrribute>>previous;
Many-To-One relationship from ClassDiagram.Class>>Truck  to ClassDiagram.Class>>professionalagreement represented by ClassDiagram.Atrribute>>agreement;
One-To-Many relationship from ClassDiagram.Class>>Team  to ClassDiagram.Class>>Set<Player>;
Many-To-One relationship from ClassDiagram.Class>>Model  to ClassDiagram.Class>>manufacturer represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Politician  to ClassDiagram.Class>>politicalparty represented by ClassDiagram.Atrribute>>party;
One-To-Many relationship from ClassDiagram.Class>>Box  to ClassDiagram.Class>>List<Item>;
One-To-Many relationship from ClassDiagram.Class>>A  to ClassDiagram.Class>>java.util.List<B>;
One-To-Many relationship from ClassDiagram.Class>>Parent  to ClassDiagram.Class>>Set<Child>;
One-To-Many relationship from ClassDiagram.Class>>Post  to ClassDiagram.Class>>List<Comment>;
One-To-Many relationship from ClassDiagram.Class>>City  to ClassDiagram.Class>>List<Street>;
One-To-Many relationship from ClassDiagram.Class>>City  to ClassDiagram.Class>>List<Street>;
One-To-Many relationship from ClassDiagram.Class>>BankAccount  to ClassDiagram.Class>>List<Transaction>;
One-To-Many relationship from ClassDiagram.Class>>Order  to ClassDiagram.Class>>List<OrderItem>;
Many-To-One relationship from ClassDiagram.Class>>Child  to ClassDiagram.Class>>Parent represented by ClassDiagram.Atrribute>>ismale;
One-To-Many relationship from ClassDiagram.Class>>Troop  to ClassDiagram.Class>>Set<Soldier>;
One-To-Many relationship from ClassDiagram.Class>>Employee  to ClassDiagram.Class>>List<Asset>;
Many-To-One relationship from ClassDiagram.Class>>Asset  to ClassDiagram.Class>>employee represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>PoliticalParty  to ClassDiagram.Class>>Set<Politician>;
One-To-Many relationship from ClassDiagram.Class>>B  to ClassDiagram.Class>>java.util.List<C>;
One-To-Many relationship from ClassDiagram.Class>>Zoo  to ClassDiagram.Class>>Set<Tiger>;
One-To-Many relationship from ClassDiagram.Class>>Zoo  to ClassDiagram.Class>>Set<Monkey>;
One-To-Many relationship from ClassDiagram.Class>>Zoo  to ClassDiagram.Class>>Set<Visitor>;
Many-To-One relationship from ClassDiagram.Class>>Transaction  to ClassDiagram.Class>>bankaccount represented by ClassDiagram.Atrribute>>account;
Many-To-One relationship from ClassDiagram.Class>>Item  to ClassDiagram.Class>>box represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Forum  to ClassDiagram.Class>>List<Comment>;
One-To-Many relationship from ClassDiagram.Class>>Forum  to ClassDiagram.Class>>List<User>;
One-To-Many relationship from ClassDiagram.Class>>Organisation  to ClassDiagram.Class>>Set<OrganisationUser>;
One-To-Many relationship from ClassDiagram.Class>>Trainer  to ClassDiagram.Class>>Set<Tiger>;
One-To-Many relationship from ClassDiagram.Class>>Trainer  to ClassDiagram.Class>>Set<Monkey>;
One-To-Many relationship from ClassDiagram.Class>>Contest  to ClassDiagram.Class>>Competitor;
One-To-Many relationship from ClassDiagram.Class>>Person  to ClassDiagram.Class>>Collection<Stay>;
One-To-Many relationship from ClassDiagram.Class>>Person  to ClassDiagram.Class>>Collection<Stay>;
One-To-Many relationship from ClassDiagram.Class>>Person  to ClassDiagram.Class>>Collection<Stay>;
One-To-Many relationship from ClassDiagram.Class>>Person  to ClassDiagram.Class>>List<Stay>;
One-To-Many relationship from ClassDiagram.Class>>Branch  to ClassDiagram.Class>>Set<Leaf>;
Many-To-One relationship from ClassDiagram.Class>>Leaf  to ClassDiagram.Class>>branch represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Deck  to ClassDiagram.Class>>Set<Card>;
Many-To-One relationship from ClassDiagram.Class>>Card  to ClassDiagram.Class>>deck represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Discount  to ClassDiagram.Class>>customer represented by ClassDiagram.Atrribute>>owner;
Many-To-One relationship from ClassDiagram.Class>>SocialNetworkProfile  to ClassDiagram.Class>>user represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>User  to ClassDiagram.Class>>Map<SocialNetwork,SocialNetworkProfile>;
One-To-Many relationship from ClassDiagram.Class>>Club  to ClassDiagram.Class>>Set<Human>;
Many-To-One relationship from ClassDiagram.Class>>Human  to ClassDiagram.Class>>club represented by ClassDiagram.Atrribute>>GeneratedName;
set<permission>: groupwithset_set<permission>(groupwithsetID:groupwithset [PK] #FK to groupwithset,set<permission>ID:set<permission> [PK] #FK to set<permission>);
One-To-Many relationship from ClassDiagram.Class>>ProgramManager  to ClassDiagram.Class>>Collection<Employee>;
Many-To-Many relationship between ClassDiagram.Class>>Employer  and ClassDiagram.Class>>collection: employer_employee(emper_id:Employer [PK] #FK to Employer,empee_id:collection [PK] #FK to collection);
Many-To-Many relationship between ClassDiagram.Class>>Employer  and ClassDiagram.Class>>list: employer_employee(emper_id:Employer [PK] #FK to Employer,empee_id:collection [PK] #FK to collection);employer_contractor(employer_id:Employer [PK] #FK to Employer,contractor_id:list [PK] #FK to list);
Many-To-Many relationship between ClassDiagram.Class>>InspectorPrefixes  and ClassDiagram.Class>>list<zone>: deserted_area(inspector_name:InspectorPrefixes [PK] #FK to InspectorPrefixes,area_id:list<zone> [PK] #FK to list<zone>);
Many-To-Many relationship between ClassDiagram.Class>>InspectorPrefixes  and ClassDiagram.Class>>list<zone>: deserted_area(inspector_name:InspectorPrefixes [PK] #FK to InspectorPrefixes,area_id:list<zone> [PK] #FK to list<zone>);inspector_prefixes_areas(inspector_id:InspectorPrefixes [PK] #FK to InspectorPrefixes,area_id:list<zone> [PK] #FK to list<zone>);
collection<permission>: group_collection<permission>(groupID:group [PK] #FK to group,collection<permission>ID:collection<permission> [PK] #FK to collection<permission>);
Many-To-Many relationship between ClassDiagram.Class>>Friend  and ClassDiagram.Class>>set<friend>: friend2friend(from_fr:Friend [PK] #FK to Friend,to_fr:set<friend> [PK] #FK to set<friend>);
set<city>: item_set<city>(itemID:item [PK] #FK to item,set<city>ID:set<city> [PK] #FK to set<city>);
set<knownclient>: store_set<knownclient>(storeID:store [PK] #FK to store,set<knownclient>ID:set<knownclient> [PK] #FK to set<knownclient>);
set<item>: store_set<knownclient>(storeID:store [PK] #FK to store,set<knownclient>ID:set<knownclient> [PK] #FK to set<knownclient>);store_set<item>(storeID:store [PK] #FK to store,set<item>ID:set<item> [PK] #FK to set<item>);
set<category>: store_set<knownclient>(storeID:store [PK] #FK to store,set<knownclient>ID:set<knownclient> [PK] #FK to set<knownclient>);store_set<item>(storeID:store [PK] #FK to store,set<item>ID:set<item> [PK] #FK to set<item>);store_set<category>(storeID:store [PK] #FK to store,set<category>ID:set<category> [PK] #FK to set<category>);
set<city>: store_set<knownclient>(storeID:store [PK] #FK to store,set<knownclient>ID:set<knownclient> [PK] #FK to set<knownclient>);store_set<item>(storeID:store [PK] #FK to store,set<item>ID:set<item> [PK] #FK to set<item>);store_set<category>(storeID:store [PK] #FK to store,set<category>ID:set<category> [PK] #FK to set<category>);store_set<city>(storeID:store [PK] #FK to store,set<city>ID:set<city> [PK] #FK to set<city>);
set<item>: city_set<item>(cityID:city [PK] #FK to city,set<item>ID:set<item> [PK] #FK to set<item>);
set<knownclient>: category_set<knownclient>(categoryID:category [PK] #FK to category,set<knownclient>ID:set<knownclient> [PK] #FK to set<knownclient>);
Many-To-One relationship from ClassDiagram.Class>>Building  to ClassDiagram.Class>>Any represented by ClassDiagram.Atrribute>>name;
Many-To-Many relationship between ClassDiagram.Class>>Woman  and ClassDiagram.Class>>set<man>: man_woman(womanlastname:Woman [PK] #FK to Woman,maniselder:set<man> [PK] #FK to set<man>);
null: man_woman(womanlastname:Woman [PK] #FK to Woman,maniselder:set<man> [PK] #FK to set<man>);
Many-To-Many relationship between ClassDiagram.Class>>Cat  and ClassDiagram.Class>>set<woman>: tt(Cat_ID:Cat [PK] #FK to Cat,set<woman>_ID:set<woman> [PK] #FK to set<woman>);
set<knownclient>: store_set<knownclient>(storeID:store [PK] #FK to store,set<knownclient>ID:set<knownclient> [PK] #FK to set<knownclient>);
Many-To-Many relationship between ClassDiagram.Class>>Store  and ClassDiagram.Class>>set<supplier>: store_set<knownclient>(storeID:store [PK] #FK to store,set<knownclient>ID:set<knownclient> [PK] #FK to set<knownclient>);storesupplier(store:Store [PK] #FK to Store,supplier:set<supplier> [PK] #FK to set<supplier>);
set<city>: store_set<knownclient>(storeID:store [PK] #FK to store,set<knownclient>ID:set<knownclient> [PK] #FK to set<knownclient>);storesupplier(store:Store [PK] #FK to Store,supplier:set<supplier> [PK] #FK to set<supplier>);store_set<city>(storeID:store [PK] #FK to store,set<city>ID:set<city> [PK] #FK to set<city>);
One-To-Many relationship from ClassDiagram.Class>>Luggage  to ClassDiagram.Class>>Set<Clothes>;
Many-To-Many relationship between ClassDiagram.Class>>House  and ClassDiagram.Class>>set<inhabitant>: address(address:House [PK] #FK to House,name:set<inhabitant> [PK] #FK to set<inhabitant>);
One-To-Many relationship from ClassDiagram.Class>>Rambler  to ClassDiagram.Class>>Set<Bag>;
Many-To-One relationship from ClassDiagram.Class>>WarehouseItem  to ClassDiagram.Class>>itemcost represented by ClassDiagram.Atrribute>>vendor_id;
Many-To-One relationship from ClassDiagram.Class>>Bag  to ClassDiagram.Class>>rambler represented by ClassDiagram.Atrribute>>fld_name;
One-To-Many relationship from ClassDiagram.Class>>Customer  to ClassDiagram.Class>>SortedSet<Ticket>;
One-To-Many relationship from ClassDiagram.Class>>Customer  to ClassDiagram.Class>>Collection;
Many-To-One relationship from ClassDiagram.Class>>Address  to ClassDiagram.Class>>person represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Person  to ClassDiagram.Class>>Set<Address>;
Many-To-One relationship from ClassDiagram.Class>>Child  to ClassDiagram.Class>>Parent represented by ClassDiagram.Atrribute>>/***/;
One-To-Many relationship from ClassDiagram.Class>>Parent  to ClassDiagram.Class>>Set<Child>;
One-To-One relationship between ClassDiagram.Class>>Parent  to ClassDiagram.Class>>child represented by ClassDiagram.Atrribute>>/***/default;
Many-To-One relationship from ClassDiagram.Class>>Tooth  to ClassDiagram.Class>>tooth represented by ClassDiagram.Atrribute>>leftneighbour;
Many-To-One relationship from ClassDiagram.Class>>Tooth  to ClassDiagram.Class>>tooth represented by ClassDiagram.Atrribute>>rightneighbour;
Many-To-One relationship from ClassDiagram.Class>>Tooth  to ClassDiagram.Class>>mouth represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Mouth  to ClassDiagram.Class>>Collection<Tooth>;
Many-To-One relationship from ClassDiagram.Class>>FoodItem  to ClassDiagram.Class>>menu represented by ClassDiagram.Atrribute>>order_nbr;
Many-To-One relationship from ClassDiagram.Class>>Product  to ClassDiagram.Class>>product represented by ClassDiagram.Atrribute>>product_idnf;
Many-To-One relationship from ClassDiagram.Class>>ProductSqlServer  to ClassDiagram.Class>>productsqlserver represented by ClassDiagram.Atrribute>>product_idnf;
One-To-Many relationship from ClassDiagram.Class>>UserImpl  to ClassDiagram.Class>>Collection<Contact>;
Many-To-Many relationship between ClassDiagram.Class>>Bug  and ClassDiagram.Class>>list<category>: `bug_category`(Bug_ID:Bug [PK] #FK to Bug,list<category>_ID:list<category> [PK] #FK to list<category>);
Many-To-One relationship from ClassDiagram.Class>>Manager  to ClassDiagram.Class>>internetprovider represented by ClassDiagram.Atrribute>>employer;
One-To-One relationship between ClassDiagram.Class>>Passport  to ClassDiagram.Class>>customer represented by ClassDiagram.Atrribute>>owner;
One-To-Many relationship from ClassDiagram.Class>>Customer  to ClassDiagram.Class>>Set<Order>;
Many-To-One relationship from ClassDiagram.Class>>Customer  to ClassDiagram.Class>>Order represented by ClassDiagram.Atrribute>>last;
One-To-Many relationship from ClassDiagram.Class>>Customer  to ClassDiagram.Class>>Set<SupportTickets>;
One-To-Many relationship from ClassDiagram.Class>>Customer4  to ClassDiagram.Class>>Set<Order>;
One-To-Many relationship from ClassDiagram.Class>>Customer5  to ClassDiagram.Class>>Set<Order>;
One-To-Many relationship from ClassDiagram.Class>>Customer3  to ClassDiagram.Class>>Set<Order>;
One-To-Many relationship from ClassDiagram.Class>>Customer2  to ClassDiagram.Class>>Set<Order>;
Many-To-One relationship from ClassDiagram.Class>>Order  to ClassDiagram.Class>>country represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Card  to ClassDiagram.Class>>Set<CardField>;
Many-To-One relationship from ClassDiagram.Class>>Car  to ClassDiagram.Class>>Region represented by ClassDiagram.Atrribute>>region_code;
Many-To-Many relationship between ClassDiagram.Class>>Importer  and ClassDiagram.Class>>list<car>: car_importer(Importer_ID:Importer [PK] #FK to Importer,list<car>_ID:list<car> [PK] #FK to list<car>);
One-To-Many relationship from ClassDiagram.Class>>Port  to ClassDiagram.Class>>Set<Boat>;
Many-To-One relationship from ClassDiagram.Class>>Citizen  to ClassDiagram.Class>>state represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>NaturalIdOnManyToOne  to ClassDiagram.Class>>citizen represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>OwnerAddress  to ClassDiagram.Class>>owner represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Computer  to ClassDiagram.Class>>serialnumber represented by ClassDiagram.Atrribute>>serial;
One-To-One relationship between ClassDiagram.Class>>Owner  to ClassDiagram.Class>>owneraddress represented by ClassDiagram.Atrribute>>address;
One-To-One relationship between ClassDiagram.Class>>Show  to ClassDiagram.Class>>showdescription represented by ClassDiagram.Atrribute>>description;
One-To-One relationship between ClassDiagram.Class>>PersonAddress  to ClassDiagram.Class>>person represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Hardware  to ClassDiagram.Class>>hardware represented by ClassDiagram.Atrribute>>parent;
One-To-One relationship between ClassDiagram.Class>>Address  to ClassDiagram.Class>>person represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Person  to ClassDiagram.Class>>address represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>PartyAffiliate  to ClassDiagram.Class>>party represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Trousers  to ClassDiagram.Class>>trouserszip represented by ClassDiagram.Atrribute>>zip;
One-To-One relationship between ClassDiagram.Class>>Person  to ClassDiagram.Class>>personaddress represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>ShowDescription  to ClassDiagram.Class>>show represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Party  to ClassDiagram.Class>>partyaffiliate represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>TrousersZip  to ClassDiagram.Class>>trousers represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Shipment  to ClassDiagram.Class>>item represented by ClassDiagram.Atrribute>>auction;
Many-To-Many relationship between ClassDiagram.Class>>Passport  and ClassDiagram.Class>>collection<stamp>: passport_stamp(Passport_ID:Passport [PK] #FK to Passport,collection<stamp>_ID:collection<stamp> [PK] #FK to collection<stamp>);
Many-To-Many relationship between ClassDiagram.Class>>Passport  and ClassDiagram.Class>>collection<stamp>: passport_stamp(Passport_ID:Passport [PK] #FK to Passport,collection<stamp>_ID:collection<stamp> [PK] #FK to collection<stamp>);passport_visastamp(Passport_ID:Passport [PK] #FK to Passport,collection<stamp>_ID:collection<stamp> [PK] #FK to collection<stamp>);
Many-To-One relationship from ClassDiagram.Class>>Life  to ClassDiagram.Class>>cat represented by ClassDiagram.Atrribute>>owner;
Many-To-Many relationship between ClassDiagram.Class>>SysUserOrm  and ClassDiagram.Class>>collection<sysgroupsorm>: sys_groups_users(userid:SysUserOrm [PK] #FK to SysUserOrm,groupid:collection<sysgroupsorm> [PK] #FK to collection<sysgroupsorm>);
Many-To-One relationship from ClassDiagram.Class>>Life  to ClassDiagram.Class>>simplecat represented by ClassDiagram.Atrribute>>owner;
Many-To-One relationship from ClassDiagram.Class>>AnnotatedMaster  to ClassDiagram.Class>>annotateddetail represented by ClassDiagram.Atrribute>>detail_domain;
One-To-One relationship between ClassDiagram.Class>>A  to ClassDiagram.Class>>b represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Library  to ClassDiagram.Class>>Map<String,Book>;
One-To-Many relationship from ClassDiagram.Class>>Library  to ClassDiagram.Class>>Map<String,Book>;
Many-To-One relationship from ClassDiagram.Class>>Book  to ClassDiagram.Class>>library represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Book  to ClassDiagram.Class>>library represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Library  to ClassDiagram.Class>>Map<String,Book>;
One-To-Many relationship from ClassDiagram.Class>>Library  to ClassDiagram.Class>>Map<String,Book>;
Many-To-One relationship from ClassDiagram.Class>>Book  to ClassDiagram.Class>>library represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Library  to ClassDiagram.Class>>Map<String,Book>;
One-To-Many relationship from ClassDiagram.Class>>Library  to ClassDiagram.Class>>Map<String,Book>;
Many-To-One relationship from ClassDiagram.Class>>Customer  to ClassDiagram.Class>>employee represented by ClassDiagram.Atrribute>>salesperson;
Many-To-One relationship from ClassDiagram.Class>>Employee  to ClassDiagram.Class>>employee represented by ClassDiagram.Atrribute>>manager;
One-To-Many relationship from ClassDiagram.Class>>Publisher  to ClassDiagram.Class>>Set<Author>;
set<book>: bookstore_set<book>(bookstoreID:bookstore [PK] #FK to bookstore,set<book>ID:set<book> [PK] #FK to set<book>);
One-To-Many relationship from ClassDiagram.Class>>Author  to ClassDiagram.Class>>Set<Book>;
One-To-Many relationship from ClassDiagram.Class>>EmployeeGroup  to ClassDiagram.Class>>List<Employee>;
One-To-Many relationship from ClassDiagram.Class>>Store  to ClassDiagram.Class>>List<Inventory>;
One-To-Many relationship from ClassDiagram.Class>>ATable  to ClassDiagram.Class>>List<TableB>;
Many-To-One relationship from ClassDiagram.Class>>TableB  to ClassDiagram.Class>>Table represented by ClassDiagram.Atrribute>>idcolumn;
Many-To-One relationship from ClassDiagram.Class>>Contact  to ClassDiagram.Class>>folder represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Product2  to ClassDiagram.Class>>category represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Category  to ClassDiagram.Class>>List<Product2>;
Many-To-One relationship from ClassDiagram.Class>>Phone  to ClassDiagram.Class>>person represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Person  to ClassDiagram.Class>>List<Phone>;
One-To-Many relationship from ClassDiagram.Class>>Shop  to ClassDiagram.Class>>List<Product>;
One-To-Many relationship from ClassDiagram.Class>>Child1  to ClassDiagram.Class>>List<Parent1>;
One-To-Many relationship from ClassDiagram.Class>>Child2  to ClassDiagram.Class>>List<Parent1>;
Many-To-One relationship from ClassDiagram.Class>>Employee  to ClassDiagram.Class>>employee represented by ClassDiagram.Atrribute>>manager;
One-To-Many relationship from ClassDiagram.Class>>Employee  to ClassDiagram.Class>>Collection<Employee>;
One-To-Many relationship from ClassDiagram.Class>>Portal  to ClassDiagram.Class>>Set<Window>;
Many-To-One relationship from ClassDiagram.Class>>LazyAbstractEntityReference  to ClassDiagram.Class>>Entity represented by ClassDiagram.Atrribute>>entity;
Many-To-Many relationship between ClassDiagram.Class>>Alias  and ClassDiagram.Class>>list<character>: character_alias(Alias_ID:Alias [PK] #FK to Alias,list<character>_ID:list<character> [PK] #FK to list<character>);
Many-To-One relationship from ClassDiagram.Class>>MultipleCollectionRefEntity1  to ClassDiagram.Class>>Entity represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>MultipleCollectionEntity  to ClassDiagram.Class>>List<MultipleCollectionRefEntity1>;
One-To-Many relationship from ClassDiagram.Class>>MultipleCollectionEntity  to ClassDiagram.Class>>List<MultipleCollectionRefEntity2>;
Many-To-One relationship from ClassDiagram.Class>>MultipleCollectionRefEntity2  to ClassDiagram.Class>>Entity represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>GroupStep  to ClassDiagram.Class>>List<Step>;
Many-To-One relationship from ClassDiagram.Class>>Step  to ClassDiagram.Class>>step represented by ClassDiagram.Atrribute>>parent;
One-To-Many relationship from ClassDiagram.Class>>SchemaTwoEntity  to ClassDiagram.Class>>Set<SchemaOneEntity>;
One-To-Many relationship from ClassDiagram.Class>>Person  to ClassDiagram.Class>>List<Phone>;
One-To-One relationship between ClassDiagram.Class>>UserSetting  to ClassDiagram.Class>>user represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>User  to ClassDiagram.Class>>usersetting represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>User  to ClassDiagram.Class>>List<Group>;
Many-To-Many relationship between ClassDiagram.Class>>Employee  and ClassDiagram.Class>>set<project>: employee_project(employee_id:Employee [PK] #FK to Employee,project_id:set<project> [PK] #FK to set<project>);
set<role>: user_set<role>(userID:user [PK] #FK to user,set<role>ID:set<role> [PK] #FK to set<role>);
Many-To-One relationship from ClassDiagram.Class>>User  to ClassDiagram.Class>>house represented by ClassDiagram.Atrribute>>//theseexistsolelyforhhh-8464toensurethatthevariousformsofquotingarenormalizedinternally//(usingbackticks),includingthejoincolumn.withoutnormalization,themappingwillthrowa//duplicatemappingexception.;
Many-To-One relationship from ClassDiagram.Class>>User  to ClassDiagram.Class>>house represented by ClassDiagram.Atrribute>>//testukonfkw/globalquoting--seehhh-8638//thismustbeinitialized.severaldbsdonotallowmultiplenullvaluesinauniquecolumn.3;
Many-To-One relationship from ClassDiagram.Class>>Bid  to ClassDiagram.Class>>item represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>ListActionRole  to ClassDiagram.Class>>role represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Item  to ClassDiagram.Class>>Set<Bid>;
Many-To-Many relationship between ClassDiagram.Class>>Seller  and ClassDiagram.Class>>set<customer>: seller_customer(seller_id:Seller [PK] #FK to Seller,customer_id:set<customer> [PK] #FK to set<customer>);
One-To-One relationship between ClassDiagram.Class>>LGMB_From  to ClassDiagram.Class>>lgmb_to represented by ClassDiagram.Atrribute>>//lazy-associationwithmappdedbyinownlazygrouptorelation;
One-To-One relationship between ClassDiagram.Class>>LGMB_To  to ClassDiagram.Class>>lgmb_from represented by ClassDiagram.Atrribute>>fromrelation;
set<advertisement>: attachment_set<advertisement>(attachmentID:attachment [PK] #FK to attachment,set<advertisement>ID:set<advertisement> [PK] #FK to set<advertisement>);
Many-To-One relationship from ClassDiagram.Class>>B  to ClassDiagram.Class>>a represented by ClassDiagram.Atrribute>>ss;
One-To-Many relationship from ClassDiagram.Class>>A  to ClassDiagram.Class>>Set<B>;
Many-To-One relationship from ClassDiagram.Class>>B  to ClassDiagram.Class>>a represented by ClassDiagram.Atrribute>>ss;
Many-To-One relationship from ClassDiagram.Class>>A  to ClassDiagram.Class>>c represented by ClassDiagram.Atrribute>>ass;
One-To-Many relationship from ClassDiagram.Class>>A  to ClassDiagram.Class>>Set<B>;
Many-To-One relationship from ClassDiagram.Class>>D  to ClassDiagram.Class>>c represented by ClassDiagram.Atrribute>>assoiated;
Many-To-One relationship from ClassDiagram.Class>>Student  to ClassDiagram.Class>>school represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Championship  to ClassDiagram.Class>>List<Student>;
One-To-Many relationship from ClassDiagram.Class>>School  to ClassDiagram.Class>>Set<Student>;
One-To-Many relationship from ClassDiagram.Class>>School  to ClassDiagram.Class>>Set<Student>;
One-To-Many relationship from ClassDiagram.Class>>School  to ClassDiagram.Class>>Map<String,Student>;
One-To-Many relationship from ClassDiagram.Class>>Group  to ClassDiagram.Class>>Set<Membership>;
One-To-Many relationship from ClassDiagram.Class>>User  to ClassDiagram.Class>>Set<Membership>;
Many-To-One relationship from ClassDiagram.Class>>Membership  to ClassDiagram.Class>>user represented by ClassDiagram.Atrribute>>member;
One-To-One relationship between ClassDiagram.Class>>Y  to ClassDiagram.Class>>tranche represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Tranche  to ClassDiagram.Class>>tranchenmodell represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Tranche  to ClassDiagram.Class>>y represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>X  to ClassDiagram.Class>>tranchenmodell represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Preisregelung  to ClassDiagram.Class>>tranchenmodell represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Tranchenmodell  to ClassDiagram.Class>>List<Tranche>;
One-To-One relationship between ClassDiagram.Class>>Tranchenmodell  to ClassDiagram.Class>>preisregelung represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Tranchenmodell  to ClassDiagram.Class>>x represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-One relationship between ClassDiagram.Class>>Preisregelung  to ClassDiagram.Class>>tranchenmodell represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-One relationship from ClassDiagram.Class>>Tranche  to ClassDiagram.Class>>tranchenmodell represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Tranchenmodell  to ClassDiagram.Class>>List<Tranche>;
One-To-One relationship between ClassDiagram.Class>>Tranchenmodell  to ClassDiagram.Class>>preisregelung represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>Product  to ClassDiagram.Class>>List<Feature>;
Many-To-One relationship from ClassDiagram.Class>>Feature  to ClassDiagram.Class>>product represented by ClassDiagram.Atrribute>>GeneratedName;
One-To-Many relationship from ClassDiagram.Class>>ConfEntity  to ClassDiagram.Class>>Set<UserConfEntity>;
One-To-Many relationship from ClassDiagram.Class>>UserEntity  to ClassDiagram.Class>>Set<UserConfEntity>;
Many-To-One relationship from ClassDiagram.Class>>UserConfEntity  to ClassDiagram.Class>>Entity represented by ClassDiagram.Atrribute>>user;
Many-To-One relationship from ClassDiagram.Class>>UserConfEntity  to ClassDiagram.Class>>Entity represented by ClassDiagram.Atrribute>>confkey;
One-To-Many relationship from ClassDiagram.Class>>Company  to ClassDiagram.Class>>List<User>;
Many-To-One relationship from ClassDiagram.Class>>User  to ClassDiagram.Class>>Any represented by ClassDiagram.Atrribute>>GeneratedName;
Many-To-Many relationship between ClassDiagram.Class>>ManyToManyOwner  and ClassDiagram.Class>>Target: none(none:ManyToManyOwner [PK] #FK to ManyToManyOwner,none:Target [PK] #FK to Target);
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Customer  ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Employee  Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Person  ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Thing  ;
Inheritance based on SINGLE-TABLE strategy (PUSH-UP): ROOT>>Product   Descriminator>>PRODUCT_TYPE: String ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Pet  ;
Inheritance based on SINGLE-TABLE strategy (PUSH-UP): ROOT>>Employee   Descriminator>>Employee: String ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Fruit  ;
Inheritance based on Table-Per-Class strategy (PUSH-DOWN): ROOT>>Employee  ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>User  ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Person  ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Animal  ;
Inheritance based on Table-Per-Class strategy (PUSH-DOWN): ROOT>>ABlockableEntity  ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>AImpl  ;
Inheritance based on SINGLE-TABLE strategy (PUSH-UP): ROOT>>Drill   Descriminator>>DRILL_TYPE: String ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Person  ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>File  ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Asset  ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Customer  ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>EventInformation  ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Pool  Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Clothing  ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Vegetable  ;
Inheritance based on SINGLE-TABLE strategy (PUSH-UP): ROOT>>File  ;
Inheritance based on Table-Per-Class strategy (PUSH-DOWN): ROOT>>File  ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Vehicule  ;
Inheritance based on SINGLE-TABLE strategy (PUSH-UP): ROOT>>Plane   Descriminator>>planetype: String ;
Inheritance based on SINGLE-TABLE strategy (PUSH-UP): ROOT>>Comment   Descriminator>>DTYPE: String ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Asset  ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Person  ;
Inheritance based on Table-Per-Class strategy (PUSH-DOWN): ROOT>>Machine  ;
Inheritance based on Table-Per-Class strategy (PUSH-DOWN): ROOT>>Component  ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Mammal  Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Animal  ;
Inheritance based on SINGLE-TABLE strategy (PUSH-UP): ROOT>>Animal  ;
Inheritance based on Table-Per-Class strategy (PUSH-DOWN): ROOT>>Animal  ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Employee  ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Employee  ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Inspector  ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>B  ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>ClassA  ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Child  ;
Inheritance based on Table-Per-Class strategy (PUSH-DOWN): ROOT>>Car  ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Boat  ;
Inheritance based on SINGLE-TABLE strategy (PUSH-UP): ROOT>>Hardware   Descriminator>>DeviceType: String ;
Inheritance based on SINGLE-TABLE strategy (PUSH-UP): ROOT>>B  ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Polygon  ;
Inheritance based on SINGLE-TABLE strategy (PUSH-UP): ROOT>>ParentEntity   Descriminator>>CLASS_ID: String ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>RootEntity  ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Product  Inheritance based on SINGLE-TABLE strategy (PUSH-UP): ROOT>>Product  ;
Inheritance based on Table-Per-Class strategy (PUSH-DOWN): ROOT>>Product  ;
Inheritance based on SINGLE-TABLE strategy (PUSH-UP): ROOT>>Person   Descriminator>>person_type: String ;
Inheritance based on Table-Per-Class strategy (PUSH-DOWN): ROOT>>Element  ;
Inheritance based on SINGLE-TABLE strategy (PUSH-UP): ROOT>>Step   Descriminator>>type: String ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Super  ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Principal  ;
Inheritance based on JOINED strategy (DISTINCTION): ROOT>>Principal  ;
