ClassDiagram.Class>> Role =>=>=> RelationalSchema.Table>> role;
ClassDiagram.Class>> Department =>=>=> RelationalSchema.Table>> department;
ClassDiagram.Class>> Privilege =>=>=> RelationalSchema.Table>> privilege;
ClassDiagram.Class>> User =>=>=> RelationalSchema.Table>> user;
ClassDiagram.Attribut>> Role.//主键roleid:long =>=>=> RelationalSchema.Column>> role.//主键roleid;
ClassDiagram.Attribut>> Role.//父节点idpid:long =>=>=> RelationalSchema.Column>> role.//父节点idpid;
ClassDiagram.Attribut>> Role.name:String =>=>=> RelationalSchema.Column>> role.name;
ClassDiagram.Attribut>> Role.isparent:Boolean =>=>=> RelationalSchema.Column>> role.isparent;
ClassDiagram.Attribut>> Role.description:String =>=>=> RelationalSchema.Column>> role.description;
ClassDiagram.Attribut>> Role.checked:Boolean =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> Department.departmentid:long =>=>=> RelationalSchema.Column>> department.departmentid PRIMARY KEY;
ClassDiagram.Attribut>> Department.departmentname:String =>=>=> RelationalSchema.Column>> department.departmentname;
ClassDiagram.Attribut>> Department.description:String =>=>=> RelationalSchema.Column>> department.description;
ClassDiagram.Attribut>> Privilege.privilegeid:Long =>=>=> RelationalSchema.Column>> privilege.privilegeid PRIMARY KEY;
ClassDiagram.Attribut>> Privilege.privilegename:String =>=>=> RelationalSchema.Column>> privilege.privilegename;
ClassDiagram.Attribut>> Privilege.pid:Long =>=>=> RelationalSchema.Column>> privilege.pid;
ClassDiagram.Attribut>> Privilege.icon:String =>=>=> RelationalSchema.Column>> privilege.icon;
ClassDiagram.Attribut>> Privilege.isparent:Boolean =>=>=> RelationalSchema.Column>> privilege.isparent;
ClassDiagram.Attribut>> Privilege.checked:Boolean =>=>=> NOT MAPPED -Explanation: Transient Field ;
ClassDiagram.Attribut>> Privilege.url:String =>=>=> RelationalSchema.Column>> privilege.url;
ClassDiagram.Attribut>> Privilege.target:String =>=>=> RelationalSchema.Column>> privilege.target;
ClassDiagram.Attribut>> Privilege.type:int =>=>=> RelationalSchema.Column>> privilege.type;
ClassDiagram.Attribut>> User.userid:long =>=>=> RelationalSchema.Column>> user.userid PRIMARY KEY;
ClassDiagram.Attribut>> User.loginname:String =>=>=> RelationalSchema.Column>> user.loginname;
ClassDiagram.Attribut>> User.username:String =>=>=> RelationalSchema.Column>> user.username;
ClassDiagram.Attribut>> User.password:String =>=>=> RelationalSchema.Column>> user.password;
ClassDiagram.Attribut>> User.phone:String =>=>=> RelationalSchema.Column>> user.phone;
ClassDiagram.Attribut>> User.email:String =>=>=> RelationalSchema.Column>> user.email;
ClassDiagram.Attribut>> User.sex:String =>=>=> RelationalSchema.Column>> user.sex;
ClassDiagram.Attribut>> User.GeneratedName:Department =>=>=> RelationalSchema.Column>> user.GeneratedName;
set<privilege>: role_set<privilege>(roleID:role [PK] #FK to role,set<privilege>ID:set<privilege> [PK] #FK to set<privilege>);
One-To-Many relationship from ClassDiagram.Class>>Department  to ClassDiagram.Class>>Set<User>;
set<role>: user_set<role>(userID:user [PK] #FK to user,set<role>ID:set<role> [PK] #FK to set<role>);
